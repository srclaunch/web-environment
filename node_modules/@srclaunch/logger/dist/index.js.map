{
  "version": 3,
  "sources": ["../src/lib/logger.ts", "../src/index.ts"],
  "sourcesContent": ["// import {\n//   Environment,\n//   // EnvironmentType\n// } from '@srclaunch/types';\n// import { getBrowserEnvironment, getNodeEnvironment } from '@srclaunch/environment';\n\n// import { nanoid } from 'nanoid';\n// import winston from 'winston';\n\n// import { CloudWatchConfig } from '../types/cloudwatch';\nimport {\n  AnalyticsEventProps,\n  CriticalEventProps,\n  DebugEventProps,\n  ExceptionEventProps,\n  HttpEventProps,\n  InfoEventProps,\n  WarningEventProps,\n} from '../types/events';\nimport { LoggerConfig } from '../types/index';\n// import { LoggerLogLevelsInterface } from '../types/levels';\n// import { getCloudwatchTransport } from './cloudwatch.js';\n\nexport class Logger {\n  // private logger: LoggerLogLevelsInterface;\n  // public environment: Environment;\n\n  public analytics(props: AnalyticsEventProps): void {\n    // if (this.logger) {\n    //   this.logger.analytics({\n    //     ...this.getCommonProps,\n    //     ...props,\n    //   });\n    // }\n  }\n  public critical(props: CriticalEventProps): void {\n    // if (this.logger)\n    //   this.logger.critical({ message: props, ...this.getCommonProps() });\n  }\n  public debug(props: DebugEventProps): void {\n    // if (this.logger)\n    //   this.logger.debug(\n    //     typeof props === 'string'\n    //       ? {\n    //           message: props,\n    //           ...this.getCommonProps(),\n    //         }\n    //       : { ...props, ...this.getCommonProps() },\n    //   );\n  }\n  public async exception(props: ExceptionEventProps): Promise<void> {\n    // const colors = global?.window\n    //   ? {\n    //       red: () => {\n    //         console.log('color: red;', props);\n    //       },\n    //     }\n    //   : null;\n\n    console.log(props);\n\n    // if (this.logger)\n    // this.logger.exception({ message: props, ...this.getCommonProps() });\n  }\n  public http(props: HttpEventProps): void {\n    // if (this.logger) this.logger.http({ ...props, ...this.getCommonProps() });\n  }\n  public async info(props: InfoEventProps): Promise<void> {\n    // const colors = global?.window\n    //   ? {\n    //       blue: () => {\n    //         console.log('color: blue;', props);\n    //       },\n    //     }\n    //   : null;\n\n    console.log(props);\n  }\n  public warning(props: WarningEventProps): void {\n    // if (this.logger)\n    // this.logger.warning({ ...this.getCommonProps(), message: props });\n  }\n  // private getCommonProps() {\n  //   return {\n  //     created: new Date().toString(),\n  //     environment: this.environment.id,\n  //     id: nanoid(),\n  //   };\n  // }\n\n  constructor(config?: LoggerConfig) {\n    // const transports = this.getEnvironmentTransports({\n    //   cloudwatchConfig: config?.cloudwatchConfig,\n    // });\n\n    // winston.addColors({\n    //   analytics: 'orange',\n    //   critical: 'bold red whiteBG',\n    //   debug: 'cyan',\n    //   exception: 'red',\n    //   http: 'magenta',\n    //   info: 'blue italic',\n    //   warning: 'yellow',\n    // });\n\n    // this.logger = <LoggerLogLevelsInterface>winston.createLogger({\n    //   format: this.getFormatters().console,\n    //   level: config?.level ?? this.getLogLevel(),\n    //   levels: {\n    //     analytics: 6,\n    //     critical: 0,\n    //     debug: 4,\n    //     exception: 1,\n    //     http: 5,\n    //     info: 3,\n    //     warning: 2,\n    //   },\n    //   // @ts-ignore\n    //   transports,\n    // });\n\n    // this.environment = config?.environment ?? getBrowserEnvironment();\n  }\n\n  // private getLogLevel(): string {\n  //   switch (this.environment.type) {\n  //     case EnvironmentType.Development:\n  //       return 'debug';\n  //     case EnvironmentType.NonProduction:\n  //       return 'debug';\n  //     case EnvironmentType.Production:\n  //       return 'warning';\n  //   }\n  // }\n\n  // private getFormatters() {\n  //   return {\n  //     console: winston.format.combine(\n  //       winston.format.timestamp({ format: 'hh:mm:ss' }),\n  //       winston.format.colorize({ all: true }),\n  //       winston.format.printf(event => {\n  //         return `[${event.timestamp} - ${this.environment.id}] ${event.level}: ${event.message}`;\n  //       }),\n  //     ),\n  //   };\n  // }\n  // private getEnvironmentTransports({\n  //   cloudwatchConfig,\n  // }: {\n  //   cloudwatchConfig?: CloudWatchConfig;\n  // }) {\n  //   // const fileTransport = new winston.transports.File({ filename: 'combined.log' });\n  //   // const consoleTransport = new winston.transports.Console();\n\n  //   switch (this.environment.type) {\n  //     case EnvironmentType.Development:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.NonProduction:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.Production:\n  //       if (cloudwatchConfig) {\n  //         const cloudWatchTransport = getCloudwatchTransport(cloudwatchConfig);\n\n  //         return [cloudWatchTransport];\n  //       }\n\n  //       return [];\n  //   }\n  // }\n}\n\nexport default Logger;\n", "// import { getLoggerMiddleware } from './lib/express-middleware.js';\nimport Logger from './lib/logger.js';\nimport { CloudWatchConfig } from './types/cloudwatch';\nimport { LoggerConfig } from './types/index';\n// export { getLoggerMiddleware };\nexport default Logger;\nexport { Logger };\nexport type { CloudWatchConfig, LoggerConfig };\n"],
  "mappings": "AAuBO,WAAa,CAIX,UAAU,EAAkC,CAOnD,CACO,SAAS,EAAiC,CAGjD,CACO,MAAM,EAA8B,CAU3C,MACa,WAAU,EAA2C,CAShE,QAAQ,IAAI,CAAK,CAInB,CACO,KAAK,EAA6B,CAEzC,MACa,MAAK,EAAsC,CAStD,QAAQ,IAAI,CAAK,CACnB,CACO,QAAQ,EAAgC,CAG/C,CASA,YAAY,EAAuB,CAgCnC,CA+CF,EAEO,EAAQ,ECtKf,GAAO,GAAQ",
  "names": []
}
