{
  "version": 3,
  "sources": ["../node_modules/tslib/tslib.js", "../node_modules/lower-case/src/index.ts", "../node_modules/no-case/src/index.ts", "../node_modules/pascal-case/src/index.ts", "../node_modules/camel-case/src/index.ts", "../node_modules/upper-case-first/src/index.ts", "../node_modules/capital-case/src/index.ts", "../node_modules/upper-case/src/index.ts", "../node_modules/constant-case/src/index.ts", "../node_modules/dot-case/src/index.ts", "../node_modules/header-case/src/index.ts", "../node_modules/param-case/src/index.ts", "../node_modules/path-case/src/index.ts", "../node_modules/sentence-case/src/index.ts", "../node_modules/snake-case/src/index.ts", "../node_modules/change-case/src/index.ts", "../node_modules/pluralize/pluralize.js", "../src/index.ts", "../src/lib/cli.ts", "../src/commands/build/index.ts", "../src/lib/build/index.ts", "../src/commands/help/index.ts", "../src/commands/models/index.ts", "../src/commands/models/build/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/chalk/source/vendor/ansi-styles/index.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/chalk/source/vendor/supports-color/browser.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/chalk/source/utilities.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/chalk/source/index.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/errors.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/formats.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/util.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/english.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/formatter.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/invalid.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/zone.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/zones/systemZone.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/zones/IANAZone.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/zones/fixedOffsetZone.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/zones/invalidZone.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/zoneUtil.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/settings.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/locale.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/regexParser.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/duration.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/interval.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/info.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/diff.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/digits.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/tokenParser.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/impl/conversions.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/datetime.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/luxon/src/luxon.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/src/lib/express-middleware.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/activity/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/analytics/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/analytics/web/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/deployment/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/device/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/environment/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/onboarding/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/pipeline/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/pipeline/workflow.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/platforms/web/pages/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/ui/alert.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/ui/modal.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/application/ui/notification.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/data/data-point/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/data/model/defaults.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/data/model/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/data/primitive/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/problem/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/appearance/color.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/application.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/boolean.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/date.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/format.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/currency.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/language.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/locale.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/menu.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/network.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/number.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/pii.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/places/transportation/airport.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/standards.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/string.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/rules/validation/form/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/service/queue/task/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/user/authentication/verification.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/applab/user/role.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/business/commerce/payment-method/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/business/commerce/subscription/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/communications/chat.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/communications/medium.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/engineering/logging/level.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/engineering/networking/http/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/engineering/platform/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/locale/country.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/currency/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/language/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/locale/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/time/region.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/time/timezone.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/time/timezones.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/locale/region.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/locale/countries.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/locale/locales.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/@srclaunch/types/src/i18n/time/regions.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/src/lib/logger.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/logger/node_modules/nanoid/index.browser.js", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/activity/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/analytics/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/analytics/web/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/deployment/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/device/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/environment/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/onboarding/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/pipeline/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/pipeline/workflow.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/platforms/web/pages/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/ui/alert.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/ui/modal.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/application/ui/notification.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/data/data-point/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/data/model/defaults.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/data/model/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/data/primitive/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/problem/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/appearance/color.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/application.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/boolean.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/date.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/format.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/currency.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/language.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/locale.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/menu.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/network.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/number.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/pii.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/places/transportation/airport.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/standards.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/condition/primitive/string.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/rules/validation/form/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/service/queue/task/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/user/authentication/verification.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/applab/user/role.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/business/commerce/payment-method/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/business/commerce/subscription/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/communications/chat.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/communications/medium.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/engineering/logging/level.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/engineering/networking/http/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/engineering/platform/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/locale/country.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/currency/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/language/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/locale/index.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/time/region.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/time/timezone.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/time/timezones.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/locale/region.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/locale/countries.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/locale/locales.ts", "../node_modules/@srclaunch/exceptions/node_modules/@srclaunch/types/src/i18n/time/regions.ts", "../node_modules/@srclaunch/exceptions/node_modules/nanoid/index.browser.js", "../node_modules/@srclaunch/exceptions/node_modules/serialize-error/index.js", "../node_modules/@srclaunch/exceptions/src/types/exception.ts", "../node_modules/@srclaunch/exceptions/src/lib/exception.ts", "../node_modules/@srclaunch/exceptions/src/lib/capture.ts", "../node_modules/@srclaunch/exceptions/src/types/remediation.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/environments/server/process.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/process.ts", "../node_modules/@srclaunch/exceptions/src/lib/client.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/challenges.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/login.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/mfa.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/signup.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/tokens.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/username-availability.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/verification.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/data/db/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/data/db/sequelize.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/networking/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/networking/http/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/services/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/services/aws/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/services/aws/cognito/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/services/stripe/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/user/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/validation/index.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions.ts", "../node_modules/@srclaunch/exceptions/src/lib/exceptions/authentication/devices.ts", "../node_modules/@srclaunch/exceptions/src/lib/remediation.ts", "../src/commands/models/build/outputs/applab.ts", "../src/commands/models/build/exports.ts", "../src/commands/models/build/outputs/http-client.ts", "../src/commands/models/build/outputs/redux.ts", "../src/commands/models/build/outputs/sequelize.ts", "../node_modules/@srclaunch/types/src/applab/activity/index.ts", "../node_modules/@srclaunch/types/src/applab/analytics/index.ts", "../node_modules/@srclaunch/types/src/applab/analytics/web/index.ts", "../node_modules/@srclaunch/types/src/applab/application/deployment/index.ts", "../node_modules/@srclaunch/types/src/applab/application/device/index.ts", "../node_modules/@srclaunch/types/src/applab/application/environment/index.ts", "../node_modules/@srclaunch/types/src/applab/application/onboarding/index.ts", "../node_modules/@srclaunch/types/src/applab/application/pipeline/index.ts", "../node_modules/@srclaunch/types/src/applab/application/pipeline/workflow.ts", "../node_modules/@srclaunch/types/src/applab/application/platforms/web/pages/index.ts", "../node_modules/@srclaunch/types/src/applab/application/ui/alert.ts", "../node_modules/@srclaunch/types/src/applab/application/ui/modal.ts", "../node_modules/@srclaunch/types/src/applab/application/ui/notification.ts", "../node_modules/@srclaunch/types/src/applab/data/data-point/index.ts", "../node_modules/@srclaunch/types/src/applab/data/model/defaults.ts", "../node_modules/@srclaunch/types/src/applab/data/model/index.ts", "../node_modules/@srclaunch/types/src/applab/data/primitive/index.ts", "../node_modules/@srclaunch/types/src/applab/problem/index.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/index.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/appearance/color.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/application.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/boolean.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/date.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/format.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/currency.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/language.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/i18n/locale.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/menu.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/network.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/number.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/pii.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/places/transportation/airport.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/standards.ts", "../node_modules/@srclaunch/types/src/applab/rules/condition/primitive/string.ts", "../node_modules/@srclaunch/types/src/applab/rules/index.ts", "../node_modules/@srclaunch/types/src/applab/rules/validation/form/index.ts", "../node_modules/@srclaunch/types/src/applab/service/queue/task/index.ts", "../node_modules/@srclaunch/types/src/applab/user/authentication/verification.ts", "../node_modules/@srclaunch/types/src/applab/user/role.ts", "../node_modules/@srclaunch/types/src/business/commerce/payment-method/index.ts", "../node_modules/@srclaunch/types/src/business/commerce/subscription/index.ts", "../node_modules/@srclaunch/types/src/communications/chat.ts", "../node_modules/@srclaunch/types/src/communications/medium.ts", "../node_modules/@srclaunch/types/src/engineering/logging/level.ts", "../node_modules/@srclaunch/types/src/engineering/networking/http/index.ts", "../node_modules/@srclaunch/types/src/engineering/platform/index.ts", "../node_modules/@srclaunch/types/src/i18n/locale/country.ts", "../node_modules/@srclaunch/types/src/i18n/currency/index.ts", "../node_modules/@srclaunch/types/src/i18n/language/index.ts", "../node_modules/@srclaunch/types/src/i18n/locale/index.ts", "../node_modules/@srclaunch/types/src/i18n/time/region.ts", "../node_modules/@srclaunch/types/src/i18n/time/timezone.ts", "../node_modules/@srclaunch/types/src/i18n/time/timezones.ts", "../node_modules/@srclaunch/types/src/i18n/locale/region.ts", "../node_modules/@srclaunch/types/src/i18n/locale/countries.ts", "../node_modules/@srclaunch/types/src/i18n/locale/locales.ts", "../node_modules/@srclaunch/types/src/i18n/time/regions.ts", "../src/commands/models/build/types.ts", "../src/commands/models/build/outputs/types.ts", "../src/commands/models/build/stubs/index.ts", "../src/commands/models/build/stubs/models.ts", "../src/commands/models/list.ts", "../src/commands/models/build/clean.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      \u0130: \"\\u0069\",\n      I: \"\\u0131\",\n      I\u0307: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      \u0130: \"\\u0069\",\n      I: \"\\u0131\",\n      I\u0307: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      \u012E: \"\\u012F\\u0307\",\n      \u00CC: \"\\u0069\\u0307\\u0300\",\n      \u00CD: \"\\u0069\\u0307\\u0301\",\n      \u0128: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n", "import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n", "import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function pascalCaseTransform(input: string, index: number) {\n  const firstChar = input.charAt(0);\n  const lowerChars = input.substr(1).toLowerCase();\n  if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n    return `_${firstChar}${lowerChars}`;\n  }\n  return `${firstChar.toUpperCase()}${lowerChars}`;\n}\n\nexport function pascalCaseTransformMerge(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\n\nexport function pascalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"\",\n    transform: pascalCaseTransform,\n    ...options,\n  });\n}\n", "import {\n  pascalCase,\n  pascalCaseTransform,\n  pascalCaseTransformMerge,\n  Options,\n} from \"pascal-case\";\n\nexport { Options };\n\nexport function camelCaseTransform(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransform(input, index);\n}\n\nexport function camelCaseTransformMerge(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransformMerge(input);\n}\n\nexport function camelCase(input: string, options: Options = {}) {\n  return pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options,\n  });\n}\n", "/**\n * Upper case the first character of an input string.\n */\nexport function upperCaseFirst(input: string) {\n  return input.charAt(0).toUpperCase() + input.substr(1);\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function capitalCaseTransform(input: string) {\n  return upperCaseFirst(input.toLowerCase());\n}\n\nexport function capitalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: capitalCaseTransform,\n    ...options,\n  });\n}\n", "/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      i\u0307: \"\\u0049\",\n      j\u0307: \"\\u004A\",\n      \u012F\u0307: \"\\u012E\",\n      i\u0307\u0300: \"\\u00CC\",\n      i\u0307\u0301: \"\\u00CD\",\n      i\u0307\u0303: \"\\u0128\",\n    },\n  },\n};\n\n/**\n * Localized upper case.\n */\nexport function localeUpperCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return upperCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return upperCase(str);\n}\n\n/**\n * Upper case as a function.\n */\nexport function upperCase(str: string) {\n  return str.toUpperCase();\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCase } from \"upper-case\";\n\nexport { Options };\n\nexport function constantCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"_\",\n    transform: upperCase,\n    ...options,\n  });\n}\n", "import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function dotCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \".\",\n    ...options,\n  });\n}\n", "import { capitalCase, Options } from \"capital-case\";\n\nexport { Options };\n\nexport function headerCase(input: string, options: Options = {}) {\n  return capitalCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function paramCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function pathCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"/\",\n    ...options,\n  });\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function sentenceCaseTransform(input: string, index: number) {\n  const result = input.toLowerCase();\n  if (index === 0) return upperCaseFirst(result);\n  return result;\n}\n\nexport function sentenceCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: sentenceCaseTransform,\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function snakeCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"_\",\n    ...options,\n  });\n}\n", "export * from \"camel-case\";\nexport * from \"capital-case\";\nexport * from \"constant-case\";\nexport * from \"dot-case\";\nexport * from \"header-case\";\nexport * from \"no-case\";\nexport * from \"param-case\";\nexport * from \"pascal-case\";\nexport * from \"path-case\";\nexport * from \"sentence-case\";\nexport * from \"snake-case\";\n", "/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[e\u00E9]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n", "import meow from 'meow';\nimport updateNotifier, { Package } from 'update-notifier';\n\nimport { run } from './lib/cli';\n\nexport const helpMessage = `\nUsage\n  $ applab <command>\n\nCommands\n  build-models - Build models into Sequelize models, Typescript definitions and JSON\n  data - Commands related to building shared data types and models\n  dev - Start Web/mobile apps in development mode.\n  create-project - Create a new AppLab project repository\n  release - Collect changes, bump and tag version, and deploy\n  text - Runs tests\n  update - Update SrcLaunch and AppLab dependencies\n\nTo get help for a specific command type help after the command name, for example:\n  $ applab dev help\n`;\n\n\nexport const cli = meow(helpMessage, {\n  flags: {},\n  importMeta: import.meta,\n});\n\nupdateNotifier({ pkg: cli.pkg as Package }).notify();\n\nrun({\n  cliVersion: cli.pkg.version,\n  command: cli.input,\n  flags: cli.flags,\n});\n", "import fs from 'fs-extra';\nimport { TypedFlags } from 'meow';\nimport path from 'node:path';\n\nimport { handleBuildCommand } from '../commands/build/index';\nimport { showHelp } from '../commands/help/index';\nimport { handleModelCommands } from '../commands/models/index';\nimport { cli } from '../index';\n\nexport async function ensureCwdIsApplabProject() {\n  const projectConfigFilePath = path.join(path.resolve(), 'applab.config.json');\n  const isCwdProjectLevel = Boolean(await fs.stat(projectConfigFilePath));\n\n  if (!isCwdProjectLevel) {\n    throw new Error(\n      'Please run this command from the AppLab project directory.',\n    );\n  }\n}\n\nexport async function run({\n  cliVersion,\n  command,\n  flags,\n}: {\n  readonly cliVersion?: string;\n  readonly command: readonly string[];\n  readonly flags: TypedFlags<{}> & Record<string, unknown>;\n}): Promise<void> {\n  try {\n    switch (command[0]) {\n      case 'build':\n        {\n          const config = await fs.readFile(\n            path.join(path.resolve(), 'applab.config.json'),\n            'utf8',\n          );\n\n          if (!config) {\n            console.error('Missing config file \"applab.config.json\"');\n          } else {\n            try {\n              const buildConfig = JSON.parse(config).build;\n\n              await handleBuildCommand(buildConfig);\n            } catch (error) {\n              console.error(\n                'Error in config file \"applab.config.json\":',\n                error,\n              );\n            }\n          }\n        }\n\n        break;\n      case 'models':\n        // await buildModels();\n        await handleModelCommands(command[1]);\n        break;\n      case 'dev':\n        console.log('why hi here?');\n        // await runDev({ cliVersion, flags });\n        break;\n      case 'help':\n        showHelp();\n        break;\n      default:\n        console.error('Unknown command');\n        cli.showHelp();\n        break;\n    }\n  } catch (error) {\n    // const { waitUntilExit } = render(\n    //   // <FullScreen>\n    //   <Text>{err.message}</Text>,\n    //   // </FullScreen>,\n    // );\n    // await waitUntilExit();\n    console.log('err', error);\n  }\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { build } from '../../lib/build/index';\nimport { BuildConfig } from '../../types/build/index';\n\nexport async function handleBuildCommand(\n  config: BuildConfig | readonly BuildConfig[],\n) {\n  if (Array.isArray(config) && config.length > 0) {\n    let buildDirs: (string | undefined)[] = [];\n\n    for (const buildConfig of config) {\n      if (!buildDirs.includes(buildConfig.buildDir) && buildConfig.buildDir) {\n        await fs.emptyDir(path.join(path.resolve(), buildConfig.buildDir));\n\n        buildDirs = [...buildDirs, buildConfig.buildDir];\n      }\n\n      await build(buildConfig);\n    }\n  }\n}\n", "import { build as buildCommand } from 'esbuild';\nimport ts, { Program } from 'typescript';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { BuildConfig } from '../../types/build/index';\n\nexport async function build({\n  buildDir = 'dist',\n  buildFile = 'index.js',\n  buildPath = '',\n  buildTypes = false,\n  bundle = true,\n  bundleCSS = true,\n  codeSplitting = true,\n  color = true,\n  define = {},\n  excludeLibs = [],\n  format = 'esm',\n  inputScripts = ['src/index.ts'],\n  minify = true,\n  platform = 'browser',\n  showWarnings = false,\n  sourceMap = true,\n  target = 'es6',\n  treeShaking = true,\n  tsconfigPath = '',\n}: BuildConfig) {\n  try {\n    console.info(\n      `Compiling and bundling JS to ${format.toLocaleUpperCase()} format...`,\n    );\n\n    const defineValue: BuildConfig['define'] = define\n      ? Object.entries(define).reduce((acc, [key, value]) => {\n        // @ts-ignore\n          acc[key] = JSON.stringify(value);\n          return acc;\n        }, {})\n      : {};\n\n    const config = {\n      bundle,\n      color,\n      define: defineValue,\n      entryPoints: inputScripts.map(script =>\n        path.join(\n          path.resolve(),\n          // buildPath,\n          script,\n        ),\n      ),\n      external: excludeLibs,\n      format,\n      minify,\n      outdir:\n        format === 'esm' && codeSplitting\n          ? path.join(\n              path.resolve(),\n              //  buildPath,\n              buildDir,\n            )\n          : undefined,\n      outfile:\n        format === 'esm' && codeSplitting\n          ? undefined\n          : inputScripts.length === 1\n          ? path.join(\n              path.resolve(),\n              //  buildPath,\n              buildDir,\n              buildFile,\n            )\n          : undefined,\n      platform,\n      sourcemap: sourceMap,\n      splitting: format === 'esm' && codeSplitting,\n      target,\n      treeShaking,\n    };\n\n    const result = await buildCommand(config);\n\n    if (result.warnings && showWarnings) {\n      result.warnings.forEach(warning => {\n        console.warn(warning.text);\n      });\n    }\n\n    if (result.errors) {\n      result.errors.forEach(error => {\n        console.error(error.text);\n      });\n    }\n\n    if (buildTypes) {\n      const tsConfigContents = await fs.readFile(\n        path.join(path.resolve(), tsconfigPath),\n        'utf8',\n      );\n      const tsConfig = await JSON.parse(tsConfigContents.toString());\n      const tsConfigUpdatedWithPath = {\n        ...tsConfig,\n        compilerOptions: {\n          ...tsConfig.compilerOptions,\n          declarationDir: path.join(path.resolve(), buildPath, 'dist'),\n          rootDir: path.join(path.resolve(), buildPath, 'src'),\n        },\n      };\n      const { options } = ts.parseJsonConfigFileContent(\n        tsConfigUpdatedWithPath,\n        ts.sys,\n        path.join(path.resolve(), buildPath),\n      );\n      const srcFiles = await fs.readdir(\n        path.join(path.resolve(), buildPath, 'src'),\n      );\n      const buildFiles = srcFiles\n        .filter(f => f.endsWith('.ts') || f.endsWith('.tsx'))\n        .map(file => {\n          return path.join(path.resolve(), buildPath, 'src', file);\n        });\n      const program: Program = ts.createProgram(buildFiles, options);\n      const emitResult = program.emit();\n      const allDiagnostics = ts\n        .getPreEmitDiagnostics(program)\n        .concat(emitResult.diagnostics);\n\n      for (const diagnostic of allDiagnostics) {\n        if (diagnostic.file) {\n          const { line, character } =\n            diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n          const message = ts.flattenDiagnosticMessageText(\n            diagnostic.messageText,\n            '\\n',\n          );\n          console.log(\n            `${diagnostic.file.fileName} (${line + 1},${\n              character + 1\n            }): ${message}`,\n          );\n        } else {\n          console.log(\n            `${ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')}`,\n          );\n        }\n      }\n    }\n  } catch (err: any) {\n    console.error(err);\n  }\n}\n", "import { cli } from '../../index.js';\n\nexport function showHelp(): void {\n  cli.showHelp();\n}\n", "import { buildModels } from './build/index';\nimport { listModels } from './list';\nimport { cli } from '../../index';\nimport { ensureCwdIsApplabProject } from '../../lib/cli';\nimport { cleanModels } from './build/clean';\n\nexport async function handleModelCommands(command?: string) {\n  await ensureCwdIsApplabProject();\n\n  switch (command) {\n    case 'clean':\n      await cleanModels();\n      break;\n    case 'build':\n      await buildModels();\n      break;\n    case 'help':\n      console.info('Available model commands are: build, list');\n      break;\n    case 'list':\n      await listModels();\n      // await constructModelExportIndexScript(flags);\n      break;\n    default:\n      console.error('Unknown model command');\n      cli.showHelp();\n      break;\n  }\n}\n", "import { Exception } from '@srclaunch/exceptions';\nimport fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { BuildConfig } from '../../../types/build';\nimport { handleBuildCommand } from '../../build/index';\nimport { cleanModels } from './clean';\nimport { buildAppLabModels } from './outputs/applab';\nimport { buildHttpClient } from './outputs/http-client';\n// import { buildJSONModels } from './outputs/json';\nimport { buildReduxSlices } from './outputs/redux';\nimport { buildSequelizeModels } from './outputs/sequelize';\nimport { buildModelTypes } from './outputs/types';\nimport { copyStubModels } from './stubs/index';\n\nexport async function buildProject(projectPath: string) {\n  const fullConfigPath = path.join(\n    path.resolve(),\n    projectPath,\n    'applab.config.json',\n  );\n\n  try {\n    const configContents = await fs.readFile(fullConfigPath);\n    const config = await JSON.parse(configContents.toString());\n    const buildConfig: BuildConfig[] = config.build.map(\n      (build: BuildConfig) => ({\n        ...build,\n        buildDir: build.buildDir\n          ? path.join(projectPath, build.buildDir)\n          : undefined,\n        buildPath: projectPath,\n        inputScripts: build.inputScripts\n          ? build.inputScripts.map(input => path.join(projectPath, input))\n          : [],\n        tsconfigPath: build.tsconfigPath\n          ? path.join(projectPath, build.tsconfigPath)\n          : undefined,\n      }),\n    );\n\n    await handleBuildCommand(buildConfig);\n  } catch (error) {\n    throw new Exception(`Error in config file \"${fullConfigPath}\"`, {\n      cause: error as Error,\n    });\n  }\n}\n\nexport async function buildModels() {\n  console.info('Building Core Object dependencies...');\n\n  const projectConfigPath = path.join(path.resolve(), 'applab.config.json');\n  const projectConfigContents = await fs.readFile(projectConfigPath);\n  const projectConfig = await JSON.parse(projectConfigContents.toString());\n\n  if (!projectConfig) {\n    throw new Exception('Missing config file \"applab.config.json\"');\n  }\n\n  console.info('Adding out of box Core Objects...');\n  await copyStubModels();\n\n  console.info('Building AppLab models...');\n  await buildAppLabModels(projectConfig.dependencies.models.path);\n  await buildProject(projectConfig.dependencies.models.path);\n\n  console.info('Creating model type definitions...');\n  await buildModelTypes(projectConfig.dependencies.types.path);\n  await buildProject(projectConfig.dependencies.types.path);\n\n  console.info('Creating Sequelize models...');\n  await buildSequelizeModels(\n    projectConfig.dependencies['sequelize-models'].path,\n  );\n  await buildProject(projectConfig.dependencies['sequelize-models'].path);\n\n  console.info('Building HTTP client...');\n  await buildHttpClient({\n    httpClientProjectName: projectConfig.dependencies['http-client'].repo,\n    modelsPath: projectConfig.dependencies.models.path,\n    path: projectConfig.dependencies['http-client'].path,\n    typesProjectName: projectConfig.dependencies.types.repo,\n  });\n  await buildProject(projectConfig.dependencies['http-client'].path);\n\n  console.info('Building Redux state...');\n  await buildReduxSlices({\n    httpClientProjectName: projectConfig.dependencies['http-client'].repo,\n    projectPath: projectConfig.dependencies['redux-state'].path,\n    typesProjectName: projectConfig.dependencies.types.repo,\n  });\n  await buildProject(projectConfig.dependencies['redux-state'].path);\n}\n", "const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\toverline: [53, 55],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29],\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\n\t\t\t// Bright color\n\t\t\tblackBright: [90, 39],\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39],\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49],\n\t\t},\n\t};\n\n\t// Alias bright black as gray (and grey)\n\tstyles.color.gray = styles.color.blackBright;\n\tstyles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n\tstyles.color.grey = styles.color.blackBright;\n\tstyles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue: (red, green, blue) => {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue: hex => {\n\t\t\t\tconst matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet {colorString} = matches.groups;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue: code => {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n", "/* eslint-env browser */\n\nconst isBlinkBasedBrowser = /\\b(Chrome|Chromium)\\//.test(navigator.userAgent);\n\nconst colorSupport = isBlinkBasedBrowser ? {\n\tlevel: 1,\n\thasBasic: true,\n\thas256: false,\n\thas16m: false,\n} : false;\n\nconst supportsColor = {\n\tstdout: colorSupport,\n\tstderr: colorSupport,\n};\n\nexport default supportsColor;\n", "// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.\nexport function stringReplaceAll(string, substring, replacer) {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n\nexport function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n", "import ansiStyles from '#ansi-styles';\nimport supportsColor from '#supports-color';\nimport { // eslint-disable-line import/order\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex,\n} from './utilities.js';\n\nconst {stdout: stdoutColor, stderr: stderrColor} = supportsColor;\n\nconst GENERATOR = Symbol('GENERATOR');\nconst STYLER = Symbol('STYLER');\nconst IS_EMPTY = Symbol('IS_EMPTY');\n\n// `supportsColor.level` \u2192 `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m',\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nexport class Chalk {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = (...strings) => strings.join(' ');\n\tapplyOptions(chalk, options);\n\n\tObject.setPrototypeOf(chalk, createChalk.prototype);\n\n\treturn chalk;\n};\n\nfunction createChalk(options) {\n\treturn chalkFactory(options);\n}\n\nObject.setPrototypeOf(createChalk.prototype, Function.prototype);\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t},\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this[STYLER], true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t},\n};\n\nconst getModelAnsi = (model, level, type, ...arguments_) => {\n\tif (model === 'rgb') {\n\t\tif (level === 'ansi16m') {\n\t\t\treturn ansiStyles[type].ansi16m(...arguments_);\n\t\t}\n\n\t\tif (level === 'ansi256') {\n\t\t\treturn ansiStyles[type].ansi256(ansiStyles.rgbToAnsi256(...arguments_));\n\t\t}\n\n\t\treturn ansiStyles[type].ansi(ansiStyles.rgbToAnsi(...arguments_));\n\t}\n\n\tif (model === 'hex') {\n\t\treturn getModelAnsi('rgb', level, type, ...ansiStyles.hexToRgb(...arguments_));\n\t}\n\n\treturn ansiStyles[type][model](...arguments_);\n};\n\nconst usedModels = ['rgb', 'hex', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansiStyles.color.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansiStyles.bgColor.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this[GENERATOR].level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis[GENERATOR].level = level;\n\t\t},\n\t},\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent,\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\t// Single argument is hot path, implicit coercion is faster than anything\n\t// eslint-disable-next-line no-implicit-coercion\n\tconst builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder[GENERATOR] = self;\n\tbuilder[STYLER] = _styler;\n\tbuilder[IS_EMPTY] = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self[IS_EMPTY] ? '' : string;\n\t}\n\n\tlet styler = self[STYLER];\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.includes('\\u001B')) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nObject.defineProperties(createChalk.prototype, styles);\n\nconst chalk = createChalk();\nexport const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});\n\nexport {\n\tstdoutColor as supportsColor,\n\tstderrColor as supportsColorStderr,\n};\n\nexport default chalk;\n", "// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n", "/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n,\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n,\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n,\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s,\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l,\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l,\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n", "/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors.js\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nexport function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  const isNeg = input < 0;\n  let padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\n\nexport function parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nexport function parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\n\nexport function parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n  return +d;\n}\n\nexport function weeksInWeekYear(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = { timeZoneName: offsetFormat, ...intlOpts };\n\n  const parsed = new Intl.DateTimeFormat(locale, modified)\n    .formatToParts(date)\n    .find((m) => m.type.toLowerCase() === \"timezonename\");\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject(obj, normalizer) {\n  const normalized = {};\n  for (const u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\nexport function formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n\nexport const ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z0-9_+-]{1,256}(\\/[A-Za-z0-9_+-]{1,256})?)?/;\n", "import * as Formats from \"./formats.js\";\nimport { pick } from \"./util.js\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...monthsNarrow];\n    case \"short\":\n      return [...monthsShort];\n    case \"long\":\n      return [...monthsLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...weekdaysNarrow];\n    case \"short\":\n      return [...weekdaysShort];\n    case \"long\":\n      return [...weekdaysLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...erasNarrow];\n    case \"short\":\n      return [...erasShort];\n    case \"long\":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n  };\n\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n      ? units[unit][0]\n      : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hourCycle\",\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n", "import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n", "export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n", "import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n", "import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n", "import { formatOffset, parseZoneInfo, isUndefined, ianaRegex, objToLocalTS } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nconst matchingRegex = RegExp(`^${ianaRegex.source}$`);\n\nlet dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5,\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport default class IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated This method returns false some valid IANA names. Use isValidZone instead\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /** @override **/\n  get type() {\n    return \"iana\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name),\n      [year, month, day, hour, minute, second] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date);\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    const adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0,\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /** @override **/\n  get isValid() {\n    return this.valid;\n  }\n}\n", "import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n", "import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n", "/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n", "import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n", "import { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n\n    let z;\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    const intlOpts = { ...this.opts };\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    return this.dtf.formatToParts(this.dt.toJSDate());\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n", "import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  ianaRegex,\n  isUndefined,\n  parseFloating,\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return (m) =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [{ ...mergedVals, ...val }, mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n  extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1),\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3]),\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration =\n  /^-?P(?:(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)Y)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)M)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)W)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)D)?(?:T(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)H)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =\n    match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n  const negativeSeconds = secondStr && secondStr[0] === \"-\";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseFloating(yearStr)),\n      months: maybeNegate(parseFloating(monthStr)),\n      weeks: maybeNegate(parseFloating(weekStr)),\n      days: maybeNegate(parseFloating(dayStr)),\n      hours: maybeNegate(parseFloating(hourStr)),\n      minutes: maybeNegate(parseFloating(minuteStr)),\n      seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),\n    },\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60,\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 =\n  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr,\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 =\n    /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOOrdinalDateAndTime = combineExtractors(\n  extractISOOrdinalData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n\n/**\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nexport function parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n", "import { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Locale from \"./impl/locale.js\";\nimport { parseISODuration, parseISOTimeOnly } from \"./impl/regexParser.js\";\nimport {\n  asNumber,\n  hasOwnProperty,\n  isInteger,\n  isNumber,\n  isUndefined,\n  normalizeObject,\n  roundTo,\n} from \"./impl/util.js\";\nimport Settings from \"./settings.js\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nexport const lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000,\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000,\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 },\n  },\n  casualMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000,\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000,\n    },\n\n    ...lowOrderMatrix,\n  },\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: (daysInYearAccurate * 24) / 4,\n      minutes: (daysInYearAccurate * 24 * 60) / 4,\n      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,\n    },\n    ...lowOrderMatrix,\n  };\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\",\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  const conv = matrix[toUnit][fromUnit],\n    raw = fromMap[fromUnit] / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration#fromMillis}, {@link Duration#fromObject}, or {@link Duration#fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject({ milliseconds: count }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj, opts = {}) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */\n  static fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`\n      );\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\",\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = {\n      ...opts,\n      floor: opts.round !== false && opts.floor !== false,\n    };\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included\n   * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant. See {@link Intl.NumberFormat}.\n   * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */\n  toHuman(opts = {}) {\n    const l = orderedUnits\n      .map((unit) => {\n        const val = this.values[unit];\n        if (isUndefined(val)) {\n          return null;\n        }\n        return this.loc\n          .numberFormatter({ style: \"unit\", unitDisplay: \"long\", ...opts, unit: unit.slice(0, -1) })\n          .format(val);\n      })\n      .filter((n) => n);\n\n    return this.loc\n      .listFormatter({ type: \"conjunction\", style: opts.listStyle || \"narrow\", ...opts })\n      .format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject() {\n    if (!this.isValid) return {};\n    return { ...this.values };\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = {\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\",\n      ...opts,\n    };\n\n    const value = this.shiftTo(\"hours\", \"minutes\", \"seconds\", \"milliseconds\");\n\n    let fmt = opts.format === \"basic\" ? \"hhmm\" : \"hh:mm\";\n\n    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {\n      fmt += opts.format === \"basic\" ? \"ss\" : \":ss\";\n      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {\n        fmt += \".SSS\";\n      }\n    }\n\n    let str = value.toFormat(fmt);\n\n    if (opts.includePrefix) {\n      str = \"T\" + str;\n    }\n\n    return str;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    return this.as(\"milliseconds\");\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map((u) => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    return clone(this, { values: built }, true).normalize();\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n", "import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval#fromDateTimes}, {@link Interval#after}, {@link Interval#before}, or {@link Interval#fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' \u2013 '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" \u2013 \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n", "import DateTime from \"./datetime.js\";\nimport Settings from \"./settings.js\";\nimport Locale from \"./impl/locale.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nimport { hasRelative } from \"./impl/util.js\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.now().setZone(zone).set({ month: 12 });\n\n    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '\u0661'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabi\u02BB I'\n   * @return {Array}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> '\u0627\u0644\u0627\u062B\u0646\u064A\u0646'\n   * @return {Array}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */\n  static weekdaysFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ '\u1014\u1036\u1014\u1000\u103A', '\u100A\u1014\u1031' ]\n   * @return {Array}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant J\u00E9sus-Christ', 'apr\u00E8s J\u00E9sus-Christ' ]\n   * @return {Array}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * @example Info.features() //=> { relative: false }\n   * @return {Object}\n   */\n  static features() {\n    return { relative: hasRelative() };\n  }\n}\n", "import Duration from \"../duration.js\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf(\"day\").valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"quarters\", (a, b) => b.quarter - a.quarter],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      },\n    ],\n    [\"days\", dayDiff],\n  ];\n\n  const results = {};\n  let lowestOrder, highWater;\n\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      let delta = differ(cursor, later);\n      highWater = cursor.plus({ [unit]: delta });\n\n      if (highWater > later) {\n        cursor = cursor.plus({ [unit]: delta - 1 });\n        delta -= 1;\n      } else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function (earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    (u) => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(results, opts);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n", "const numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\",\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n};\n\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\nexport function digitRegex({ numberingSystem }, append = \"\") {\n  return new RegExp(`${numberingSystems[numberingSystem || \"latn\"]}${append}`);\n}\n", "import { parseMillis, isUndefined, untruncateYear, signedOffset, hasOwnProperty } from \"./util.js\";\nimport Formatter from \"./formatter.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport DateTime from \"../datetime.js\";\nimport { digitRegex, parseDigits } from \"./digits.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = (i) => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `( |${NBSP})`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, \"\") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = (t) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\", false), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\", false), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true, false), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true, false), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false, false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false, false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false, false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false, false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true, false), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true, false), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP,\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\",\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\",\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\",\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\",\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\",\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\",\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\",\n  },\n};\n\nfunction tokenForPart(part, locale, formatOpts) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    return {\n      literal: true,\n      val: value,\n    };\n  }\n\n  const style = formatOpts[type];\n\n  let val = partTypeStyleToTokenVal[type];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = (token) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n\n  let zone = null;\n  let specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone, specificOffset];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n\n  if (!formatOpts) {\n    return token;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const parts = formatter.formatDateTimeParts(getDummyDateTime());\n\n  const tokens = parts.map((p) => tokenForPart(p, locale, formatOpts));\n\n  if (tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nfunction expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nexport function explainFromTokens(locale, input, format) {\n  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\n    units = tokens.map((t) => unitForToken(t, locale)),\n    disqualifyingUnit = units.find((t) => t.invalidReason);\n\n  if (disqualifyingUnit) {\n    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n  } else {\n    const [regexString, handlers] = buildRegex(units),\n      regex = RegExp(regexString, \"i\"),\n      [rawMatches, matches] = match(input, regex, handlers),\n      [result, zone, specificOffset] = matches\n        ? dateTimeFromMatches(matches)\n        : [null, null, undefined];\n    if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n      throw new ConflictingSpecificationError(\n        \"Can't include meridiem when specifying 24-hour format\"\n      );\n    }\n    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };\n  }\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, specificOffset, invalidReason];\n}\n", "import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger,\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex((i) => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };\n}\n\nexport function weekToGregorian(weekData) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(weekData) };\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData;\n  const ordinal = computeOrdinal(year, month, day);\n  return { year, ordinal, ...timeObject(gregData) };\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData;\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(ordinalData) };\n}\n\nexport function hasInvalidWeekData(obj) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n", "import Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Settings from \"./settings.js\";\nimport Info from \"./info.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS,\n  padStart,\n} from \"./impl/util.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport diff from \"./impl/diff.js\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser.js\";\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser.js\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n} from \"./impl/conversions.js\";\nimport * as Formats from \"./impl/formats.js\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError,\n} from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid DateTime\";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid,\n  };\n  return new DateTime({ ...current, ...alts, old: current });\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds(),\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = {\n      ...inst.c,\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7,\n    },\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds,\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, {\n        ...opts,\n        zone: interpretationZone,\n        specificOffset,\n      });\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ,\n        forceSimple: true,\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nfunction toISODate(o, extended) {\n  const longFormat = o.c.year > 9999 || o.c.year < 0;\n  let c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\n\nfunction toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset) {\n  let c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n\n  if (o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\",\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\",\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  const zone = normalizeZone(opts.zone, Settings.defaultZone),\n    loc = Locale.fromObject(opts),\n    tsNow = Settings.now();\n\n  let ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (const u of orderedUnits) {\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n\n    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    const offsetProvis = zone.offset(tsNow);\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n  } else {\n    ts = tsNow;\n  }\n\n  return new DateTime({ ts, zone, loc, o });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = (unit) => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\nfunction lastOpts(argList) {\n  let opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime#local}, {@link DateTime#utc}, and (most flexibly) {@link DateTime#fromObject}. To create one from a standard string format, use {@link DateTime#fromISO}, {@link DateTime#fromHTTP}, and {@link DateTime#fromRFC2822}. To create one from a custom string format, use {@link DateTime#fromFormat}. To create one from a native JS date, use {@link DateTime#fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        const ot = zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */\n  static utc() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options),\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj, opts = {}) {\n    obj = obj || {};\n    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset)\n        ? opts.specificOffset\n        : zoneToUse.offset(tsNow),\n      normalized = normalizeObject(obj, normalizeUnit),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(opts);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized)\n        : containsOrdinal\n        ? hasInvalidOrdinalData(normalized)\n        : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized)\n        : containsOrdinal\n        ? ordinalToGregorian(normalized)\n        : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc,\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      }),\n      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.isUniversal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOptions(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian({ ...gregorianToWeek(this.c), ...normalized });\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });\n    } else {\n      mixed = { ...this.toObject(), ...normalized };\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  toISO({\n    format = \"extended\",\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    const ext = format === \"extended\";\n\n    let c = toISODate(this, ext);\n    c += \"T\";\n    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  toISODate({ format = \"extended\" } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    format = \"extended\",\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    let c = includePrefix ? \"T\" : \"\";\n    return (\n      c +\n      toISOTime(this, format === \"extended\", suppressSeconds, suppressMilliseconds, includeOffset)\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {\n    let fmt = \"HH:mm:ss.SSS\";\n\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */\n  toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = { ...this.c };\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n\n    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 d\u00EDa\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), {\n      ...options,\n      numeric: \"always\",\n      units,\n      unit,\n    });\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"ma\u00F1ana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {\n      ...options,\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true,\n    });\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n", "import DateTime from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Info from \"./info.js\";\nimport Zone from \"./zone.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport InvalidZone from \"./zones/invalidZone.js\";\nimport SystemZone from \"./zones/systemZone.js\";\nimport Settings from \"./settings.js\";\n\nconst VERSION = \"2.3.1\";\n\nexport {\n  VERSION,\n  DateTime,\n  Duration,\n  Interval,\n  Info,\n  Zone,\n  FixedOffsetZone,\n  IANAZone,\n  InvalidZone,\n  SystemZone,\n  Settings,\n};\n", "// or you can use the require('chalk') syntax too\nimport { HttpRequestMethod } from '@srclaunch/types';\nimport { NextFunction, Request, Response } from 'express';\nimport { DateTime } from 'luxon';\nimport { Logger } from './logger';\n\nconst getActualRequestDurationInMilliseconds = (start: [number, number]) => {\n  const NS_PER_SEC = 1e9; //  convert to nanoseconds\n  const NS_TO_MS = 1e6; // convert to milliseconds\n  const diff = process.hrtime(start);\n\n  return (diff[0] * NS_PER_SEC + diff[1]) / NS_TO_MS;\n};\n\nexport function loggerExpressMiddlware(\n  logger: Logger,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  if (logger) {\n    const start = process.hrtime();\n    const now = DateTime.now();\n    const requestId = req.headers['X-Request-Id']?.toString();\n\n    logger.http({\n      request: {\n        details: {\n          date: now.toISO(),\n          id: requestId,\n          size: Number.parseInt(\n            req.headers['content-length']?.toString() ?? '0',\n          ),\n        },\n        host: req.hostname,\n        method: req.method as HttpRequestMethod,\n        resource: req.url,\n      },\n      response: {\n        details: {\n          date: now.toISO(),\n          duration: getActualRequestDurationInMilliseconds(start),\n          request: {\n            id: requestId,\n          },\n        },\n        status: {\n          code: res.statusCode,\n        },\n      },\n    });\n  }\n\n  next();\n}\n", "import { Image } from '../..';\n\nexport type Activity = {\n  readonly who?: {\n    readonly image?: Image;\n    readonly name?: string;\n    readonly to?: string;\n  };\n  readonly what?: {\n    readonly image?: Image;\n    readonly label?: string;\n    readonly name?: Activities;\n    readonly to?: string;\n  };\n  readonly when?: string;\n  readonly where?: string;\n  readonly why?: string;\n  readonly how?: string;\n};\n\nexport enum Activities {\n  Comment = 'comment',\n  Create = 'create',\n  Delete = 'delete',\n  Edit = 'edit',\n  Invoice = 'invoice',\n  Message = 'message',\n  PageView = 'pageView',\n  Paid = 'paid',\n  Payment = 'payment',\n  Purchase = 'purchase',\n  Referral = 'referral',\n  Renewal = 'renewal',\n  Signup = 'signup',\n  Subscription = 'subscription',\n  Upgrade = 'upgrade',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum Analytics {\n  Business = 'business',\n  Engineering = 'engineering',\n  Exception = 'exception',\n  LogMessage = 'log-message',\n  Marketing = 'marketing',\n  PageLeave = 'page-leave',\n  PageView = 'page-view',\n  Product = 'product',\n  QualityManagement = 'quality-management',\n  UserAccess = 'user-access',\n  UserLogin = 'user-login',\n  UserLogout = 'user-logout',\n  UserSignup = 'user-signup',\n  UserPreferencesChanged = 'user-preferences-changed',\n  WebsiteVisit = 'website-visit',\n}\n\nexport type AnalyticsEvent<T = {}> = {\n  created: DateTime;\n  data?: Record<string, unknown>;\n  id?: string;\n  message?: string;\n  name: Analytics;\n} & T;\n", "import { UserAccessDevice } from '../../user/access';\nimport { Analytics, AnalyticsEvent } from '..';\n\nexport enum PageLeaveMethod {\n  CloseTab = 'close-tab',\n  ExternalLink = 'external-link',\n  NavigateAway = 'navigate-away',\n  Unknown = 'unknown',\n}\n\nexport type PageViewEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    referrer_url?: string;\n  };\n  description: 'Occurs when a person views a page in a Website or application.';\n  id: string;\n  name: Analytics.PageView;\n}>;\n\nexport type PageLeaveEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    leave_method: PageLeaveMethod;\n  };\n  description: 'Occurs when a person leaves a page.';\n  id: string;\n  name: Analytics.PageLeave;\n}>;\n\nexport type WebsiteVisitEvent = AnalyticsEvent<{\n  device: UserAccessDevice;\n  description: 'Occurs when a person a website.';\n  id: string;\n  name: Analytics.WebsiteVisit;\n}>;\n", "import { DateTime } from 'luxon';\n\nimport { Project } from '../../project';\nimport { Application } from '..';\nimport { Environment } from '../environment';\nimport { PipelineWorkflow } from '../pipeline/workflow';\n\nexport enum DeploymentTarget {\n  Ecs = 'Ecs',\n}\n\nexport enum DeploymentStatus {\n  Finished = 'Finished',\n  Queued = 'Queued',\n  Running = 'Running',\n  Started = 'Started',\n}\n\nexport type Deployment = {\n  id: string;\n  status: DeploymentStatus;\n  target: DeploymentTarget;\n  ApplicationId: Application['id'];\n  EnvironmentId: Environment['id'];\n  CreatedDate: DateTime;\n  PipelineWorkflowId: PipelineWorkflow['id'];\n  ProjectId: Project['id'];\n};\n", "export enum DeviceType {\n  Mobile = 'mobile',\n  TV = 'tv',\n  Watch = 'watch',\n  Web = 'web',\n}\n", "export enum EnvironmentType {\n  Development = 'Development',\n  NonProduction = 'NonProduction',\n  Production = 'Production',\n}\n\nexport type Environment = {\n  id: string;\n  type: EnvironmentType;\n  name: string;\n  description: string;\n  public: boolean;\n};\n", "export enum OnboardingStatus {\n  Completed = 'completed',\n  Started = 'started',\n  Uncompleted = 'uncompleted',\n}\n\nexport type OnboardingStep = {\n  description: string;\n  id: string;\n  guide_id: OnboardingGuide;\n  name: string;\n};\n\nexport type OnboardingGuide = {\n  id: string;\n  name: string;\n  description: string;\n  steps: OnboardingStep['id'][];\n};\n", "import { Project } from '../../project';\n\nexport enum PipelineType {\n  Build = 'Build',\n  Deployment = 'Deployment',\n  Test = 'Test',\n}\n\nexport type Pipeline = {\n  id: string;\n  name: string;\n  type: PipelineType;\n  ProjectId: Project['id'];\n};\n", "import { Project } from '../../project';\nimport { Application } from '../index';\nimport { Pipeline } from './index';\n\nexport enum PipelineWorkflowStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport enum PipelineStepStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport type PipelineStepOutputLine = {\n  id: string;\n  text: string;\n  PipelineStepOutputId: PipelineStepOutput['id'];\n};\n\nexport type PipelineStepOutput = {\n  id: string;\n  PipeWorkflowStepId: PipelineWorkflowStep['id'];\n};\n\nexport type PipelineWorkflowStep = {\n  enabled: boolean;\n  id: string;\n  status: PipelineStepStatus;\n  PipeWorkflowId: PipelineWorkflow['id'];\n};\n\nexport type PipelineWorkflow = {\n  description: string;\n  enabled: boolean;\n  id: string;\n  name: string;\n  ActivePipelineId: Pipeline['id'];\n  ApplicationId: Application['id'];\n  ProjectId: Project['id'];\n};\n", "import React from 'react';\n\nexport enum PageRole {\n  ForgotPassword = 'forgot_password',\n  Index = 'index',\n  Login = 'login',\n  PageNotFound = '404',\n  Signup = 'signup',\n  VerifyCode = 'verify_code',\n}\n\nexport type PageRoute = {\n  loginRequired?: boolean;\n  path?: string;\n  component: React.ElementType;\n  role?: PageRole;\n};\n", "export enum AlertLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n", "import { ComponentType } from 'react';\n\nexport enum ModalType {\n  Details = 'details',\n  Dialog = 'dialog',\n}\n\nexport type Modal = {\n  component?: ComponentType<any>;\n  id: string;\n  icon?: string;\n  title?: string;\n  type: ModalType;\n  closeable?: boolean;\n};\n", "export enum NotificationType {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport type Notification<T = {}> = {\n  color?: string;\n  id: number;\n  icon?: string;\n  message: string;\n  timed: boolean;\n  type?: NotificationType;\n  seconds: number;\n} & T;\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { Person } from '../../../people/person';\n\nexport enum DataPointMetric {\n  AccountBalance = 'AccountBalance',\n  UserAssets = 'UserAssets',\n  UserCreditCardDebt = 'UserCreditCardDebt',\n  UserCreditLimit = 'UserCreditLimit',\n  UserCreditUtilization = 'UserCreditUtilization',\n  UserDebt = 'UserDebt',\n  UserInvestments = 'UserInvestments',\n  UserRetirement = 'UserRetirement',\n  UserSavings = 'UserSavings',\n}\n\nexport type DataPoint = {\n  id: string;\n  date: Date;\n  currency_code?: CurrencyCode;\n  metric: DataPointMetric;\n  value: number;\n  person_id: Person['id'];\n};\n", "export enum DefaultValue {\n  DateTime = 'date_time',\n  True = 'true',\n  False = 'false',\n  UniqueId = 'unique_id',\n}\n", "import { DateTime } from 'luxon';\n\nimport { ModelField } from './field';\nimport { Relationship } from './relationship';\n\nexport enum ModelType {\n  DomainModel = 'domain_entity',\n  GenericModel = 'generic_entity',\n}\n\nexport type ModelProps<T = {}> = {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n} & T;\n\nexport class Model implements ModelProps {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n\n  constructor(props: ModelProps) {\n    const { created, description, fields, name, id, relationships, updated } =\n      props;\n\n    this.created = created;\n    this.description = description;\n    this.fields = fields;\n    this.id = id;\n    this.name = name;\n    this.relationships = relationships;\n    this.updated = updated;\n  }\n}\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { CountryCode } from '../../../i18n/locale/country';\nimport { ISO8601String } from '../../../i18n/date';\nimport { LanguageCode } from '../../../i18n/language';\nimport { TimezoneRegions } from '../../../i18n/time/region';\n\nexport type MenuItem = {\n  label: string;\n  value: string | number | boolean;\n};\n\nexport type AirportCode = string;\nexport type BankIDCode = string;\nexport type BitcoinAddress = string;\nexport type Boolean = boolean;\nexport type City = string;\nexport type Color = string;\nexport type CreditCard = string;\nexport type CurrencyAmount = number;\nexport type DataURI = string;\nexport type Date = ISO8601String;\nexport type DateRange = ISO8601String[];\nexport type DateTime = ISO8601String;\nexport type DayOfMonth = string;\nexport type DomainName = string;\nexport type EmailAddress = string;\nexport type EthereumAddress = string;\nexport type EAN = string;\nexport type EIN = string;\nexport type Float = number;\nexport type GeographicCoordinate = number;\nexport type GeographicCoordinates = number[];\nexport type GitRepositoryURL = string;\nexport type HSLColor = string;\nexport type HexColor = string;\nexport type Hexadecimal = string;\nexport type IBAN = string;\nexport type IMEI = number;\nexport type IPAddress = string;\nexport type IPAddressRange = string[];\nexport type ISBN = string;\nexport type ISIN = string;\nexport type ISMN = string;\nexport type ISSN = string;\nexport type ISO8601 = string;\nexport type ISO31661Alpha2 = string;\nexport type ISO31661Alpha3 = string;\nexport type ISO4217 = CurrencyCode;\nexport type Image = {\n  description?: string;\n  format?: string;\n  path?: string;\n  url?: string;\n};\nexport type Integer = number;\nexport type JSONObject = Record<string, unknown>;\nexport type LicensePlateNumber = string;\nexport type LongText = string;\nexport type MD5 = string;\nexport type MACAddress = string;\nexport type MagnetURI = string;\nexport type Markdown = string;\nexport type Menu = {\n  defaultValue?: MenuItem['value'];\n  items: MenuItem[];\n};\nexport type MimeType = string;\nexport type Month = string;\nexport type Number = number;\nexport type Password = string;\nexport type PassportNumber = string;\nexport type Percent = number;\nexport type PhoneNumber = string;\nexport type Port = number;\nexport type PostalCode = string;\nexport type Province = string;\nexport type RFC3339 = string;\nexport type RGBColor = string;\nexport type SemanticVersion = string;\nexport type SSN = number;\nexport type State = string;\nexport type StreetAddress = string;\nexport type String = string;\nexport type Tags = MenuItem[];\nexport type TaxIDNumber = string;\nexport type Time = string;\nexport type TimeRange = string[];\nexport type TimeOfDay = string;\nexport type Timezone = TimezoneRegions;\nexport type URL = string;\nexport type URLPath = string;\nexport type UUID = string;\nexport type VATIDNumber = string;\nexport type VerificationCode = string;\nexport type Video = {\n  description?: string;\n  format?: string;\n  url?: string;\n  path?: string;\n};\nexport type Weekday = string;\nexport type Year = number;\n\nexport type Primitive =\n  | AirportCode\n  | BankIDCode\n  | BitcoinAddress\n  | boolean\n  | City\n  | Color\n  | CountryCode\n  | CreditCard\n  | CurrencyAmount\n  | CurrencyCode\n  | DataURI\n  | Date\n  | DateRange\n  | DateTime\n  | DayOfMonth\n  | DomainName\n  | EmailAddress\n  | EthereumAddress\n  | EAN\n  | EIN\n  | Float\n  | GeographicCoordinate\n  | GeographicCoordinates\n  | GitRepositoryURL\n  | HSLColor\n  | HexColor\n  | Hexadecimal\n  | IBAN\n  | IMEI\n  | IPAddress\n  | IPAddressRange\n  | ISBN\n  | ISIN\n  | ISMN\n  | ISSN\n  | ISO8601\n  | ISO31661Alpha2\n  | ISO31661Alpha3\n  | ISO4217\n  | Image\n  | Integer\n  | JSONObject\n  | LanguageCode\n  | LicensePlateNumber\n  | LongText\n  | MD5\n  | Markdown\n  | Menu\n  | number\n  | MACAddress\n  | MagnetURI\n  | MimeType\n  | Month\n  | Password\n  | PassportNumber\n  | Percent\n  | PhoneNumber\n  | Port\n  | PostalCode\n  | Province\n  | RFC3339\n  | RGBColor\n  | SemanticVersion\n  | SSN\n  | State\n  | StreetAddress\n  | string\n  | Tags\n  | TaxIDNumber\n  | Time\n  | TimeRange\n  | TimeOfDay\n  | Timezone\n  | URL\n  | URLPath\n  | UUID\n  | VATIDNumber\n  | Video\n  | VerificationCode\n  | Weekday\n  | Year;\n\n// export enum Primitives {\n//   AirportCode = AirportCode,\n//   BankIDCode = BankIDCode,\n//   BitcoinAddress = BitcoinAddress,\n//   Boolean = Boolean,\n//   City = City,\n//   Color = Color,\n//   CountryCode = CountryCode,\n//   CreditCard = CreditCard,\n//   CurrencyAmount = CurrencyAmount,\n//   CurrencyCode =CurrencyCode,\n//   DataURI = 'data-uri',\n//   Date = 'date',\n//   DateRange = 'date-range',\n//   DateTime = 'date-time',\n//   DayOfMonth = 'day-of-month',\n//   DomainName = 'domain-name',\n//   EmailAddress = 'email-address',\n//   EthereumAddress = 'ethereum-address',\n//   EAN = 'european-article-number',\n//   EIN = 'employer-identification-number',\n//   Float = 'float',\n//   GeographicCoordinate = 'geographic-coordinate',\n//   GeographicCoordinates = 'geographic-coordinates',\n//   GitRepositoryURL = 'git-repository-url',\n//   HSLColor = 'hsl-color',\n//   HexColor = 'hex-color',\n//   Hexadecimal = 'hexadecimal',\n//   IBAN = 'international-bank-account-number',\n//   IMEI = 'international-mobile-equipment-identifier',\n//   IPAddress = 'ip-address',\n//   IPAddressRange = 'ip-address-range',\n//   ISBN = 'international-standard-book-number',\n//   ISIN = 'international-stock-number',\n//   ISMN = 'international-standard-music-number',\n//   ISSN = 'international-standard-serial-number',\n//   ISO8601 = 'iso-8601',\n//   ISO31661Alpha2 = 'iso-31661-alpha-2',\n//   ISO31661Alpha3 = 'iso-31661-alpha-3',\n//   ISO4217 = 'iso-4217',\n//   Image = 'image',\n//   Integer = 'integer',\n//   JSON = 'json',\n//   LanguageCode = 'language-code',\n//   LicensePlateNumber = 'license-plate-number',\n//   LongText = 'long-text',\n//   MD5 = 'md5',\n//   Markdown = 'markdown',\n//   Menu = 'menu',\n//   Number = 'number',\n//   MACAddress = 'mac-address',\n//   MagnetURI = 'magnet-uri',\n//   MimeType = 'mime-type',\n//   Month = 'month',\n//   Password = 'password',\n//   PassportNumber = 'passport-number',\n//   Percent = 'percent',\n//   PhoneNumber = 'phone-number',\n//   Port = 'port',\n//   PostalCode = 'postal-code',\n//   Province = 'province',\n//   RFC3339 = 'rfc-3339',\n//   RGBColor = 'rgb-color',\n//   SemanticVersion = 'semantic-version',\n//   SSN = 'social-security-number',\n//   State = 'state',\n//   StreetAddress = 'street-address',\n//   String = 'string',\n//   Tags = 'tags',\n//   TaxIDNumber = 'tax-id-number',\n//   Time = 'time',\n//   TimeOfDay = 'time-of-day',\n//   TimeRange = 'time-range',\n//   TimezoneRegion = 'timezone-region',\n//   URL = 'url',\n//   URLPath = 'url-path',\n//   UUID = 'uuid',\n//   VATIDNumber = 'value-added-tax-id-number',\n//   VerificationCode = 'verification-code',\n//   Video = 'video',\n//   Weekday = 'weekday',\n//   Year = 'year',\n// }\n\nexport enum Primitives {\n  AirportCode = 'airport-code',\n  BankIDCode = 'bank-id-code',\n  BitcoinAddress = 'bitcoin-address',\n  Boolean = 'boolean',\n  City = 'city',\n  Color = 'color',\n  CountryCode = 'country-code',\n  CreditCard = 'credit-card',\n  CurrencyAmount = 'currency-amount',\n  CurrencyCode = 'currency-code',\n  DataURI = 'data-uri',\n  Date = 'date',\n  DateRange = 'date-range',\n  DateTime = 'date-time',\n  DayOfMonth = 'day-of-month',\n  DomainName = 'domain-name',\n  EmailAddress = 'email-address',\n  EthereumAddress = 'ethereum-address',\n  EAN = 'european-article-number',\n  EIN = 'employer-identification-number',\n  Float = 'float',\n  GeographicCoordinate = 'geographic-coordinate',\n  GeographicCoordinates = 'geographic-coordinates',\n  GitRepositoryURL = 'git-repository-url',\n  HSLColor = 'hsl-color',\n  HexColor = 'hex-color',\n  Hexadecimal = 'hexadecimal',\n  IBAN = 'international-bank-account-number',\n  IMEI = 'international-mobile-equipment-identifier',\n  IPAddress = 'ip-address',\n  IPAddressRange = 'ip-address-range',\n  ISBN = 'international-standard-book-number',\n  ISIN = 'international-stock-number',\n  ISMN = 'international-standard-music-number',\n  ISSN = 'international-standard-serial-number',\n  ISO8601 = 'iso-8601',\n  ISO31661Alpha2 = 'iso-31661-alpha-2',\n  ISO31661Alpha3 = 'iso-31661-alpha-3',\n  ISO4217 = 'iso-4217',\n  Image = 'image',\n  Integer = 'integer',\n  JSON = 'json',\n  LanguageCode = 'language-code',\n  LicensePlateNumber = 'license-plate-number',\n  LongText = 'long-text',\n  MD5 = 'md5',\n  Markdown = 'markdown',\n  Menu = 'menu',\n  Number = 'number',\n  MACAddress = 'mac-address',\n  MagnetURI = 'magnet-uri',\n  MimeType = 'mime-type',\n  Month = 'month',\n  Password = 'password',\n  PassportNumber = 'passport-number',\n  Percent = 'percent',\n  PhoneNumber = 'phone-number',\n  Port = 'port',\n  PostalCode = 'postal-code',\n  Province = 'province',\n  RFC3339 = 'rfc-3339',\n  RGBColor = 'rgb-color',\n  SemanticVersion = 'semantic-version',\n  SSN = 'social-security-number',\n  State = 'state',\n  StreetAddress = 'street-address',\n  String = 'string',\n  Tags = 'tags',\n  TaxIDNumber = 'tax-id-number',\n  Time = 'time',\n  TimeOfDay = 'time-of-day',\n  TimeRange = 'time-range',\n  TimezoneRegion = 'timezone-region',\n  URL = 'url',\n  URLPath = 'url-path',\n  UUID = 'uuid',\n  VATIDNumber = 'value-added-tax-id-number',\n  VerificationCode = 'verification-code',\n  Video = 'video',\n  Weekday = 'weekday',\n  Year = 'year',\n}\n", "export enum Severity {\n  Critical = 'Critical',\n  Error = 'Error',\n  Fatal = 'Fatal',\n  Warning = 'Warning',\n}\n", "export enum Condition {\n  Contains = 'contains',\n  HasCharacterCount = 'has-character-count',\n  HasNumberCount = 'has-number-count',\n  HasLetterCount = 'has-letter-count',\n  HasLowercaseCount = 'has-lowercase-count',\n  HasSpacesCount = 'has-spaces-count',\n  HasSymbolCount = 'has-symbol-count',\n  HasUppercaseCount = 'has-uppercase-count',\n  IsAfter = 'is-after',\n  IsAfterOrEqual = 'is-after-or-equal',\n  IsAirport = 'is-airport',\n  IsAlpha = 'is-alpha',\n  IsAlphanumeric = 'is-alphanumeric',\n  IsAlgorithmHash = 'is-algorithm-hash',\n  IsAscii = 'is-ascii',\n  IsBase64 = 'is-base-64',\n  IsBefore = 'is-before',\n  IsBeforeOrAfter = 'is-before-or-after',\n  IsBeforeOrEqual = 'is-before-or-equal',\n  IsBetween = 'is-between',\n  IsBIC = 'is-bic',\n  IsBitcoinAddress = 'is-bitcoin-address',\n  IsBoolean = 'is-boolean',\n  IsColor = 'is-color',\n  IsComplexEnough = 'is-complex-enough',\n  IsCountry = 'is-country',\n  IsCreditCard = 'is-credit-card',\n  IsCurrency = 'is-currency',\n  IsDataURI = 'is-data-uri',\n  IsDate = 'is-date',\n  IsDateRange = 'is-date-range',\n  IsDateTime = 'is-date-time',\n  IsDayOfMonth = 'is-day-of-month',\n  IsDecimal = 'is-decimal',\n  IsDivisibleBy = 'is-divisible-by',\n  IsDomainName = 'is-domain-name',\n  IsEmailAddress = 'is-email-address',\n  IsEthereumAddress = 'is-ethereum-address',\n  IsEAN = 'is-ean',\n  IsEIN = 'is-ein',\n  IsEqual = 'is-equal',\n  IsEvenNumber = 'is-even-number',\n  IsFloat = 'is-float',\n  IsIBAN = 'is-iban',\n  IsGreaterThan = 'greater-than',\n  IsGreaterThanOrEqual = 'greater-than-or-equal',\n  IsHSLColor = 'is-hsl-color',\n  IsHexColor = 'is-hex-color',\n  IsHexadecimal = 'is-hexadecimal',\n  IsIdentityCardCode = 'is-identity-card-code',\n  IsIMEI = 'is-imei',\n  IsInIPAddressRange = 'is-in-ip-address-range',\n  IsInList = 'is-in-list',\n  IsInTheLast = 'is-in-the-last',\n  IsInteger = 'is-integer',\n  IsIPAddress = 'is-ip-address',\n  IsIPAddressRange = 'is-ip-address-range',\n  IsISBN = 'is-isbn',\n  IsISIN = 'is-isin',\n  IsISMN = 'is-ismn',\n  IsISRC = 'is-isrc',\n  IsISSN = 'is-issn',\n  IsISO4217 = 'is-iso-4217',\n  IsISO8601 = 'is-iso-8601',\n  IsISO31661Alpha2 = 'is-iso-31661-alpha-2',\n  IsISO31661Alpha3 = 'is-iso-31661-alpha-3',\n  IsJSON = 'is-json',\n  IsLanguage = 'is-language',\n  IsLatitude = 'is-latitude',\n  IsLongitude = 'is-longitude',\n  IsLengthEqual = 'is-length-equal',\n  IsLengthGreaterThan = 'is-length-greater-than',\n  IsLengthGreaterThanOrEqual = 'is-length-great-than-or-equal',\n  IsLengthLessThan = 'is-length-less-than',\n  IsLengthLessThanOrEqual = 'is-length-less-than-or-equal',\n  IsLessThan = 'less-than',\n  IsLessThanOrEqual = 'less-than-or-equal',\n  IsLicensePlateNumber = 'is-license-plate-number',\n  IsLowercase = 'is-lowercase',\n  IsOctal = 'is-octal',\n  IsMACAddress = 'is-mac-address',\n  IsMD5 = 'is-md5',\n  IsMagnetURI = 'is-magnet-uri',\n  IsMarkdown = 'is-markdown',\n  IsMimeType = 'is-mime-type',\n  IsMonth = 'is-month',\n  IsNegativeNumber = 'is-negative-number',\n  IsNotDate = 'is-not-date',\n  IsNotEqual = 'is-not-equal',\n  IsNotInIPAddressRange = 'is-not-in-ip-address-range',\n  IsNotInList = 'is-not-in-list',\n  IsNotNull = 'is-not-null',\n  IsNotRegexMatch = 'is-not-regex-match',\n  IsNotToday = 'is-not-today',\n  IsNumber = 'is-number',\n  IsNumeric = 'is-numeric',\n  IsOddNumber = 'is-odd-number',\n  IsPassportNumber = 'is-passport-number',\n  IsPhoneNumber = 'is-phone-number',\n  IsPort = 'is-port',\n  IsPositiveNumber = 'is-positive-number',\n  IsPostalCode = 'is-postal-code',\n  IsProvince = 'is-province',\n  IsRGBColor = 'is-rgb-color',\n  IsRegexMatch = 'is-regex-match',\n  IsRequired = 'is-required',\n  IsSemanticVersion = 'is-semantic-version',\n  IsSlug = 'is-slug',\n  IsSSN = 'is-ssn',\n  IsState = 'is-state',\n  IsStreetAddress = 'is-street-address',\n  IsString = 'is-string',\n  IsStrongPassword = 'is-strong-password',\n  IsTags = 'is-tags',\n  IsTaxIDNumber = 'is-tax-id-number',\n  IsThisMonth = 'is-this-month',\n  IsThisQuarter = 'is-this-quarter',\n  IsThisWeek = 'is-this-week',\n  IsThisWeekend = 'is-this-weekend',\n  IsThisYear = 'is-this-year',\n  IsTime = 'is-time',\n  IsTimeOfDay = 'is-time-of-day',\n  IsTimeRange = 'is-time-range',\n  IsToday = 'is-today',\n  IsURL = 'is-url',\n  IsUUID = 'is-uuid',\n  IsUppercase = 'is-uppercase',\n  IsUsernameAvailable = 'is-username-available',\n  IsValidStreetAddress = 'is-valid-street-address',\n  IsVATIDNumber = 'is-vat-id-number',\n  IsWeekday = 'is-weekday',\n  IsWeekend = 'is-weekend',\n  IsYear = 'is-year',\n}\n\nexport enum AuthenticationCondition {\n  IsAuthenticated = 'is-authenticated',\n  IsNotAuthenticated = 'is-not-authenticated',\n  IsUsernameAvailable = 'is-username-available',\n  PasswordMismatch = 'password-mismatch',\n}\n\nexport type RuleCondition = {\n  condition: Condition | AuthenticationCondition;\n  description: string;\n  name: string;\n  subject: string;\n  value: any;\n};\n", "import { Condition } from '../../index';\n\nexport enum ColorCondition {\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsNotNull = Condition.IsNotNull,\n  IsRGBColor = Condition.IsRGBColor,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum AlgorithmHashCondition {\n  IsAlgorithmHash = Condition.IsAlgorithmHash,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SemanticVersionCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsString = Condition.IsString,\n}\n\nexport enum UUIDCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsUUID = Condition.IsUUID,\n}\n\nexport enum MD5Condition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMD5 = Condition.IsMD5,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum BooleanCondition {\n  IsBoolean = Condition.IsBoolean,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DateCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DateRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsDateRange = Condition.IsDateRange,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum DateTimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DayOfMonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDayOfMonth = Condition.IsDayOfMonth,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsToday = Condition.IsToday,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum MonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMonth = Condition.IsMonth,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisMonth = Condition.IsThisMonth,\n}\n\nexport enum TimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTime = Condition.IsTime,\n}\n\nexport enum TimeRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsTime = Condition.IsTime,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum TimeOfDayCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeOfDay = Condition.IsTimeOfDay,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum WeekdayCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum YearCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisYear = Condition.IsThisYear,\n  IsYear = Condition.IsYear,\n}\n", "import { Condition } from '../index';\n\nexport enum HexadecimalCondition {\n  IsEqual = Condition.IsEqual,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum JSONCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MarkdownCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsMarkdown = Condition.IsMarkdown,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../../index';\n\nexport enum CurrencyCondition {\n  IsBetween = Condition.IsBetween,\n  IsCurrency = Condition.IsCurrency,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsISO8601 = Condition.IsISO8601,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n}\n\nexport enum BitcoinAddressCondition {\n  IsBitcoinAddress = Condition.IsBitcoinAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum EthereumAddressCondition {\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum LanguageCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsLanguage = Condition.IsLanguage,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum CityCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum CountryCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsCountry = Condition.IsCountry,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum LatitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum LongitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum PostalCodeCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsPostalCode = Condition.IsPostalCode,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum ProvinceCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsProvince = Condition.IsProvince,\n  IsString = Condition.IsString,\n}\n\nexport enum StateCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsState = Condition.IsState,\n  IsString = Condition.IsString,\n}\n\nexport enum StreetAddressCondition {\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n\n  IsString = Condition.IsString,\n  IsStreetAddress = Condition.IsStreetAddress,\n}\n", "import { Condition } from '../index';\n\nexport enum MenuCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum TagsCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DataURICondition {\n  Contains = Condition.Contains,\n  IsDataURI = Condition.IsDataURI,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum DomainNameCondition {\n  Contains = Condition.Contains,\n  IsDomainName = Condition.IsDomainName,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum EmailCondition {\n  Contains = Condition.Contains,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressRangeCondition {\n  IsEqual = Condition.IsEqual,\n  IsIPAddressRange = Condition.IsIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum PortCondition {\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MACAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MagnetURICondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MimeTypeCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMimeType = Condition.IsMimeType,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SlugCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsSlug = Condition.IsSlug,\n}\n\nexport enum URLCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsURL = Condition.IsURL,\n}\n", "import { Condition } from '../index';\n\nexport enum NumberCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInt = Condition.IsInteger,\n  IsISBN = Condition.IsISBN,\n  IsISMN = Condition.IsISMN,\n  IsISSN = Condition.IsISSN,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNumber = Condition.IsNumber,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n  IsPostalCode = Condition.IsPostalCode,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSSN = Condition.IsSSN,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsUUID = Condition.IsUUID,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n\nexport enum FloatCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum IntegerCondition {\n  IsEqual = Condition.IsEqual,\n  IsInteger = Condition.IsInteger,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n", "import { Condition } from '../index';\n\nexport enum CreditCardCondition {\n  IsCreditCard = Condition.IsCreditCard,\n  IsEqual = Condition.IsEqual,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum EmailAddressCondition {\n  isEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum LicensePlateNumber {\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\nexport enum PassportNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PasswordCondition {\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsInList = Condition.IsInList,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsStrongPassword = Condition.IsStrongPassword,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PhoneNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum SocialSecurityNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsSSN = Condition.IsSSN,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n", "import { Condition } from '../../../index';\n\nexport enum AirportCondition {\n  IsAirport = Condition.IsAirport,\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\n/**\n * Bank Identification Code\n *\n * @remarks\n * BIC means Bank Identification Code, or Bank Identifier Code.\n * It is an 8 to 11-character code that is used to identify a\n * specific bank when you make an international transaction.\n * */\nexport enum BICCondition {\n  Contains = Condition.Contains,\n  IsBIC = Condition.IsBIC,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * European Article Number\n *\n * @remarks\n * The International Article Number (also known as European\n * Article Number or EAN) is a standard describing a barcode\n * symbology and numbering system used in global trade to identify\n * a specific retail product type, in a specific packaging\n * configuration, from a specific manufacturer.\n *\n * The most commonly used EAN standard is the thirteen-digit EAN-13\n * */\nexport enum EANCondition {\n  Contains = Condition.Contains,\n  IsEAN = Condition.IsEAN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Employer Identification Number\n *\n * @remarks\n *\n * The Employer Identification Number (EIN), also known as the Federal\n * Employer Identification Number (FEIN) or the Federal Tax Identification\n * Number, is a unique nine-digit number assigned by the Internal Revenue\n * Service (IRS) to business entities operating in the United States for the\n * purposes of identification.\n */\nexport enum EINCondition {\n  Contains = Condition.Contains,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Bank Account Number\n *\n * @remarks\n *\n * An IBAN, or international bank account number, is a standard\n * international numbering system developed to identify an overseas\n * bank account. The number starts with a two-digit country code, then\n * two numbers, followed by several more alphanumeric characters.\n */\nexport enum IBANCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Book Number\n *\n * @remarks\n *\n * ISBN is the acronym for International Standard Book Number. This\n * 10 or 13-digit number identifies a specific book, an edition of a\n * book, or a book-like product (such as an audiobook). Since 1970 each\n * published book has a unique ISBN. In 2007, assigned ISBNs changed\n * from 10 digits to 13.\n */\nexport enum ISBNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISBN = Condition.IsISBN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Securities Identification Number\n *\n * @remarks\n * An ISIN is a 12-digit alphanumeric code that uniquely identifies a\n * specific security. The numbers are allocated by a country's respective\n * national numbering agency (NNA). An ISIN is not the same as the ticker\n * symbol, which identifies the stock at the exchange level.\n */\nexport enum ISINCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISIN = Condition.IsISIN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Music Number\n *\n * @remarks\n * The International Standard Music Number or ISMN (ISO 10957) is a\n * thirteen-character alphanumeric identifier for printed music developed\n * by ISO.\n */\nexport enum ISMNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISMN = Condition.IsISMN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Serial Number\n *\n * @remarks\n * An International Standard Serial Number (ISSN) is an eight-digit\n * serial number used to uniquely identify a serial publication,\n * such as a magazine. The ISSN is especially helpful in distinguishing\n * between serials with the same title.\n */\nexport enum ISSNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISSN = Condition.IsISSN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Tax Identification Number\n *\n * @remarks\n * A Tax Identification Number (TIN) is a nine-digit number used as a\n * tracking number by the Internal Revenue Service (IRS)\n */\nexport enum TaxIDNumberCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n}\n\n/**\n * Value Added Tax (VAT) Registration Number\n *\n * @remarks\n * A VAT registration number is a nine-digit number used to identify\n * a business or person in the European Union.\n */\nexport enum VATCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n", "import { Condition } from '../index';\n\n// TODO: Example the number of conditions a string can support\nexport enum StringCondition {\n  Contains = Condition.Contains,\n  HasNumberCount = Condition.HasNumberCount,\n  HasLowercaseCount = Condition.HasLowercaseCount,\n  HasLetterCount = Condition.HasLetterCount,\n  HasSpacesCount = Condition.HasSpacesCount,\n  HasSymbolCount = Condition.HasSymbolCount,\n  HasUppercaseCount = Condition.HasUppercaseCount,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsAscii = Condition.IsAscii,\n  IsBase64 = Condition.IsBase64,\n  IsColor = Condition.IsColor,\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsCreditCard = Condition.IsCreditCard,\n  IsDataURI = Condition.IsDataURI,\n  IsDomainName = Condition.IsDomainName,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsIdentityCardCode = Condition.IsIdentityCardCode,\n  IsIMEI = Condition.IsIMEI,\n  IsInList = Condition.IsInList,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsISBN = Condition.IsISBN,\n  IsISIN = Condition.IsISIN,\n  IsISMN = Condition.IsISMN,\n  IsISRC = Condition.IsISRC,\n  IsISSN = Condition.IsISSN,\n  IsLanguage = Condition.IsLanguage,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsLowercase = Condition.IsLowercase,\n  IsOctal = Condition.IsOctal,\n  IsMACAddress = Condition.IsMACAddress,\n  IsMD5 = Condition.IsMD5,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsMarkdown = Condition.IsMarkdown,\n  IsMimeType = Condition.IsMimeType,\n  IsMonth = Condition.IsMonth,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPostalCode = Condition.IsPostalCode,\n  IsProvince = Condition.IsProvince,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSlug = Condition.IsSlug,\n  IsSSN = Condition.IsSSN,\n  IsState = Condition.IsState,\n  IsStreetAddress = Condition.IsStreetAddress,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsURL = Condition.IsURL,\n  IsUUID = Condition.IsUUID,\n  IsUppercase = Condition.IsUppercase,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n  IsYear = Condition.IsYear,\n}\n\nexport enum LongTextCondition {\n  Contains = Condition.Contains,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsInList = Condition.IsInList,\n  IsMarkdown = Condition.IsMarkdown,\n  IsNotInList = Condition.IsNotInList,\n  IsNumeric = Condition.IsNumeric,\n  IsLowercase = Condition.IsLowercase,\n  IsString = Condition.IsString,\n  IsUppercase = Condition.IsUppercase,\n}\n", "import { Action } from './action';\nimport { Condition } from './condition/index';\n\nexport type Allowed = 'allowed';\nexport type Blocked = 'blocked';\n\nexport enum Privilege {\n  Allowed,\n  Blocked,\n}\n\nexport type Create = Privilege;\nexport type Delete = Privilege;\nexport type Edit = Privilege;\nexport type View = Privilege;\n\nexport type Rule<T = {}> = {\n  actions?: Action[];\n  conditions: Condition[];\n  description: string;\n  name: string;\n} & T;\n", "export enum FormValidationProblem {\n  InvalidCharacters = 'invalid-characters',\n  InvalidPattern = 'invalid-pattern',\n  NotComplexEnough = 'not-complex-enough',\n  NotUnique = 'not-unique',\n  NotValidEmail = 'not-valid-email',\n  TooLong = 'too-long',\n  TooShort = 'too-short',\n  Required = 'required',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum TaskStatus {\n  'Canceled' = 'Canceled',\n  'Completed' = 'Completed',\n  'Created' = 'Created',\n  'Faulted' = 'Faulted',\n  'Queued' = 'Queued',\n  'Running' = 'Running',\n  'Waiting' = 'Waiting',\n}\n\nexport type Task = {\n  created?: DateTime;\n  data: Record<string, string> | Map<string, string>;\n  name: string;\n  id?: string;\n  status?: TaskStatus;\n};\n", "import { CommunicationMedium } from '../../../communications/medium';\n\n/**\n * @enum AuthenticationStatus\n * @property Archived - User is no longer active.\n * @property Compromised - User is disabled due to a potential security threat.\n * @property Confirmed - User has been confirmed.\n * @property ForcePasswordChange - The user is confirmed and the user can sign in\n * using a temporary password, but on first sign-in, the user must change his\n * or her password to a new value before doing anything else.\n * @property ResetRequired - User is confirmed, but the user must request a\n * code and reset his or her password before he or she can sign in.\n * @property Unconfirmed - User has been created but not confirmed.\n * @property Unknown - User status is not known.\n */\nexport enum UserVerificationStatus {\n  Archived = 'ARCHIVED',\n  Compromised = 'COMPROMISED',\n  Confirmed = 'CONFIRMED',\n  ForcePasswordChange = 'FORCE_CHANGE_PASSWORD',\n  ResetRequired = 'RESET_REQUIRED',\n  Unconfirmed = 'UNCONFIRMED',\n  Unknown = 'UNKNOWN',\n}\n\nexport enum UserAuthenticationVerificationType {\n  Code = 'code',\n  Link = 'link',\n}\n\nexport type UserVerificationDetails = {\n  status: UserVerificationStatus;\n  delivery: {\n    medium: CommunicationMedium.Email;\n    destination: string;\n  };\n};\n", "export enum UserRole {\n  Owner = 'Owner',\n  Admin = 'Admin',\n  User = 'User',\n  Visitor = 'Visitor',\n}\n", "export enum PaymentIntentStatus {\n  RequiresPaymentMethod = 'requires_payment_method',\n  RequiresConfirmation = 'requires_confirmation',\n  RequiresAction = 'requires_action',\n  Processing = 'processing',\n  RequiresCapture = 'requires_capture',\n  Canceled = 'canceled',\n  Succeeded = 'succeeded',\n}\n\nexport type PaymentMethod = {\n  id: string;\n  stripe_id: string;\n  brand: string;\n  country: string;\n  last_four_digits: string;\n  exp_month: number;\n  exp_year: number;\n  three_d_secure_usage_supported: boolean;\n};\n", "import { Person } from '../../../people/person';\nimport { PaymentMethod } from '../payment-method';\nimport { Product } from '../product/index';\n\nexport enum SubscriptionStatus {\n  Incomplete = 'incomplete',\n  IncompleteExpired = 'incomplete_expired',\n  Trialing = 'trialing',\n  Active = 'active',\n  PastDue = 'past_due',\n  Canceled = 'canceled',\n  Unpaid = 'unpaid',\n}\n\nexport enum SubscriptionPlanDuration {\n  Monthly = 'monthly',\n  Quarterly = 'quarterly',\n  Yearly = 'yearly',\n  Lifetime = 'lifetime',\n}\n\nexport type Subscription = {\n  active: boolean;\n  end_date: Date;\n  canceled: boolean;\n  renewal_date: Date;\n  id: string;\n  product_id: Product['id'];\n  plan_duration: SubscriptionPlanDuration;\n  trial_membership_active: boolean;\n  trial_membership_end_date: Date;\n  status: SubscriptionStatus;\n  payment_method_id: PaymentMethod['id'];\n  person_id: Person['id'];\n};\n", "import { ISO8601String } from \"../i18n/date\";\nimport { Person } from '../people/person'\n\nexport enum ChatMessageStatus {\n  Delivered = \"delivered\",\n  Read = \"read\",\n  Sending = \"sending\",\n  Sent = \"sent\",\n}\n\n\n\nexport enum ChatMessageType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Text = \"text\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageAttachmentType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageReactionType {\n  Angry = \"angry\",\n  Laugh = \"laugh\",\n  Like = \"like\",\n  Love = \"love\",\n  Sad = \"sad\",\n  Wow = \"wow\",\n  Wink = \"wink\",\n  Yay = \"yay\",\n}\n\n\nexport type ChatMessage = {\n  // The message attachments.\n  attachments?: {\n    // The attachment type.\n    type: ChatMessageAttachmentType;\n\n    // The attachment URL.\n    url: string;\n  }[];\n\n  // The message text.\n  body: string;\n\n  // The time the message was sent.\n  date: ISO8601String;\n\n  // Unique identifier for the message.\n  id?: string;\n\n  // The message reactions.\n  reactions?: {\n    // The reaction type.\n    type: ChatMessageReactionType;\n  }[];\n\n  recipients?: Person[];\n\n\n  // The message status.\n  status?: ChatMessageStatus;\n\n  // Subject of the message.\n  subject?: string;\n \n  // The user who sent the message.\n  sender?: {\n    avatar?: string;\n    id: string;\n    name: string;\n  };\n\n\n  \n  // The type of message.\n  type?: ChatMessageType;\n};\n\n\n", "export enum CommunicationMedium {\n  Email = 'email',\n  PhoneNumber = 'phone_number',\n}\n", "/*\n  This is a decent start, but I should make the log level TSDoc's more clear\n  of the intention and expected result from using each level.\n*/\nexport enum LogLevel {\n  /**\n   * Analytics (Business/Web) related events.\n   */\n  Analytics = 'analytics',\n  /**\n   * Exception that needs urgent review by engineers.\n   */\n  Critical = 'critical',\n  /**\n   * Logging used by developers to temporarily debug an issue.\n   */\n  Debug = 'debug',\n  /**\n   * A runtime exception that does not require immediate attention.\n   */\n  Exception = 'exception',\n  /**\n   * An HTTP request/response event. Default is 'info' level.\n   */\n  Http = 'http',\n  /**\n   * Used for logging general information regarding application processes.\n   */\n  Info = 'info',\n  /**\n   * Used to warn about possible issues.\n   */\n  Warning = 'warning',\n}\n", "// import { ExceptionObject } from '@srclaunch/exceptions';\n\nexport type HttpRequestHost = string;\nexport type HttpRequestResource = string;\nexport type HttpRequestBody = Record<string, unknown> | string | unknown | null;\n\nexport enum HttpRequestMethod {\n  Delete = 'delete',\n  Get = 'get',\n  Head = 'head',\n  Patch = 'patch',\n  Post = 'post',\n  Put = 'put',\n}\n\nexport type HttpRequestHeaders = Record<string, string>;\n\nexport type HttpResponseBody<T> = T & (Record<string, unknown> | unknown);\n\nexport type HttpResponseHeaders = Record<string, string>;\n\nexport enum HttpResponseCode {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  MULTI_STATUS = 207,\n  ALREADY_REPORTED = 208,\n  IM_USED = 226,\n  MULTIPLE_CHOICES = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  USE_PROXY = 305,\n  SWITCH_PROXY = 306,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED_REQUEST = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  LOCKED = 423,\n  FAILED_DEPENDENCY = 424,\n  TOO_EARLY = 425,\n  UPGRADE_REQUIRED = 426,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n  VARIANT_ALSO_NEGOTIATES = 506,\n  INSUFFICIENT_STORAGE = 507,\n  LOOP_DETECTED = 508,\n  BANDWIDTH_LIMIT_EXCEEDED = 509,\n  NOT_EXTENDED = 510,\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n\nexport type HttpRequest = {\n  readonly body?: HttpRequestBody;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly response?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpRequestHeaders;\n  readonly host?: HttpRequestHost;\n  readonly method: HttpRequestMethod;\n  readonly resource: HttpRequestResource;\n};\n\nexport type HttpResponse<T = Record<string, unknown>> = {\n  readonly body?: HttpResponseBody<T>;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly request?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpResponseHeaders;\n  readonly status?: {\n    readonly code: HttpResponseCode;\n  };\n};\n", "export enum Platform {\n  DesktopApplication = 'desktop-application',\n  MobileApplication = 'mobile-application',\n  Node = 'node',\n  WebApplication = 'web-application',\n}\n", "import { TimezoneRegions } from '../time/region';\nimport { TimezoneOffset } from '../time/timezone';\nimport { Timezones } from '../time/timezones';\nimport { CurrencyCode } from './../currency/index';\nimport { LocaleCode } from '.';\n\nexport enum CountryCode {\n  Afghanistan = 'AF',\n  Albania = 'AL',\n  Algeria = 'DZ',\n  AmericanSamoa = 'AS',\n  Andorra = 'AD',\n  Angola = 'AO',\n  Anguilla = 'AI',\n  Antarctica = 'AQ',\n  AntiguaAndBarbuda = 'AG',\n  Argentina = 'AR',\n  Armenia = 'AM',\n  Aruba = 'AW',\n  Australia = 'AU',\n  Austria = 'AT',\n  Azerbaijan = 'AZ',\n  Bahamas = 'BS',\n  Bahrain = 'BH',\n  Bangladesh = 'BD',\n  Barbados = 'BB',\n  Belarus = 'BY',\n  Belgium = 'BE',\n  Belize = 'BZ',\n  Benin = 'BJ',\n  Bermuda = 'BM',\n  Bhutan = 'BT',\n  Bolivia = 'BO',\n  BosniaAndHerzegovina = 'BA',\n  Botswana = 'BW',\n  BouvetIsland = 'BV',\n  Brazil = 'BR',\n  BritishIndianOceanTerritory = 'IO',\n  Brunei = 'BN',\n  Bulgaria = 'BG',\n  BurkinaFaso = 'BF',\n  Burundi = 'BI',\n  Cambodia = 'KH',\n  Cameroon = 'CM',\n  Canada = 'CA',\n  CapeVerde = 'CV',\n  CaymanIslands = 'KY',\n  CentralAfricanRepublic = 'CF',\n  Chad = 'TD',\n  Chile = 'CL',\n  China = 'CN',\n  ChristmasIsland = 'CX',\n  CocosKeelingIslands = 'CC',\n  Colombia = 'CO',\n  Comoros = 'KM',\n  Congo = 'CG',\n  CongoTheDemocraticRepublicOfThe = 'CD',\n  CookIslands = 'CK',\n  CostaRica = 'CR',\n  CoteDIvoire = 'CI',\n  Croatia = 'HR',\n  Cuba = 'CU',\n  Cyprus = 'CY',\n  CzechRepublic = 'CZ',\n  Denmark = 'DK',\n  Djibouti = 'DJ',\n  Dominica = 'DM',\n  DominicanRepublic = 'DO',\n  Ecuador = 'EC',\n  Egypt = 'EG',\n  ElSalvador = 'SV',\n  EquatorialGuinea = 'GQ',\n  Eritrea = 'ER',\n  Estonia = 'EE',\n  Ethiopia = 'ET',\n  FalklandIslands = 'FK',\n  FaroeIslands = 'FO',\n  Fiji = 'FJ',\n  Finland = 'FI',\n  France = 'FR',\n  FrenchGuiana = 'GF',\n  FrenchPolynesia = 'PF',\n  FrenchSouthernTerritories = 'TF',\n  Gabon = 'GA',\n  Gambia = 'GM',\n  Georgia = 'GE',\n  Germany = 'DE',\n  Ghana = 'GH',\n  Gibraltar = 'GI',\n  Greece = 'GR',\n  Greenland = 'GL',\n  Grenada = 'GD',\n  Guadeloupe = 'GP',\n  Guam = 'GU',\n  Guatemala = 'GT',\n  Guernsey = 'GG',\n  Guinea = 'GN',\n  GuineaBissau = 'GW',\n  Guyana = 'GY',\n  Haiti = 'HT',\n  HeardIslandMcdonaldIslands = 'HM',\n  HolySeeVaticanCityState = 'VA',\n  Honduras = 'HN',\n  HongKong = 'HK',\n  Hungary = 'HU',\n  Iceland = 'IS',\n  India = 'IN',\n  Indonesia = 'ID',\n  Iran = 'IR',\n  Iraq = 'IQ',\n  Ireland = 'IE',\n  IsleOfMan = 'IM',\n  Israel = 'IL',\n  Italy = 'IT',\n  Jamaica = 'JM',\n  Japan = 'JP',\n  Jersey = 'JE',\n  Jordan = 'JO',\n  Kazakhstan = 'KZ',\n  Kenya = 'KE',\n  Kiribati = 'KI',\n  Kuwait = 'KW',\n  Kyrgyzstan = 'KG',\n  Laos = 'LA',\n  Latvia = 'LV',\n  Lebanon = 'LB',\n  Lesotho = 'LS',\n  Liberia = 'LR',\n  Libya = 'LY',\n  Liechtenstein = 'LI',\n  Lithuania = 'LT',\n  Luxembourg = 'LU',\n  Macau = 'MO',\n  Madagascar = 'MG',\n  Malawi = 'MW',\n  Malaysia = 'MY',\n  Maldives = 'MV',\n  Mali = 'ML',\n  Malta = 'MT',\n  MarshallIslands = 'MH',\n  Martinique = 'MQ',\n  Mauritania = 'MR',\n  Mauritius = 'MU',\n  Mayotte = 'YT',\n  Mexico = 'MX',\n  MicronesiaFederatedStatesOf = 'FM',\n  Moldova = 'MD',\n  Monaco = 'MC',\n  Mongolia = 'MN',\n  Montenegro = 'ME',\n  Montserrat = 'MS',\n  Morocco = 'MA',\n  Mozambique = 'MZ',\n  Myanmar = 'MM',\n  Namibia = 'NA',\n  Nauru = 'NR',\n  Nepal = 'NP',\n  Netherlands = 'NL',\n  NetherlandsAntilles = 'AN',\n  NewCaledonia = 'NC',\n  NewZealand = 'NZ',\n  NorthKorea = 'KP',\n  Nicaragua = 'NI',\n  Niger = 'NE',\n  Nigeria = 'NG',\n  Niue = 'NU',\n  NorfolkIsland = 'NF',\n  NorthMacedonia = 'MK',\n  NorthernMarianaIslands = 'MP',\n  Norway = 'NO',\n  Oman = 'OM',\n  Pakistan = 'PK',\n  Palau = 'PW',\n  PalestinianTerritoryOccupied = 'PS',\n  Panama = 'PA',\n  PapuaNewGuinea = 'PG',\n  Paraguay = 'PY',\n  Peru = 'PE',\n  Philippines = 'PH',\n  Pitcairn = 'PN',\n  Poland = 'PL',\n  Portugal = 'PT',\n  PuertoRico = 'PR',\n  Qatar = 'QA',\n  Reunion = 'RE',\n  Romania = 'RO',\n  RussianFederation = 'RU',\n  Rwanda = 'RW',\n  SaintBarthelemy = 'BL',\n  SaintHelena = 'SH',\n  SaintKittsAndNevis = 'KN',\n  SaintLucia = 'LC',\n  SaintMartin = 'MF',\n  SaintPierreAndMiquelon = 'PM',\n  SaintVincentAndTheGrenadines = 'VC',\n  Samoa = 'WS',\n  SanMarino = 'SM',\n  SaoTomeAndPrincipe = 'ST',\n  SaudiArabia = 'SA',\n  Senegal = 'SN',\n  Serbia = 'RS',\n  SerbiaAndMontenegro = 'CS',\n  Seychelles = 'SC',\n  SierraLeone = 'SL',\n  Singapore = 'SG',\n  Slovakia = 'SK',\n  Slovenia = 'SI',\n  SolomonIslands = 'SB',\n  Somalia = 'SO',\n  SouthAfrica = 'ZA',\n  SouthGeorgiaAndTheSouthSandwichIslands = 'GS',\n  SouthKorea = 'KR',\n  Spain = 'ES',\n  SriLanka = 'LK',\n  Sudan = 'SD',\n  Suriname = 'SR',\n  SvalbardAndJanMayen = 'SJ',\n  Swaziland = 'SZ',\n  Sweden = 'SE',\n  Switzerland = 'CH',\n  Syria = 'SY',\n  Taiwan = 'TW',\n  Tajikistan = 'TJ',\n  Tanzania = 'TZ',\n  Thailand = 'TH',\n  TimorLeste = 'TL',\n  Togo = 'TG',\n  Tokelau = 'TK',\n  Tonga = 'TO',\n  TrinidadAndTobago = 'TT',\n  Tunisia = 'TN',\n  Turkey = 'TR',\n  Turkmenistan = 'TM',\n  TurksAndCaicosIslands = 'TC',\n  Tuvalu = 'TV',\n  Uganda = 'UG',\n  Ukraine = 'UA',\n  UnitedArabEmirates = 'AE',\n  UnitedKingdom = 'GB',\n  UnitedStates = 'US',\n  UnitedStatesMinorOutlyingIslands = 'UM',\n  Uruguay = 'UY',\n  Uzbekistan = 'UZ',\n  Vanuatu = 'VU',\n  Venezuela = 'VE',\n  Vietnam = 'VN',\n  VirginIslandsBritish = 'VG',\n  VirginIslandsUS = 'VI',\n  WallisAndFutuna = 'WF',\n  WesternSahara = 'EH',\n  Yemen = 'YE',\n  Zambia = 'ZM',\n  Zimbabwe = 'ZW',\n}\n\nexport type CountrySubdivision = {\n  // code: CountrySubdivisionCode;\n  name: string;\n  capital: string;\n  population: number;\n};\n\nexport type Country = {\n  i18n: {\n    calling_codes: number[];\n    currencies: CurrencyCode[];\n    languages: LocaleCode[];\n    tz: {\n      offsets: TimezoneOffset[];\n      regions: TimezoneRegions[];\n      timezones: Timezones[];\n    };\n  };\n  id: CountryCode;\n  info: {\n    flag: {\n      emoji: string;\n      emoji_unicode: string;\n      svg: string;\n    };\n    tld: string[];\n  };\n  iso: {\n    alpha2: CountryCode;\n    alpha3: string;\n    numeric: string;\n  };\n  name: {\n    alt_spellings: string[];\n    demonym: string;\n    native: {\n      endonym: string;\n    };\n    official: string;\n    short: string;\n    translations: {\n      [lang: string]: string;\n    };\n  };\n  statistics?: {\n    demographics: {\n      age: {\n        distribution: { age: string; percentage: number }[];\n        median_age: number;\n      };\n      population: {\n        largest_city: string;\n        total: number;\n      };\n    };\n    geography: {\n      area: number;\n      region: string;\n      sub_region: string;\n    };\n    government: {\n      capital: string;\n      type: string;\n    };\n  };\n};\n", "import { CountryCode } from '../locale/country.js';\n\n/**\n * ISO-4217 Currency Codes\n */\nexport enum CurrencyCode {\n  AfghanistanAfghani = 'AFN',\n  AlbaniaLek = 'ALL',\n  ArmeniaDram = 'AMD',\n  AlgeriaDinar = 'DZD',\n  AmericanSamoaTala = 'WST',\n  AngolaKwanza = 'AOA',\n  ArgentinaPeso = 'ARS',\n  AustraliaDollar = 'AUD',\n  ArubaFlorin = 'AWG',\n  AzerbaijanNewManat = 'AZN',\n  BosniaAndHerzegovinaConvertibleMark = 'BAM',\n  BahrainDinar = 'BHD',\n  BarbadosDollar = 'BBD',\n  BangladeshTaka = 'BDT',\n  BelgiumFranc = 'BGN',\n  BermudaDollar = 'BMD',\n  BruneiDollar = 'BND',\n  BoliviaBoliviano = 'BOB',\n  BrazilReal = 'BRL',\n  BahamasDollar = 'BSD',\n  BhutanNgultrum = 'BTN',\n  BotswanaPula = 'BWP',\n  BelarusRuble = 'BYN',\n  BelizeDollar = 'BZD',\n  BulgariaLev = 'BGN',\n  BurundiFranc = 'BIF',\n  BritishPound = 'GBP',\n  CanadaDollar = 'CAD',\n  CambodiaRiel = 'KHR',\n  ComorosFranc = 'KMF',\n  CaymanIslandsDollar = 'KYD',\n  ChilePeso = 'CLP',\n  ChinaYuan = 'CNY',\n  ColombiaPeso = 'COP',\n  CostaRicaColon = 'CRC',\n  CroatiaKuna = 'HRK',\n  CubaConvertiblePeso = 'CUC',\n  CubaPeso = 'CUP',\n  CapeVerdeEscudo = 'CVE',\n  CyprusPound = 'CYP',\n  CzechRepublicKoruna = 'CZK',\n  DjiboutiFranc = 'DJF',\n  DenmarkKrone = 'DKK',\n  DominicaDollar = 'XCD',\n  DominicanRepublicPeso = 'DOP',\n  EastCaribbeanDollar = 'XCD',\n  EgyptPound = 'EGP',\n  ElSalvadorColon = 'SVC',\n  EquatorialGuineaEkwele = 'GQE',\n  EritreaNakfa = 'ERN',\n  EstoniaKroon = 'EEK',\n  EthiopiaBirr = 'ETB',\n  Euro = 'EUR',\n  FijiDollar = 'FJD',\n  FalklandIslandsPound = 'FKP',\n  GambiaDalasi = 'GMD',\n  GabonFranc = 'GMD',\n  GeorgiaLari = 'GEL',\n  GhanaCedi = 'GHS',\n  GibraltarPound = 'GIP',\n  GuatemalaQuetzal = 'GTQ',\n  GuernseyPound = 'GGP',\n  GuineaBissauPeso = 'GWP',\n  GuyanaDollar = 'GYD',\n  HongKongDollar = 'HKD',\n  HondurasLempira = 'HNL',\n  HaitiGourde = 'HTG',\n  HungaryForint = 'HUF',\n  IndonesiaRupiah = 'IDR',\n  IsleOfManPound = 'IMP',\n  IsraelNewShekel = 'ILS',\n  IndiaRupee = 'INR',\n  IraqDinar = 'IQD',\n  IranRial = 'IRR',\n  IcelandKrona = 'ISK',\n  JamaicaDollar = 'JMD',\n  JapanYen = 'JPY',\n  JerseyPound = 'JEP',\n  JordanDinar = 'JOD',\n  KazakhstanTenge = 'KZT',\n  KenyaShilling = 'KES',\n  KyrgyzstanSom = 'KGS',\n  NorthKoreaWon = 'KPW',\n  SouthKoreaWon = 'KRW',\n  KuwaitDinar = 'KWD',\n  LaosKip = 'LAK',\n  LebanonPound = 'LBP',\n  LiberiaDollar = 'LRD',\n  LesothoLoti = 'LSL',\n  LibyanDinar = 'LYD',\n  LithuaniaLitas = 'LTL',\n  LatviaLats = 'LVL',\n  LibyaDinar = 'LYD',\n  MacauPataca = 'MOP',\n  MaldivesRufiyaa = 'MVR',\n  MalawiKwacha = 'MWK',\n  MaltaLira = 'MTL',\n  MauritiusRupee = 'MUR',\n  MongoliaTughrik = 'MNT',\n  MoroccoDirham = 'MAD',\n  MoldovaLeu = 'MDL',\n  MozambiqueMetical = 'MZN',\n  MadagascarAriary = 'MGA',\n  MacedoniaDenar = 'MKD',\n  MexicoPeso = 'MXN',\n  MalaysiaRinggit = 'MYR',\n  MyanmarKyat = 'MMK',\n  MicronesiaFederatedStatesDollar = 'USD',\n  NicaraguaCordoba = 'NIO',\n  NamibiaDollar = 'NAD',\n  NetherlandsAntillesGuilder = 'ANG',\n  NewCaledoniaFranc = 'XPF',\n  NigeriaNaira = 'NGN',\n  NicaraguaCordobaOro = 'NIO',\n  NigerCFAFranc = 'XOF',\n  NorwayKrone = 'NOK',\n  NepalRupee = 'NPR',\n  NewZealandDollar = 'NZD',\n  OmanRial = 'OMR',\n  PanamaBalboa = 'PAB',\n  PeruNuevoSol = 'PEN',\n  PapuaNewGuineaKina = 'PGK',\n  PhilippinesPeso = 'PHP',\n  PakistanRupee = 'PKR',\n  PeruNuevo = 'PEN',\n  PolandZloty = 'PLN',\n  ParaguayGuarani = 'PYG',\n  QatarRial = 'QAR',\n  RomaniaNewLeu = 'RON',\n  SerbiaDinar = 'RSD',\n  SriLankaRupee = 'LKR',\n  RussiaRuble = 'RUB',\n  RwandaFranc = 'RWF',\n  SaudiArabiaRiyal = 'SAR',\n  SlovakiaKoruna = 'SKK',\n  SloveniaTolar = 'SIT',\n  SolomonIslandsDollar = 'SBD',\n  SeychellesRupee = 'SCR',\n  SudanPound = 'SDG',\n  SwedenKrona = 'SEK',\n  SingaporeDollar = 'SGD',\n  SaintHelenaPound = 'SHP',\n  SierraLeoneLeone = 'SLL',\n  SomaliaShilling = 'SOS',\n  SurinameDollar = 'SRD',\n  SintMaartenPound = 'SXD',\n  SyriaPound = 'SYP',\n  SwazilandLilangeni = 'SZL',\n  SwitzerlandFranc = 'CHF',\n  ThailandBaht = 'THB',\n  TajikistanSomoni = 'TJS',\n  TurkmenistanManat = 'TMT',\n  TunisiaDinar = 'TND',\n  TongaPaanga = 'TOP',\n  TurkeyLira = 'TRY',\n  TrinidadAndTobagoDollar = 'TTD',\n  TaiwanNewDollar = 'TWD',\n  TanzaniaShilling = 'TZS',\n  UnitedArabEmiratesDirham = 'AED',\n  UkraineHryvnia = 'UAH',\n  UgandaShilling = 'UGX',\n  UnitedKingdomPound = 'GBP',\n  UnitedStatesDollar = 'USD',\n  UruguayPeso = 'UYU',\n  UzbekistanSom = 'UZS',\n  VenezuelaBolivar = 'VEF',\n  VietnamDong = 'VND',\n  VanuatuVatu = 'VUV',\n  SamoaTala = 'WST',\n  YemenRial = 'YER',\n  SouthAfricaRand = 'ZAR',\n  ZambiaKwacha = 'ZMW',\n  ZimbabweDollar = 'ZWL',\n}\n\nexport type Currency = {\n  code: CurrencyCode;\n  countries: CountryCode[];\n  symbol: string;\n  decimal_digits: number;\n  rounding: number;\n  name: string;\n  symbol_native: string;\n  decimal_separator: string;\n  thousands_separator: string;\n  positive_sign: string;\n  negative_sign: string;\n  symbol_placement: string;\n};\n\nexport const Currencies: Record<string, Currency> = {\n  AfghanistanAfghani: {\n    code: CurrencyCode.AfghanistanAfghani,\n    countries: [CountryCode.Afghanistan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Afghan Afghani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u060B',\n    symbol_native: '\u060B',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AlbaniaLek: {\n    code: CurrencyCode.AlbaniaLek,\n    countries: [CountryCode.Albania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Albanian Lek',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lek',\n    symbol_native: 'Lek',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  AlgeriaDinar: {\n    code: CurrencyCode.AlgeriaDinar,\n    countries: [CountryCode.Algeria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Algerian Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062C',\n    symbol_native: '\u062F.\u062C',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArgentinaPeso: {\n    code: CurrencyCode.ArgentinaPeso,\n    countries: [CountryCode.Argentina],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Argentine Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArmeniaDram: {\n    code: CurrencyCode.ArmeniaDram,\n    countries: [CountryCode.Armenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Armenian Dram',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0564\u0580.',\n    symbol_native: '\u0564\u0580.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ArubaFlorin: {\n    code: CurrencyCode.ArubaFlorin,\n    countries: [CountryCode.Aruba],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Aruban Florin',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AustraliaDollar: {\n    code: CurrencyCode.AustraliaDollar,\n    countries: [CountryCode.Australia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Australian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AzerbaijanManat: {\n    code: CurrencyCode.AzerbaijanNewManat,\n    countries: [CountryCode.Azerbaijan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Azerbaijani Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043C\u0430\u043D',\n    symbol_native: '\u043C\u0430\u043D',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BahrainDinar: {\n    code: CurrencyCode.BahrainDinar,\n    countries: [CountryCode.Bahrain],\n    decimal_digits: 3,\n    decimal_separator: '.',\n    name: 'Bahraini Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '.\u062F.\u0628',\n    symbol_native: '.\u062F.\u0628',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BangladeshTaka: {\n    code: CurrencyCode.BangladeshTaka,\n    countries: [CountryCode.Bangladesh],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bangladeshi Taka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u09F3',\n    symbol_native: '\u09F3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BarbadosDollar: {\n    code: CurrencyCode.BarbadosDollar,\n    countries: [CountryCode.Barbados],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Barbadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BelarusRuble: {\n    code: CurrencyCode.BelarusRuble,\n    countries: [CountryCode.Belarus],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belarusian Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BelizeDollar: {\n    code: CurrencyCode.BelizeDollar,\n    countries: [CountryCode.Belize],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belize Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'BZ$',\n    symbol_native: 'BZ$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BermudaDollar: {\n    code: CurrencyCode.BermudaDollar,\n    countries: [CountryCode.Bermuda],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bermudian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BoliviaBoliviano: {\n    code: CurrencyCode.BoliviaBoliviano,\n    countries: [CountryCode.Bolivia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bolivian Boliviano',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$b',\n    symbol_native: '$b',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BosniaAndHerzegovinaConvertibleMarka: {\n    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,\n    countries: [CountryCode.BosniaAndHerzegovina],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Bosnia and Herzegovina Convertible Marka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KM',\n    symbol_native: 'KM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BotswanaPula: {\n    code: CurrencyCode.BotswanaPula,\n    countries: [CountryCode.Botswana],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Botswana Pula',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'P',\n    symbol_native: 'P',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BrazilReal: {\n    code: CurrencyCode.BrazilReal,\n    countries: [CountryCode.Brazil],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Brazilian Real',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R$',\n    symbol_native: 'R$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BruneiDollar: {\n    code: CurrencyCode.BruneiDollar,\n    countries: [CountryCode.Brunei],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Brunei Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BulgariaLev: {\n    code: CurrencyCode.BulgariaLev,\n    countries: [CountryCode.Bulgaria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bulgarian Lev',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043B\u0432',\n    symbol_native: '\u043B\u0432',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BurundiFranc: {\n    code: CurrencyCode.BurundiFranc,\n    countries: [CountryCode.Burundi],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Burundian Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'FBu',\n    symbol_native: 'FBu',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CambodiaRiel: {\n    code: CurrencyCode.CambodiaRiel,\n    countries: [CountryCode.Cambodia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cambodian Riel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u17DB',\n    symbol_native: '\u17DB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CanadaDollar: {\n    code: CurrencyCode.CanadaDollar,\n    countries: [CountryCode.Canada],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Canadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CapeVerdeEscudo: {\n    code: CurrencyCode.CapeVerdeEscudo,\n    countries: [CountryCode.CapeVerde],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cape Verde Escudo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Esc',\n    symbol_native: 'Esc',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CaymanIslandsDollar: {\n    code: CurrencyCode.CaymanIslandsDollar,\n    countries: [CountryCode.CaymanIslands],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cayman Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChilePeso: {\n    code: CurrencyCode.ChilePeso,\n    countries: [CountryCode.Chile],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Chilean Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChinaYuanRenminbi: {\n    code: CurrencyCode.ChinaYuan,\n    countries: [CountryCode.China],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Chinese Yuan',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\u00A5',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ColombiaPeso: {\n    code: CurrencyCode.ColombiaPeso,\n    countries: [CountryCode.Colombia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Colombian Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ComorosFranc: {\n    code: CurrencyCode.ComorosFranc,\n    countries: [CountryCode.Comoros],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Comoros Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CF',\n    symbol_native: 'CF',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CostaRicaColon: {\n    code: CurrencyCode.CostaRicaColon,\n    countries: [CountryCode.CostaRica],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Costa Rican Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CroatiaKuna: {\n    code: CurrencyCode.CroatiaKuna,\n    countries: [CountryCode.Croatia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Croatian Kuna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kn',\n    symbol_native: 'kn',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaConvertiblePeso: {\n    code: CurrencyCode.CubaConvertiblePeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Convertible Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaPeso: {\n    code: CurrencyCode.CubaPeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CyprusPound: {\n    code: CurrencyCode.CyprusPound,\n    countries: [CountryCode.Cyprus],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cyprus Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CzechRepublicKoruna: {\n    code: CurrencyCode.CzechRepublicKoruna,\n    countries: [CountryCode.CzechRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Czech Republic Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K\u010D',\n    symbol_native: 'K\u010D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DenmarkKrone: {\n    code: CurrencyCode.DenmarkKrone,\n    countries: [CountryCode.Denmark],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Denmark Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DjiboutiFranc: {\n    code: CurrencyCode.DjiboutiFranc,\n    countries: [CountryCode.Djibouti],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Djibouti Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Fdj',\n    symbol_native: 'Fdj',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  DominicanRepublicPeso: {\n    code: CurrencyCode.DominicanRepublicPeso,\n    countries: [CountryCode.DominicanRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Dominican Republic Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RD$',\n    symbol_native: 'RD$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EastCaribbeanDollar: {\n    code: CurrencyCode.EastCaribbeanDollar,\n    countries: [\n      CountryCode.AntiguaAndBarbuda,\n      CountryCode.Dominica,\n      CountryCode.Grenada,\n      CountryCode.SaintKittsAndNevis,\n      CountryCode.SaintLucia,\n      CountryCode.SaintVincentAndTheGrenadines,\n    ],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'East Caribbean Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EgyptPound: {\n    code: CurrencyCode.EgyptPound,\n    countries: [CountryCode.Egypt],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Egypt Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ElSalvadorColon: {\n    code: CurrencyCode.ElSalvadorColon,\n    countries: [CountryCode.ElSalvador],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'El Salvador Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EquatorialGuineaEkwele: {\n    code: CurrencyCode.EquatorialGuineaEkwele,\n    countries: [CountryCode.EquatorialGuinea],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'GQE',\n    symbol_native: 'GQE',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EritreaNakfa: {\n    code: CurrencyCode.EritreaNakfa,\n    countries: [CountryCode.Eritrea],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Eritrea Nakfa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Nfk',\n    symbol_native: 'Nfk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EstoniaKroon: {\n    code: CurrencyCode.EstoniaKroon,\n    countries: [CountryCode.Estonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Estonia Kroon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EthiopiaBirr: {\n    code: CurrencyCode.EthiopiaBirr,\n    countries: [CountryCode.Ethiopia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ethiopia Birr',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  Euro: {\n    code: CurrencyCode.Euro,\n    countries: [\n      CountryCode.Andorra,\n      CountryCode.Austria,\n      CountryCode.Belgium,\n      CountryCode.Cyprus,\n      CountryCode.Estonia,\n      CountryCode.Finland,\n      CountryCode.France,\n      CountryCode.Germany,\n      CountryCode.Greece,\n      CountryCode.Ireland,\n      CountryCode.Italy,\n      CountryCode.Latvia,\n      CountryCode.Lithuania,\n      CountryCode.Luxembourg,\n      CountryCode.Malta,\n      CountryCode.Monaco,\n      CountryCode.Netherlands,\n      CountryCode.Portugal,\n      CountryCode.Spain,\n      CountryCode.Sweden,\n      CountryCode.UnitedKingdom,\n    ],\n\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Euro',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AC',\n    symbol_native: '\u20AC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FalklandIslandsPound: {\n    code: CurrencyCode.FalklandIslandsPound,\n    countries: [CountryCode.FalklandIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FijiDollar: {\n    code: CurrencyCode.FijiDollar,\n    countries: [CountryCode.Fiji],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Fiji Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GambiaDalasi: {\n    code: CurrencyCode.GambiaDalasi,\n    countries: [CountryCode.Gambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gambia Dalasi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'D',\n    symbol_native: 'D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GeorgiaLari: {\n    code: CurrencyCode.GeorgiaLari,\n    countries: [CountryCode.Georgia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Georgia Lari',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BE',\n    symbol_native: '\u20BE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GhanaCedi: {\n    code: CurrencyCode.GhanaCedi,\n    countries: [CountryCode.Ghana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ghana Cedi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GibraltarPound: {\n    code: CurrencyCode.GibraltarPound,\n    countries: [CountryCode.Gibraltar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gibraltar Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuatemalaQuetzal: {\n    code: CurrencyCode.GuatemalaQuetzal,\n    countries: [CountryCode.Guatemala],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guatemala Quetzal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Q',\n    symbol_native: 'Q',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuernseyPound: {\n    code: CurrencyCode.GuernseyPound,\n    countries: [CountryCode.Guernsey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guernsey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuineaBissauPeso: {\n    code: CurrencyCode.GuineaBissauPeso,\n    countries: [CountryCode.GuineaBissau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guinea-Bissau Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuyanaDollar: {\n    code: CurrencyCode.GuyanaDollar,\n    countries: [CountryCode.Guyana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guyana Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HaitiGourde: {\n    code: CurrencyCode.HaitiGourde,\n    countries: [CountryCode.Haiti],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Haiti Gourde',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'G',\n    symbol_native: 'G',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HondurasLempira: {\n    code: CurrencyCode.HondurasLempira,\n    countries: [CountryCode.Honduras],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Honduras Lempira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HongKongDollar: {\n    code: CurrencyCode.HongKongDollar,\n    countries: [CountryCode.HongKong],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hong Kong Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HungaryForint: {\n    code: CurrencyCode.HungaryForint,\n    countries: [CountryCode.Hungary],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hungary Forint',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ft',\n    symbol_native: 'Ft',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IcelandKrona: {\n    code: CurrencyCode.IcelandKrona,\n    countries: [CountryCode.Iceland],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iceland Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndianRupee: {\n    code: CurrencyCode.IndiaRupee,\n    countries: [CountryCode.India, CountryCode.Bhutan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Indian Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B9',\n    symbol_native: '\u20B9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndonesiaRupiah: {\n    code: CurrencyCode.IndonesiaRupiah,\n    countries: [CountryCode.Indonesia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Indonesia Rupiah',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rp',\n    symbol_native: 'Rp',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IranRial: {\n    code: CurrencyCode.IranRial,\n    countries: [CountryCode.Iran],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iran Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsleOfManPound: {\n    code: CurrencyCode.IsleOfManPound,\n    countries: [CountryCode.IsleOfMan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Isle of Man Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsraeliShekel: {\n    code: CurrencyCode.IsraelNewShekel,\n    countries: [CountryCode.Israel],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Israeli Shekel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AA',\n    symbol_native: '\u20AA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JamaicaDollar: {\n    code: CurrencyCode.JamaicaDollar,\n    countries: [CountryCode.Jamaica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jamaica Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'J$',\n    symbol_native: 'J$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JapanYen: {\n    code: CurrencyCode.JapanYen,\n    countries: [CountryCode.Japan],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Japan Yen',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\uFFE5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JerseyPound: {\n    code: CurrencyCode.JerseyPound,\n    countries: [CountryCode.Jersey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jersey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JordanDinar: {\n    code: CurrencyCode.JordanDinar,\n    countries: [CountryCode.Jordan],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Jordan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'JD',\n    symbol_native: 'JD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KazakhstanTenge: {\n    code: CurrencyCode.KazakhstanTenge,\n    countries: [CountryCode.Kazakhstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kazakhstan Tenge',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B8',\n    symbol_native: '\u20B8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KenyaShilling: {\n    code: CurrencyCode.KenyaShilling,\n    countries: [CountryCode.Kenya],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kenya Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KSh',\n    symbol_native: 'KSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KuwaitDinar: {\n    code: CurrencyCode.KuwaitDinar,\n    countries: [CountryCode.Kuwait],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Kuwait Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KD',\n    symbol_native: 'KD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KyrgyzstanSom: {\n    code: CurrencyCode.KyrgyzstanSom,\n    countries: [CountryCode.Kyrgyzstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kyrgyzstan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KGS',\n    symbol_native: 'KGS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LaosKip: {\n    code: CurrencyCode.LaosKip,\n    countries: [CountryCode.Laos],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Laos Kip',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AD',\n    symbol_native: '\u20AD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LatviaLats: {\n    code: CurrencyCode.LatviaLats,\n    countries: [CountryCode.Latvia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Latvia Lat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ls',\n    symbol_native: 'Ls',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LebanonPound: {\n    code: CurrencyCode.LebanonPound,\n    countries: [CountryCode.Lebanon],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Lebanon Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LesothoLoti: {\n    code: CurrencyCode.LesothoLoti,\n    countries: [CountryCode.Lesotho],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lesotho Loti',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'M',\n    symbol_native: 'M',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LiberiaDollar: {\n    code: CurrencyCode.LiberiaDollar,\n    countries: [CountryCode.Liberia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Liberia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LibyanDinar: {\n    code: CurrencyCode.LibyanDinar,\n    countries: [CountryCode.Libya],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Libyan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'LD',\n    symbol_native: 'LD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LithuaniaLitas: {\n    code: CurrencyCode.LithuaniaLitas,\n    countries: [CountryCode.Lithuania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lithuania Litas',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lt',\n    symbol_native: 'Lt',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacauPataca: {\n    code: CurrencyCode.MacauPataca,\n    countries: [CountryCode.Macau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macau Pataca',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MOP$',\n    symbol_native: 'MOP$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacedoniaDenar: {\n    code: CurrencyCode.MacedoniaDenar,\n    countries: [CountryCode.NorthMacedonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macedonia Denar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0434\u0435\u043D',\n    symbol_native: '\u0434\u0435\u043D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MadagascarAriary: {\n    code: CurrencyCode.MadagascarAriary,\n    countries: [CountryCode.Madagascar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Madagascar Ariary',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ar',\n    symbol_native: 'Ar',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalawiKwacha: {\n    code: CurrencyCode.MalawiKwacha,\n    countries: [CountryCode.Malawi],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malawi Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MK',\n    symbol_native: 'MK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalaysiaRinggit: {\n    code: CurrencyCode.MalaysiaRinggit,\n    countries: [CountryCode.Malaysia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malaysia Ringgit',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RM',\n    symbol_native: 'RM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaldivesRufiyaa: {\n    code: CurrencyCode.MaldivesRufiyaa,\n    countries: [CountryCode.Maldives],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Maldives Rufiyaa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rf',\n    symbol_native: 'Rf',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaltaLira: {\n    code: CurrencyCode.MaltaLira,\n    countries: [CountryCode.Malta],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malta Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lm',\n    symbol_native: 'Lm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MauritiusRupee: {\n    code: CurrencyCode.MauritiusRupee,\n    countries: [CountryCode.Mauritius],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mauritius Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MexicoPeso: {\n    code: CurrencyCode.MexicoPeso,\n    countries: [CountryCode.Mexico],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mexico Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoldovaLeu: {\n    code: CurrencyCode.MoldovaLeu,\n    countries: [CountryCode.Moldova],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Moldova Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MongoliaTughrik: {\n    code: CurrencyCode.MongoliaTughrik,\n    countries: [CountryCode.Mongolia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mongolia Tughrik',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AE',\n    symbol_native: '\u20AE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoroccoDirham: {\n    code: CurrencyCode.MoroccoDirham,\n    countries: [CountryCode.Morocco],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Morocco Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'DH',\n    symbol_native: 'DH',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MozambiqueMetical: {\n    code: CurrencyCode.MozambiqueMetical,\n    countries: [CountryCode.Mozambique],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mozambique Metical',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MT',\n    symbol_native: 'MT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MyanmarKyat: {\n    code: CurrencyCode.MyanmarKyat,\n    countries: [CountryCode.Myanmar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Myanmar Kyat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K',\n    symbol_native: 'K',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NamibiaDollar: {\n    code: CurrencyCode.NamibiaDollar,\n    countries: [CountryCode.Namibia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Namibia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NepalRupee: {\n    code: CurrencyCode.NepalRupee,\n    countries: [CountryCode.Nepal],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nepal Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NetherlandsAntillesGuilder: {\n    code: CurrencyCode.NetherlandsAntillesGuilder,\n    countries: [CountryCode.NetherlandsAntilles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Netherlands Antilles Guilder',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewCaledoniaFranc: {\n    code: CurrencyCode.NewCaledoniaFranc,\n    countries: [CountryCode.NewCaledonia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'New Caledonia Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A3',\n    symbol_native: '\u20A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewZealandDollar: {\n    code: CurrencyCode.NewZealandDollar,\n    countries: [CountryCode.NewZealand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'New Zealand Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NicaraguaCordoba: {\n    code: CurrencyCode.NicaraguaCordoba,\n    countries: [CountryCode.Nicaragua],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nicaragua Cordoba',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'C$',\n    symbol_native: 'C$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigerCFAFranc: {\n    code: CurrencyCode.NigerCFAFranc,\n    countries: [CountryCode.Niger],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Niger CFA Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CFA',\n    symbol_native: 'CFA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigeriaNaira: {\n    code: CurrencyCode.NigeriaNaira,\n    countries: [CountryCode.Nigeria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nigeria Naira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A6',\n    symbol_native: '\u20A6',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorthKoreaWon: {\n    code: CurrencyCode.NorthKoreaWon,\n    countries: [CountryCode.NorthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'North Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorwayKrone: {\n    code: CurrencyCode.NorwayKrone,\n    countries: [CountryCode.Norway],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Norway Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  OmanRial: {\n    code: CurrencyCode.OmanRial,\n    countries: [CountryCode.Oman],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Oman Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PakistanRupee: {\n    code: CurrencyCode.PakistanRupee,\n    countries: [CountryCode.Pakistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Pakistan Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PanamaBalboa: {\n    code: CurrencyCode.PanamaBalboa,\n    countries: [CountryCode.Panama],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Panama Balboa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'B/.',\n    symbol_native: 'B/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ParaguayGuarani: {\n    code: CurrencyCode.ParaguayGuarani,\n    countries: [CountryCode.Paraguay],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Paraguay Guarani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Gs',\n    symbol_native: 'Gs',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PeruvianNuevo: {\n    code: CurrencyCode.PeruNuevo,\n    countries: [CountryCode.Peru],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Peruvian Nuevo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S/.',\n    symbol_native: 'S/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PhilippinesPeso: {\n    code: CurrencyCode.PhilippinesPeso,\n    countries: [CountryCode.Philippines],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Philippines Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B1',\n    symbol_native: '\u20B1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PolandZloty: {\n    code: CurrencyCode.PolandZloty,\n    countries: [CountryCode.Poland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Poland Zloty',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'z\u0142',\n    symbol_native: 'z\u0142',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  QatarRial: {\n    code: CurrencyCode.QatarRial,\n    countries: [CountryCode.Qatar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Qatar Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RomaniaNewLeu: {\n    code: CurrencyCode.RomaniaNewLeu,\n    countries: [CountryCode.Romania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Romania New Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'lei',\n    symbol_native: 'lei',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RussiaRuble: {\n    code: CurrencyCode.RussiaRuble,\n    countries: [CountryCode.RussianFederation],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Russia Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BD',\n    symbol_native: '\u20BD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RwandaFranc: {\n    code: CurrencyCode.RwandaFranc,\n    countries: [CountryCode.Rwanda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Rwanda Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RF',\n    symbol_native: 'RF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SaudiArabiaRiyal: {\n    code: CurrencyCode.SaudiArabiaRiyal,\n    countries: [CountryCode.SaudiArabia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Saudi Arabia Riyal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SerbiaDinar: {\n    code: CurrencyCode.SerbiaDinar,\n    countries: [CountryCode.Serbia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Serbia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0414\u0438\u043D.',\n    symbol_native: '\u0414\u0438\u043D.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SeychellesRupee: {\n    code: CurrencyCode.SeychellesRupee,\n    countries: [CountryCode.Seychelles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Seychelles Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SingaporeDollar: {\n    code: CurrencyCode.SingaporeDollar,\n    countries: [CountryCode.Singapore],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Singapore Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SlovakiaKoruna: {\n    code: CurrencyCode.SlovakiaKoruna,\n    countries: [CountryCode.Slovakia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovakia Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Sk',\n    symbol_native: 'Sk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SloveniaTolar: {\n    code: CurrencyCode.SloveniaTolar,\n    countries: [CountryCode.Slovenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovenia Tolar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'SIT',\n    symbol_native: 'SIT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SolomonIslandsDollar: {\n    code: CurrencyCode.SolomonIslandsDollar,\n    countries: [CountryCode.SolomonIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Solomon Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SomaliaShilling: {\n    code: CurrencyCode.SomaliaShilling,\n    countries: [CountryCode.Somalia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Somalia Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S',\n    symbol_native: 'S',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthAfricaRand: {\n    code: CurrencyCode.SouthAfricaRand,\n    countries: [CountryCode.SouthAfrica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'South Africa Rand',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R',\n    symbol_native: 'R',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthKoreaWon: {\n    code: CurrencyCode.SouthKoreaWon,\n    countries: [CountryCode.SouthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'South Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SriLankaRupee: {\n    code: CurrencyCode.SriLankaRupee,\n    countries: [CountryCode.SriLanka],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sri Lanka Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SudanPound: {\n    code: CurrencyCode.SudanPound,\n    countries: [CountryCode.Sudan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sudan Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SurinameDollar: {\n    code: CurrencyCode.SurinameDollar,\n    countries: [CountryCode.Suriname],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Suriname Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwazilandLilangeni: {\n    code: CurrencyCode.SwazilandLilangeni,\n    countries: [CountryCode.Swaziland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Swaziland Lilangeni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'E',\n    symbol_native: 'E',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwedenKrona: {\n    code: CurrencyCode.SwedenKrona,\n    countries: [CountryCode.Sweden],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sweden Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwitzerlandFranc: {\n    code: CurrencyCode.SwitzerlandFranc,\n    countries: [CountryCode.Switzerland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Switzerland Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CHF',\n    symbol_native: 'CHF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SyriaPound: {\n    code: CurrencyCode.SyriaPound,\n    countries: [CountryCode.Syria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Syria Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TaiwanNewDollar: {\n    code: CurrencyCode.TaiwanNewDollar,\n    countries: [CountryCode.Taiwan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Taiwan New Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'NT$',\n    symbol_native: 'NT$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TajikistanSomoni: {\n    code: CurrencyCode.TajikistanSomoni,\n    countries: [CountryCode.Tajikistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tajikistan Somoni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TJS',\n    symbol_native: 'TJS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TanzaniaShilling: {\n    code: CurrencyCode.TanzaniaShilling,\n    countries: [CountryCode.Tanzania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tanzania Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TSh',\n    symbol_native: 'TSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ThailandBaht: {\n    code: CurrencyCode.ThailandBaht,\n    countries: [CountryCode.Thailand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Thailand Baht',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0E3F',\n    symbol_native: '\u0E3F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TunisiaDinar: {\n    code: CurrencyCode.TunisiaDinar,\n    countries: [CountryCode.Tunisia],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Tunisia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062A',\n    symbol_native: '\u062F.\u062A',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkeyLira: {\n    code: CurrencyCode.TurkeyLira,\n    countries: [CountryCode.Turkey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkey Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BA',\n    symbol_native: '\u20BA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkmenistanManat: {\n    code: CurrencyCode.TurkmenistanManat,\n    countries: [CountryCode.Turkmenistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkmenistan Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'm',\n    symbol_native: 'm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UgandaShilling: {\n    code: CurrencyCode.UgandaShilling,\n    countries: [CountryCode.Uganda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Uganda Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'USh',\n    symbol_native: 'USh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UkraineHryvnia: {\n    code: CurrencyCode.UkraineHryvnia,\n    countries: [CountryCode.Ukraine],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ukraine Hryvnia',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B4',\n    symbol_native: '\u20B4',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedArabEmiratesDirham: {\n    code: CurrencyCode.UnitedArabEmiratesDirham,\n    countries: [CountryCode.UnitedArabEmirates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Arab Emirates Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u0625',\n    symbol_native: '\u062F.\u0625',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedKingdomPound: {\n    code: CurrencyCode.UnitedKingdomPound,\n    countries: [CountryCode.UnitedKingdom],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Kingdom Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedStatesDollar: {\n    code: CurrencyCode.UnitedStatesDollar,\n    countries: [CountryCode.UnitedStates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United States Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UruguayPeso: {\n    code: CurrencyCode.UruguayPeso,\n    countries: [CountryCode.Uruguay],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uruguay Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$U',\n    symbol_native: '$U',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UzbekistanSom: {\n    code: CurrencyCode.UzbekistanSom,\n    countries: [CountryCode.Uzbekistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uzbekistan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'UZS',\n    symbol_native: 'UZS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VanuatuVatu: {\n    code: CurrencyCode.VanuatuVatu,\n    countries: [CountryCode.Vanuatu],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vanuatu Vatu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'VT',\n    symbol_native: 'VT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VenezuelaBolivar: {\n    code: CurrencyCode.VenezuelaBolivar,\n    countries: [CountryCode.Venezuela],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Venezuela Bolivar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Bs. F',\n    symbol_native: 'Bs. F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VietnamDong: {\n    code: CurrencyCode.VietnamDong,\n    countries: [CountryCode.Vietnam],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vietnam Dong',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  YemenRial: {\n    code: CurrencyCode.YemenRial,\n    countries: [CountryCode.Yemen],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Yemen Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZambiaKwacha: {\n    code: CurrencyCode.ZambiaKwacha,\n    countries: [CountryCode.Zambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zambia Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'ZK',\n    symbol_native: 'ZK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZimbabweDollar: {\n    code: CurrencyCode.ZimbabweDollar,\n    countries: [CountryCode.Zimbabwe],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zimbabwe Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n};\n\nexport enum CryptoCurrency {\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  Litecoin = 'LTC',\n  Ripple = 'XRP',\n  Dash = 'DASH',\n  Zcash = 'ZEC',\n  Dogecoin = 'DOGE',\n  Monero = 'XMR',\n  BitcoinCash = 'BCH',\n  EOS = 'EOS',\n  Binance = 'BNB',\n  Stellar = 'XLM',\n  Cardano = 'ADA',\n  IOTA = 'IOTA',\n  Tezos = 'XTZ',\n  NEO = 'NEO',\n  TRON = 'TRX',\n  EOSClassic = 'EOSC',\n  Ontology = 'ONT',\n  VeChain = 'VEN',\n  QTUM = 'QTUM',\n  Lisk = 'LSK',\n  Waves = 'WAVES',\n  OmiseGO = 'OMG',\n  Zilliqa = 'ZIL',\n  BitcoinGold = 'BTG',\n  Decred = 'DCR',\n  Stratis = 'STRAT',\n  Populous = 'PPT',\n  Augur = 'REP',\n  Golem = 'GNT',\n  Siacoin = 'SC',\n  BasicAttentionToken = 'BAT',\n  ZCoin = 'XZC',\n  StratisHedged = 'SNT',\n  VeChainHedged = 'VEN',\n  PowerLedger = 'POWR',\n  WavesHedged = 'WAVE',\n  ZilliqaHedged = 'ZRX',\n  BitcoinDiamond = 'BCD',\n  DigiByte = 'DGB',\n  DigiByteHedged = 'DGB',\n  Bytecoin = 'BCN',\n  BytecoinHedged = 'BCN',\n}\n", "export enum LanguageCode {\n  Afrikaans = 'af',\n  Albanian = 'sq',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Armenian = 'hy',\n  Azerbaijani = 'az',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  Belarusian = 'be',\n  Bengali = 'bn',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  Bihari = 'bh',\n  Bislama = 'bi',\n  Bosnian = 'bs',\n  Breten = 'br',\n  Bulgarian = 'bg',\n  Burmese = 'my',\n  Cantonese = 'yue',\n  Catalan = 'ca',\n  Chinese = 'zh',\n  Chuvash = 'cv',\n  Corsican = 'co',\n  Croatian = 'hr',\n  Czech = 'cs',\n  Danish = 'da',\n  Dari = 'prs',\n  Divehi = 'dv',\n  Dutch = 'nl',\n  English = 'en',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  Faroese = 'fo',\n  Farsi = 'fa',\n  Filipino = 'fil',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Galician = 'gl',\n  Georgian = 'ka',\n  German = 'de',\n  Greek = 'el',\n  Greenlandic = 'kl',\n  Gujarati = 'gu',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  Hebrew = 'he',\n  Hindi = 'hi',\n  Hungarian = 'hu',\n  Icelandic = 'is',\n  Igbo = 'ig',\n  Indonesian = 'id',\n  Irish = 'ga',\n  Italian = 'it',\n  Japanese = 'ja',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Komi = 'kv',\n  Konkani = 'kok',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Lao = 'lo',\n  Latin = 'la',\n  Latvian = 'lv',\n  Lithuanian = 'lt',\n  Luxembourgish = 'lb',\n  Ossetian = 'os',\n  Macedonian = 'mk',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  Malayalam = 'ml',\n  Maltese = 'mt',\n  Maori = 'mi',\n  Marathi = 'mr',\n  Mari = 'mhr',\n  Mongolian = 'mn',\n  Montenegrin = 'me',\n  Nepali = 'ne',\n  NorthernSotho = 'nso',\n  Norwegian = 'no',\n  NorwegianBokmal = 'nb',\n  NorwegianNynorsk = 'nn',\n  Oriya = 'or',\n  Pashto = 'ps',\n  Persian = 'fa',\n  Polish = 'pl',\n  Portuguese = 'pt',\n  Punjabi = 'pa',\n  Quechua = 'qu',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Sakha = 'sah',\n  Sami = 'se',\n  Samoan = 'sm',\n  Sanskrit = 'sa',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianCyrillic = 'sr-Cyrl',\n  Sesotho = 'st',\n  Shona = 'sn',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Somali = 'so',\n  Spanish = 'es',\n  Sudanese = 'su',\n  Sutu = 'sx',\n  Swahili = 'sw',\n  Swedish = 'sv',\n  Syriac = 'syr',\n  Tagalog = 'tl',\n  Tajik = 'tg',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  Tatar = 'tt',\n  Telugu = 'te',\n  Thai = 'th',\n  Tibetan = 'bo',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  Turkish = 'tr',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Welsh = 'cy',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  Zulu = 'zu',\n}\n\nexport type Language = {\n  code: LanguageCode;\n  name: string;\n  native_name: string;\n};\n", "import { LanguageCode } from '../language';\nimport { CountryCode } from './country';\n\n/**\n * Locale code in form of `[language]-[region]-[variant]`\n *\n * @example\n * ```\n * const localeCode: Locale.EnglishUnitedStates = 'en-US'\n * ```\n *\n */\nexport enum LocaleCode {\n  Afrikaans = 'af',\n  AfrikaansSouthAfrica = 'af-ZA',\n  Albanian = 'sq',\n  AlbanianAlbania = 'sq-AL',\n  Amharic = 'am',\n  AmharicEthiopia = 'am-ET',\n  Arabic = 'ar',\n  ArabicAlgeria = 'ar-DZ',\n  ArabicBahrain = 'ar-BH',\n  ArabicEgypt = 'ar-EG',\n  ArabicIraq = 'ar-IQ',\n  ArabicJordan = 'ar-JO',\n  ArabicKuwait = 'ar-KW',\n  ArabicLebanon = 'ar-LB',\n  ArabicLibya = 'ar-LY',\n  ArabicMorocco = 'ar-MA',\n  ArabicOman = 'ar-OM',\n  ArabicQatar = 'ar-QA',\n  ArabicSaudiArabia = 'ar-SA',\n  ArabicSyria = 'ar-SY',\n  ArabicTunisia = 'ar-TN',\n  ArabicUnitedArabEmirates = 'ar-AE',\n  ArabicYemen = 'ar-YE',\n  Armenian = 'hy',\n  ArmenianArmenia = 'hy-AM',\n  Azerbaijani = 'az',\n  AzerbaijaniAzerbaijan = 'az-AZ',\n  AzerbaijaniCyrillicAzerbaijan = 'az-Cyrl-AZ',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  BasqueSpain = 'eu-ES',\n  Belarusian = 'be',\n  BelarusianBelarus = 'be-BY',\n  Bengali = 'bn',\n  BengaliBangladesh = 'bn-BD',\n  BengaliIndia = 'bn-IN',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  BhutaniBhutan = 'dz-BT',\n  Bosnian = 'bs',\n  BosnianBosniaAndHerzegovina = 'bs-BA',\n  Breton = 'br',\n  Bulgarian = 'bg',\n  BulgarianBosniaAndHerzegovina = 'bg-BG',\n  BulgarianBulgaria = 'bg-BG',\n  Burmese = 'my',\n  BurmeseMyanmar = 'my-MM',\n  Cantonese = 'yue',\n  CantoneseHongKong = 'yue-HK',\n  Catalan = 'ca',\n  CatalanSpain = 'ca-ES',\n  Chechen = 'ce',\n  Cherokee = 'chr',\n  Chinese = 'zh',\n  ChineseSimplified = 'zh-Hans',\n  ChineseSimplifiedChina = 'zh-Hans-CN',\n  ChineseSimplifiedHongKong = 'zh-Hans-HK',\n  ChineseSimplifiedMacau = 'zh-Hans-MO',\n  ChineseSimplifiedSingapore = 'zh-Hans-SG',\n  ChineseTraditional = 'zh-Hant',\n  ChineseTraditionalHongKong = 'zh-Hant-HK',\n  ChineseTraditionalMacau = 'zh-Hant-MO',\n  ChineseTraditionalSingapore = 'zh-Hant-SG',\n  ChineseTraditionalTaiwan = 'zh-Hant-TW',\n  Chuvash = 'cv',\n  CorsicanFrance = 'co-FR',\n  Croatian = 'hr',\n  CroatianBosniaAndHerzegovina = 'hr-BA',\n  CroatianCroatia = 'hr-HR',\n  Czech = 'cs',\n  CzechCzechRepublic = 'cs-CZ',\n  Danish = 'da',\n  DanishDenmark = 'da-DK',\n  Dari = 'prs',\n  DariAfghanistan = 'prs-AF',\n  Divehi = 'dv',\n  DivehiMaldives = 'dv-MV',\n  Dutch = 'nl',\n  DutchBelgium = 'nl-BE',\n  DutchNetherlands = 'nl-NL',\n  English = 'en',\n  EnglishAustralia = 'en-AU',\n  EnglishBelgium = 'en-BE',\n  EnglishBelize = 'en-BZ',\n  EnglishCanada = 'en-CA',\n  EnglishCaribbean = 'en-029',\n  EnglishIreland = 'en-IE',\n  EnglishJamaica = 'en-JM',\n  EnglishNewZealand = 'en-NZ',\n  EnglishPhilippines = 'en-PH',\n  EnglishSingapore = 'en-SG',\n  EnglishSouthAfrica = 'en-ZA',\n  EnglishTrinidadAndTobago = 'en-TT',\n  EnglishUnitedKingdom = 'en-GB',\n  EnglishUnitedStates = 'en-US',\n  EnglishZimbabwe = 'en-ZW',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  EstonianEstonia = 'et-EE',\n  Faroese = 'fo',\n  FaroeseFaroeIslands = 'fo-FO',\n  Farsi = 'fa',\n  FarsiIran = 'fa-IR',\n  Filipino = 'fil',\n  FilipinoPhilippines = 'fil-PH',\n  Finnish = 'fi',\n  FinnishFinland = 'fi-FI',\n  French = 'fr',\n  FrenchBelgium = 'fr-BE',\n  FrenchCanada = 'fr-CA',\n  FrenchFrance = 'fr-FR',\n  FrenchLuxembourg = 'fr-LU',\n  FrenchMonaco = 'fr-MC',\n  FrenchReunion = 'fr-RE',\n  FrenchSwitzerland = 'fr-CH',\n  Frisian = 'fy',\n  FrisianNetherlands = 'fy-NL',\n  Galician = 'gl',\n  GalicianSpain = 'gl-ES',\n  Georgian = 'ka',\n  GeorgianGeorgia = 'ka-GE',\n  German = 'de',\n  GermanAustria = 'de-AT',\n  GermanBelgium = 'de-BE',\n  GermanGermany = 'de-DE',\n  GermanLiechtenstein = 'de-LI',\n  GermanLuxembourg = 'de-LU',\n  GermanSwitzerland = 'de-CH',\n  Greenlandic = 'kl',\n  GreenlandicGreenland = 'kl-GL',\n  Greek = 'el',\n  GreekGreece = 'el-GR',\n  Gujarati = 'gu',\n  GujaratiIndia = 'gu-IN',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  HausaGhana = 'ha-GH',\n  HausaNiger = 'ha-NE',\n  HausaNigeria = 'ha-NG',\n  Hebrew = 'he',\n  HebrewIsrael = 'he-IL',\n  Hindi = 'hi',\n  HindiIndia = 'hi-IN',\n  Hungarian = 'hu',\n  HungarianHungary = 'hu-HU',\n  Icelandic = 'is',\n  IcelandicIceland = 'is-IS',\n  Igbo = 'ig',\n  IgboNigeria = 'ig-NG',\n  Indonesian = 'id',\n  IndonesianIndonesia = 'id-ID',\n  Irish = 'ga',\n  IrishIreland = 'ga-IE',\n  Italian = 'it',\n  ItalianItaly = 'it-IT',\n  ItalianSwitzerland = 'it-CH',\n  Japanese = 'ja',\n  JapaneseJapan = 'ja-JP',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  KannadaIndia = 'kn-IN',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  KazakhKazakhstan = 'kk-KZ',\n  Khmer = 'km',\n  KhmerCambodia = 'km-KH',\n  KinyarwandaRwanda = 'rw-RW',\n  Komi = 'kv',\n  Konkani = 'kok',\n  KonkaniIndia = 'kok-IN',\n  Korean = 'ko',\n  KoreanSouthKorea = 'ko-KR',\n  Kurdish = 'ku',\n  KurdishIraq = 'ku-IQ',\n  KurdishTurkey = 'ku-TR',\n  Kyrgyz = 'ky',\n  KyrgyzKyrgyzstan = 'ky-KG',\n  Lao = 'lo',\n  LaoLaos = 'lo-LA',\n  Latin = 'la',\n  Latvian = 'lv',\n  LatvianLatvia = 'lv-LV',\n  Lithuanian = 'lt',\n  LithuanianLithuania = 'lt-LT',\n  Luxembourgish = 'lb',\n  LuxembourgishBelgium = 'lb-LU',\n  LuxembourgishLuxembourg = 'lb-LU',\n  Macedonian = 'mk',\n  MacedonianNorthMacedonia = 'mk-MK',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  MalayBrunei = 'ms-BN',\n  MalayIndia = 'ms-IN',\n  MalayMalaysia = 'ms-MY',\n  MalaySingapore = 'ms-SG',\n  Malayalam = 'ml',\n  MalayalamIndia = 'ml-IN',\n  Maltese = 'mt',\n  MalteseMalta = 'mt-MT',\n  Maori = 'mi',\n  MaoriNewZealand = 'mi-NZ',\n  Marathi = 'mr',\n  MarathiIndia = 'mr-IN',\n  Mari = 'chm',\n  Mongolian = 'mn',\n  MongolianMongolia = 'mn-MN',\n  Montenegrin = 'me',\n  MontenegrinMontenegro = 'me-ME',\n  Nepali = 'ne',\n  NepaliNepal = 'ne-NP',\n  NorthernSotho = 'ns',\n  NorthernSothoSouthAfrica = 'ns-ZA',\n  Norwegian = 'nb',\n  NorwegianBokmalNorway = 'nb-NO',\n  NorwegianNynorskNorway = 'nn-NO',\n  Oriya = 'or',\n  OriyaIndia = 'or-IN',\n  Ossetian = 'os',\n  Pashto = 'ps',\n  PashtoAfghanistan = 'ps-AF',\n  Persian = 'fa',\n  PersianIran = 'fa-IR',\n  Polish = 'pl',\n  PolishPoland = 'pl-PL',\n  Portuguese = 'pt',\n  PortugueseBrazil = 'pt-BR',\n  PortuguesePortugal = 'pt-PT',\n  Punjabi = 'pa',\n  PunjabiIndia = 'pa-IN',\n  PunjabiPakistan = 'pa-PK',\n  Quechua = 'qu',\n  QuechuaBolivia = 'qu-BO',\n  QuechuaEcuador = 'qu-EC',\n  QuechuaPeru = 'qu-PE',\n  Romanian = 'ro',\n  RomanianRomania = 'ro-RO',\n  Russian = 'ru',\n  RussianKazakhstan = 'ru-KZ',\n  RussianKyrgyzstan = 'ru-KG',\n  RussianRussia = 'ru-RU',\n  RussianUkraine = 'ru-UA',\n  Sakha = 'sah',\n  Sanskrit = 'sa',\n  SanskritIndia = 'sa-IN',\n  Sami = 'se',\n  SamiNorway = 'se-NO',\n  SamiSweden = 'se-SE',\n  SamiFinland = 'se-FI',\n  Samoan = 'sm',\n  SamoanSamoa = 'sm-WS',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianBosniaAndHerzegovina = 'sr-BA',\n  SerbianSerbiaAndMontenegro = 'sr-SP',\n  SerbianCyrillic = 'sr-SP-Cyrl',\n  SerbianCyrillicBosniaAndHerzegovina = 'sr-Cyrl-BA',\n  SerbianCyrillicSerbiaAndMontenegro = 'sr-Cyrl-SP',\n  Sesotho = 'st',\n  SesothoSouthAfrica = 'st-ZA',\n  Shona = 'sn',\n  ShonaZimbabwe = 'sn-ZW',\n  Sindhi = 'sd',\n  SindhiPakistan = 'sd-PK',\n  Sinhala = 'si',\n  SinhalaSriLanka = 'si-LK',\n  Slovak = 'sk',\n  SlovakSlovakia = 'sk-SK',\n  Slovenian = 'sl',\n  SlovenianSlovenia = 'sl-SI',\n  Somali = 'so',\n  SomaliSomalia = 'so-SO',\n  Spanish = 'es',\n  SpanishArgentina = 'es-AR',\n  SpanishBolivia = 'es-BO',\n  SpanishChile = 'es-CL',\n  SpanishColombia = 'es-CO',\n  SpanishCostaRica = 'es-CR',\n  SpanishCuba = 'es-CU',\n  SpanishDominicanRepublic = 'es-DO',\n  SpanishEcuador = 'es-EC',\n  SpanishEquatorialGuinea = 'es-GQ',\n  SpanishElSalvador = 'es-SV',\n  SpanishGuatemala = 'es-GT',\n  SpanishHonduras = 'es-HN',\n  SpanishMexico = 'es-MX',\n  SpanishNicaragua = 'es-NI',\n  SpanishPanama = 'es-PA',\n  SpanishParaguay = 'es-PY',\n  SpanishPeru = 'es-PE',\n  SpanishPuertoRico = 'es-PR',\n  SpanishSpain = 'es-ES',\n  SpanishUnitedStates = 'es-US',\n  SpanishUruguay = 'es-UY',\n  SpanishVenezuela = 'es-VE',\n  Sudanese = 'su',\n  Sutu = 'st',\n  SutuSouthAfrica = 'st-ZA',\n  Swahili = 'sw',\n  SwahiliKenya = 'sw-KE',\n  Swedish = 'sv',\n  SwedishFinland = 'sv-FI',\n  SwedishSweden = 'sv-SE',\n  Syriac = 'syr',\n  SyriacSyria = 'syr-SY',\n  Tajik = 'tg',\n  TajikTajikistan = 'tg-TJ',\n  Tagalog = 'tl',\n  TagalogPhilippines = 'tl-PH',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  TamilIndia = 'ta-IN',\n  Tatar = 'tt',\n  Telugu = 'te',\n  TeluguIndia = 'te-IN',\n  Thai = 'th',\n  ThaiThailand = 'th-TH',\n  Tibetan = 'bo',\n  TibetanBhutan = 'bo-BT',\n  TibetanChina = 'bo-CN',\n  TibetanIndia = 'bo-IN',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  TswanaSouthAfrica = 'tn-ZA',\n  Turkish = 'tr',\n  TurkishTurkey = 'tr-TR',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  UkrainianUkraine = 'uk-UA',\n  Urdu = 'ur',\n  UrduAfghanistan = 'ur-AF',\n  UrduIndia = 'ur-IN',\n  UrduPakistan = 'ur-PK',\n  Uzbek = 'uz',\n  UzbekCyrillic = 'uz-Cyrl-UZ',\n  UzbekLatin = 'uz-Latn-UZ',\n  UzbekUzbekistan = 'uz-UZ',\n  Vietnamese = 'vi',\n  VietnameseVietnam = 'vi-VN',\n  Welsh = 'cy',\n  WelshUnitedKingdom = 'cy-GB',\n  Xhosa = 'xh',\n  XhosaSouthAfrica = 'xh-ZA',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  YorubaNigeria = 'yo-NG',\n  ZhuyinMandarinChina = 'yue-Hant-CN',\n  Zulu = 'zu',\n  ZuluSouthAfrica = 'zu-ZA',\n}\n\nexport type Locale = {\n  country?: {\n    code: CountryCode;\n    name: string;\n    native: string;\n  };\n  id: LocaleCode;\n  language: {\n    code: LanguageCode;\n    name: string;\n    native: string;\n  };\n  name: string;\n  native_name: string;\n  rtl: boolean;\n};\n", "import { TimezoneOffset } from './timezone';\nimport { Timezones } from './timezones';\n\nexport enum TimezoneRegions {\n  AfricaAbidjan = 'Africa/Abidjan',\n  AfricaAccra = 'Africa/Accra',\n  AfricaAddisAbaba = 'Africa/Addis_Ababa',\n  AfricaAlgiers = 'Africa/Algiers',\n  AfricaAsmara = 'Africa/Asmara',\n  AfricaBamako = 'Africa/Bamako',\n  AfricaBangui = 'Africa/Bangui',\n  AfricaBanjul = 'Africa/Banjul',\n  AfricaBissau = 'Africa/Bissau',\n  AfricaBlantyre = 'Africa/Blantyre',\n  AfricaBrazzaville = 'Africa/Brazzaville',\n  AfricaBujumbura = 'Africa/Bujumbura',\n  AfricaCairo = 'Africa/Cairo',\n  AfricaCasablanca = 'Africa/Casablanca',\n  AfricaCeuta = 'Africa/Ceuta',\n  AfricaConakry = 'Africa/Conakry',\n  AfricaDakar = 'Africa/Dakar',\n  AfricaDarEsSalaam = 'Africa/Dar_es_Salaam',\n  AfricaDjibouti = 'Africa/Djibouti',\n  AfricaDouala = 'Africa/Douala',\n  AfricaElAaiun = 'Africa/El_Aaiun',\n  AfricaFreetown = 'Africa/Freetown',\n  AfricaGaborone = 'Africa/Gaborone',\n  AfricaHarare = 'Africa/Harare',\n  AfricaJohannesburg = 'Africa/Johannesburg',\n  AfricaJuba = 'Africa/Juba',\n  AfricaKampala = 'Africa/Kampala',\n  AfricaKhartoum = 'Africa/Khartoum',\n  AfricaKigali = 'Africa/Kigali',\n  AfricaKinshasa = 'Africa/Kinshasa',\n  AfricaLagos = 'Africa/Lagos',\n  AfricaLibreville = 'Africa/Libreville',\n  AfricaLome = 'Africa/Lome',\n  AfricaLuanda = 'Africa/Luanda',\n  AfricaLubumbashi = 'Africa/Lubumbashi',\n  AfricaLusaka = 'Africa/Lusaka',\n  AfricaMalabo = 'Africa/Malabo',\n  AfricaMaputo = 'Africa/Maputo',\n  AfricaMaseru = 'Africa/Maseru',\n  AfricaMbabane = 'Africa/Mbabane',\n  AfricaMogadishu = 'Africa/Mogadishu',\n  AfricaMonrovia = 'Africa/Monrovia',\n  AfricaNairobi = 'Africa/Nairobi',\n  AfricaNdjamena = 'Africa/Ndjamena',\n  AfricaNiamey = 'Africa/Niamey',\n  AfricaNouakchott = 'Africa/Nouakchott',\n  AfricaOuagadougou = 'Africa/Ouagadougou',\n  AfricaPortoNovo = 'Africa/Porto-Novo',\n  AfricaSaoTome = 'Africa/Sao_Tome',\n  AfricaTripoli = 'Africa/Tripoli',\n  AfricaTunis = 'Africa/Tunis',\n  AfricaWindhoek = 'Africa/Windhoek',\n  AmericaAdak = 'America/Adak',\n  AmericaAnchorage = 'America/Anchorage',\n  AmericaAnguilla = 'America/Anguilla',\n  AmericaAntigua = 'America/Antigua',\n  AmericaAraguaina = 'America/Araguaina',\n  AmericaArgentinaBuenosAires = 'America/Argentina/Buenos_Aires',\n  AmericaArgentinaCatamarca = 'America/Argentina/Catamarca',\n  AmericaArgentinaCordoba = 'America/Argentina/Cordoba',\n  AmericaArgentinaJujuy = 'America/Argentina/Jujuy',\n  AmericaArgentinaLaRioja = 'America/Argentina/La_Rioja',\n  AmericaArgentinaMendoza = 'America/Argentina/Mendoza',\n  AmericaArgentinaRioGallegos = 'America/Argentina/Rio_Gallegos',\n  AmericaArgentinaSalta = 'America/Argentina/Salta',\n  AmericaArgentinaSanJuan = 'America/Argentina/San_Juan',\n  AmericaArgentinaSanLuis = 'America/Argentina/San_Luis',\n  AmericaArgentinaTucuman = 'America/Argentina/Tucuman',\n  AmericaArgentinaUshuaia = 'America/Argentina/Ushuaia',\n  AmericaAruba = 'America/Aruba',\n  AmericaAsuncion = 'America/Asuncion',\n  AmericaAtikokan = 'America/Atikokan',\n  AmericaAtka = 'America/Atka',\n  AmericaBahia = 'America/Bahia',\n  AmericaBahiaBanderas = 'America/Bahia_Banderas',\n  AmericaBarbados = 'America/Barbados',\n  AmericaBelem = 'America/Belem',\n  AmericaBelize = 'America/Belize',\n  AmericaBlancSablon = 'America/Blanc-Sablon',\n  AmericaBoaVista = 'America/Boa_Vista',\n  AmericaBogota = 'America/Bogota',\n  AmericaBoise = 'America/Boise',\n  AmericaCambridgeBay = 'America/Cambridge_Bay',\n  AmericaCampoGrande = 'America/Campo_Grande',\n  AmericaCancun = 'America/Cancun',\n  AmericaCaracas = 'America/Caracas',\n  AmericaCayenne = 'America/Cayenne',\n  AmericaCayman = 'America/Cayman',\n  AmericaChicago = 'America/Chicago',\n  AmericaChihuahua = 'America/Chihuahua',\n  AmericaCoralHarbour = 'America/Coral_Harbour',\n  AmericaCordoba = 'America/Cordoba',\n  AmericaCostaRica = 'America/Costa_Rica',\n  AmericaCreston = 'America/Creston',\n  AmericaCuiaba = 'America/Cuiaba',\n  AmericaCuracao = 'America/Curacao',\n  AmericaDanmarkshavn = 'America/Danmarkshavn',\n  AmericaDawson = 'America/Dawson',\n  AmericaDawsonCreek = 'America/Dawson_Creek',\n  AmericaDenver = 'America/Denver',\n  AmericaDetroit = 'America/Detroit',\n  AmericaDominica = 'America/Dominica',\n  AmericaEdmonton = 'America/Edmonton',\n  AmericaEirunepe = 'America/Eirunepe',\n  AmericaElSalvador = 'America/El_Salvador',\n  AmericaFortaleza = 'America/Fortaleza',\n  AmericaGlaceBay = 'America/Glace_Bay',\n  AmericaGodthab = 'America/Godthab',\n  AmericaGooseBay = 'America/Goose_Bay',\n  AmericaGrandTurk = 'America/Grand_Turk',\n  AmericaGrenada = 'America/Grenada',\n  AmericaGuadeloupe = 'America/Guadeloupe',\n  AmericaGuatemala = 'America/Guatemala',\n  AmericaGuayaquil = 'America/Guayaquil',\n  AmericaGuyana = 'America/Guyana',\n  AmericaHalifax = 'America/Halifax',\n  AmericaHavana = 'America/Havana',\n  AmericaHermosillo = 'America/Hermosillo',\n  AmericaIndianaIndianapolis = 'America/Indiana/Indianapolis',\n  AmericaIndianaKnox = 'America/Indiana/Knox',\n  AmericaIndianaMarengo = 'America/Indiana/Marengo',\n  AmericaIndianaPetersburg = 'America/Indiana/Petersburg',\n  AmericaIndianaTellCity = 'America/Indiana/Tell_City',\n  AmericaIndianaVevay = 'America/Indiana/Vevay',\n  AmericaIndianaVincennes = 'America/Indiana/Vincennes',\n  AmericaIndianaWinamac = 'America/Indiana/Winamac',\n  AmericaInuvik = 'America/Inuvik',\n  AmericaIqaluit = 'America/Iqaluit',\n  AmericaJamaica = 'America/Jamaica',\n  AmericaJuneau = 'America/Juneau',\n  AmericaKentuckyLouisville = 'America/Kentucky/Louisville',\n  AmericaKentuckyMonticello = 'America/Kentucky/Monticello',\n  AmericaKralendijk = 'America/Kralendijk',\n  AmericaLaPaz = 'America/La_Paz',\n  AmericaLima = 'America/Lima',\n  AmericaLosAngeles = 'America/Los_Angeles',\n  AmericaLouisville = 'America/Louisville',\n  AmericaLowerPrinces = 'America/Lower_Princes',\n  AmericaMaceio = 'America/Maceio',\n  AmericaManagua = 'America/Managua',\n  AmericaManaus = 'America/Manaus',\n  AmericaMarigot = 'America/Marigot',\n  AmericaMartinique = 'America/Martinique',\n  AmericaMatamoros = 'America/Matamoros',\n  AmericaMazatlan = 'America/Mazatlan',\n  AmericaMenominee = 'America/Menominee',\n  AmericaMerida = 'America/Merida',\n  AmericaMetlakatla = 'America/Metlakatla',\n  AmericaMexicoCity = 'America/Mexico_City',\n  AmericaMiquelon = 'America/Miquelon',\n  AmericaMoncton = 'America/Moncton',\n  AmericaMonterrey = 'America/Monterrey',\n  AmericaMontevideo = 'America/Montevideo',\n  AmericaMontserrat = 'America/Montserrat',\n  AmericaMontreal = 'America/Montreal',\n  AmericaNassau = 'America/Nassau',\n  AmericaNewYork = 'America/New_York',\n  AmericaNipigon = 'America/Nipigon',\n  AmericaNome = 'America/Nome',\n  AmericaNoronha = 'America/Noronha',\n  AmericaNorthDakotaBeulah = 'America/North_Dakota/Beulah',\n  AmericaNorthDakotaCenter = 'America/North_Dakota/Center',\n  AmericaNorthDakotaNewSalem = 'America/North_Dakota/New_Salem',\n  AmericaOjinaga = 'America/Ojinaga',\n  AmericaPanama = 'America/Panama',\n  AmericaPangnirtung = 'America/Pangnirtung',\n  AmericaParamaribo = 'America/Paramaribo',\n  AmericaPhoenix = 'America/Phoenix',\n  AmericaPortAuPrince = 'America/Port-au-Prince',\n  AmericaPortOfSpain = 'America/Port_of_Spain',\n  AmericaPortoVelho = 'America/Porto_Velho',\n  AmericaPuertoRico = 'America/Puerto_Rico',\n  AmericaRainyRiver = 'America/Rainy_River',\n  AmericaRankinInlet = 'America/Rankin_Inlet',\n  AmericaRecife = 'America/Recife',\n  AmericaRegina = 'America/Regina',\n  AmericaResolute = 'America/Resolute',\n  AmericaRioBranco = 'America/Rio_Branco',\n  AmericaSantaIsabel = 'America/Santa_Isabel',\n  AmericaSantarem = 'America/Santarem',\n  AmericaSantiago = 'America/Santiago',\n  AmericaSantoDomingo = 'America/Santo_Domingo',\n  AmericaSaoPaulo = 'America/Sao_Paulo',\n  AmericaScoresbysund = 'America/Scoresbysund',\n  AmericaShiprock = 'America/Shiprock',\n  AmericaSitka = 'America/Sitka',\n  AmericaStBarthelemy = 'America/St_Barthelemy',\n  AmericaStJohns = 'America/St_Johns',\n  AmericaStKitts = 'America/St_Kitts',\n  AmericaStLucia = 'America/St_Lucia',\n  AmericaStThomas = 'America/St_Thomas',\n  AmericaStVincent = 'America/St_Vincent',\n  AmericaSwiftCurrent = 'America/Swift_Current',\n  AmericaTegucigalpa = 'America/Tegucigalpa',\n  AmericaThule = 'America/Thule',\n  AmericaThunderBay = 'America/Thunder_Bay',\n  AmericaTijuana = 'America/Tijuana',\n  AmericaToronto = 'America/Toronto',\n  AmericaTortola = 'America/Tortola',\n  AmericaVancouver = 'America/Vancouver',\n  AmericaWhitehorse = 'America/Whitehorse',\n  AmericaWinnipeg = 'America/Winnipeg',\n  AmericaYakutat = 'America/Yakutat',\n  AmericaYellowknife = 'America/Yellowknife',\n  AntarcticaCasey = 'Antarctica/Casey',\n  AntarcticaDavis = 'Antarctica/Davis',\n  AntarcticaDumontDUrville = 'Antarctica/DumontDUrville',\n  AntarcticaMacquarie = 'Antarctica/Macquarie',\n  AntarcticaMawson = 'Antarctica/Mawson',\n  AntarcticaMcMurdo = 'Antarctica/McMurdo',\n  AntarcticaPalmer = 'Antarctica/Palmer',\n  AntarcticaRothera = 'Antarctica/Rothera',\n  AntarcticaSyowa = 'Antarctica/Syowa',\n  AntarcticaTroll = 'Antarctica/Troll',\n  AntarcticaVostok = 'Antarctica/Vostok',\n  ArcticLongyearbyen = 'Arctic/Longyearbyen',\n  AsiaAden = 'Asia/Aden',\n  AsiaAlmaty = 'Asia/Almaty',\n  AsiaAmman = 'Asia/Amman',\n  AsiaAnadyr = 'Asia/Anadyr',\n  AsiaAqtau = 'Asia/Aqtau',\n  AsiaAqtobe = 'Asia/Aqtobe',\n  AsiaAshgabat = 'Asia/Ashgabat',\n  AsiaBaghdad = 'Asia/Baghdad',\n  AsiaBahrain = 'Asia/Bahrain',\n  AsiaBaku = 'Asia/Baku',\n  AsiaBangkok = 'Asia/Bangkok',\n  AsiaBarnaul = 'Asia/Barnaul',\n  AsiaBeirut = 'Asia/Beirut',\n  AsiaBishkek = 'Asia/Bishkek',\n  AsiaBrunei = 'Asia/Brunei',\n  AsiaChita = 'Asia/Chita',\n  AsiaChoibalsan = 'Asia/Choibalsan',\n  AsiaColombo = 'Asia/Colombo',\n  AsiaDamascus = 'Asia/Damascus',\n  AsiaDhaka = 'Asia/Dhaka',\n  AsiaDili = 'Asia/Dili',\n  AsiaDubai = 'Asia/Dubai',\n  AsiaDushanbe = 'Asia/Dushanbe',\n  AsiaFamagusta = 'Asia/Famagusta',\n  AsiaGaza = 'Asia/Gaza',\n  AsiaHebron = 'Asia/Hebron',\n  AsiaHoChiMinh = 'Asia/Ho_Chi_Minh',\n  AsiaHongKong = 'Asia/Hong_Kong',\n  AsiaHovd = 'Asia/Hovd',\n  AsiaIrkutsk = 'Asia/Irkutsk',\n  AsiaJakarta = 'Asia/Jakarta',\n  AsiaJayapura = 'Asia/Jayapura',\n  AsiaJerusalem = 'Asia/Jerusalem',\n  AsiaKabul = 'Asia/Kabul',\n  AsiaKamchatka = 'Asia/Kamchatka',\n  AsiaKarachi = 'Asia/Karachi',\n  AsiaKathmandu = 'Asia/Kathmandu',\n  AsiaKhandyga = 'Asia/Khandyga',\n  AsiaKolkata = 'Asia/Kolkata',\n  AsiaKrasnoyarsk = 'Asia/Krasnoyarsk',\n  AsiaKualaLumpur = 'Asia/Kuala_Lumpur',\n  AsiaKuching = 'Asia/Kuching',\n  AsiaKuwait = 'Asia/Kuwait',\n  AsiaMacau = 'Asia/Macau',\n  AsiaMagadan = 'Asia/Magadan',\n  AsiaMakassar = 'Asia/Makassar',\n  AsiaManila = 'Asia/Manila',\n  AsiaMuscat = 'Asia/Muscat',\n  AsiaNicosia = 'Asia/Nicosia',\n  AsiaNovokuznetsk = 'Asia/Novokuznetsk',\n  AsiaNovosibirsk = 'Asia/Novosibirsk',\n  AsiaOmsk = 'Asia/Omsk',\n  AsiaOral = 'Asia/Oral',\n  AsiaPhnomPenh = 'Asia/Phnom_Penh',\n  AsiaPontianak = 'Asia/Pontianak',\n  AsiaPyongyang = 'Asia/Pyongyang',\n  AsiaQatar = 'Asia/Qatar',\n  AsiaQyzylorda = 'Asia/Qyzylorda',\n  AsiaRangoon = 'Asia/Rangoon',\n  AsiaRiyadh = 'Asia/Riyadh',\n  AsiaSakhalin = 'Asia/Sakhalin',\n  AsiaSamarkand = 'Asia/Samarkand',\n  AsiaSeoul = 'Asia/Seoul',\n  AsiaShanghai = 'Asia/Shanghai',\n  AsiaSingapore = 'Asia/Singapore',\n  AsiaSrednekolymsk = 'Asia/Srednekolymsk',\n  AsiaTaipei = 'Asia/Taipei',\n  AsiaTashkent = 'Asia/Tashkent',\n  AsiaTbilisi = 'Asia/Tbilisi',\n  AsiaTehran = 'Asia/Tehran',\n  AsiaThimphu = 'Asia/Thimphu',\n  AsiaTokyo = 'Asia/Tokyo',\n  AsiaTomsk = 'Asia/Tomsk',\n  AsiaUlaanbaatar = 'Asia/Ulaanbaatar',\n  AsiaUrumqi = 'Asia/Urumqi',\n  AsiaUstNera = 'Asia/Ust-Nera',\n  AsiaVientiane = 'Asia/Vientiane',\n  AsiaVladivostok = 'Asia/Vladivostok',\n  AsiaYakutsk = 'Asia/Yakutsk',\n  AsiaYekaterinburg = 'Asia/Yekaterinburg',\n  AsiaYerevan = 'Asia/Yerevan',\n  AtlanticAzores = 'Atlantic/Azores',\n  AtlanticBermuda = 'Atlantic/Bermuda',\n  AtlanticCanary = 'Atlantic/Canary',\n  AtlanticCapeVerde = 'Atlantic/Cape_Verde',\n  AtlanticFaroe = 'Atlantic/Faroe',\n  AtlanticMadeira = 'Atlantic/Madeira',\n  AtlanticReykjavik = 'Atlantic/Reykjavik',\n  AtlanticSouthGeorgia = 'Atlantic/South_Georgia',\n  AtlanticStHelena = 'Atlantic/St_Helena',\n  AtlanticStanley = 'Atlantic/Stanley',\n  AustraliaAdelaide = 'Australia/Adelaide',\n  AustraliaBrisbane = 'Australia/Brisbane',\n  AustraliaBrokenHill = 'Australia/Broken_Hill',\n  AustraliaCanberra = 'Australia/Canberra',\n  AustraliaCurrie = 'Australia/Currie',\n  AustraliaDarwin = 'Australia/Darwin',\n  AustraliaEucla = 'Australia/Eucla',\n  AustraliaHobart = 'Australia/Hobart',\n  AustraliaLindeman = 'Australia/Lindeman',\n  AustraliaLordHowe = 'Australia/Lord_Howe',\n  AustraliaMelbourne = 'Australia/Melbourne',\n  AustraliaPerth = 'Australia/Perth',\n  AustraliaSydney = 'Australia/Sydney',\n  EuropeAmsterdam = 'Europe/Amsterdam',\n  EuropeAndorra = 'Europe/Andorra',\n  EuropeAthens = 'Europe/Athens',\n  EuropeBelgrade = 'Europe/Belgrade',\n  EuropeBerlin = 'Europe/Berlin',\n  EuropeBratislava = 'Europe/Bratislava',\n  EuropeBrussels = 'Europe/Brussels',\n  EuropeBucharest = 'Europe/Bucharest',\n  EuropeBudapest = 'Europe/Budapest',\n  EuropeBusingen = 'Europe/Busingen',\n  EuropeChisinau = 'Europe/Chisinau',\n  EuropeCopenhagen = 'Europe/Copenhagen',\n  EuropeDublin = 'Europe/Dublin',\n  EuropeGibraltar = 'Europe/Gibraltar',\n  EuropeGuernsey = 'Europe/Guernsey',\n  EuropeHelsinki = 'Europe/Helsinki',\n  EuropeIsleOfMan = 'Europe/Isle_of_Man',\n  EuropeIstanbul = 'Europe/Istanbul',\n  EuropeJersey = 'Europe/Jersey',\n  EuropeKaliningrad = 'Europe/Kaliningrad',\n  EuropeKiev = 'Europe/Kiev',\n  EuropeKirov = 'Europe/Kirov',\n  EuropeLisbon = 'Europe/Lisbon',\n  EuropeLjubljana = 'Europe/Ljubljana',\n  EuropeLondon = 'Europe/London',\n  EuropeLuxembourg = 'Europe/Luxembourg',\n  EuropeMadrid = 'Europe/Madrid',\n  EuropeMalta = 'Europe/Malta',\n  EuropeMariehamn = 'Europe/Mariehamn',\n  EuropeMinsk = 'Europe/Minsk',\n  EuropeMonaco = 'Europe/Monaco',\n  EuropeMoscow = 'Europe/Moscow',\n  EuropeOslo = 'Europe/Oslo',\n  EuropeParis = 'Europe/Paris',\n  EuropePodgorica = 'Europe/Podgorica',\n  EuropePrague = 'Europe/Prague',\n  EuropeRiga = 'Europe/Riga',\n  EuropeRome = 'Europe/Rome',\n  EuropeSamara = 'Europe/Samara',\n  EuropeSanMarino = 'Europe/San_Marino',\n  EuropeSarajevo = 'Europe/Sarajevo',\n  EuropeSimferopol = 'Europe/Simferopol',\n  EuropeSkopje = 'Europe/Skopje',\n  EuropeSofia = 'Europe/Sofia',\n  EuropeStockholm = 'Europe/Stockholm',\n  EuropeTallinn = 'Europe/Tallinn',\n  EuropeTirane = 'Europe/Tirane',\n  EuropeUzhgorod = 'Europe/Uzhgorod',\n  EuropeVaduz = 'Europe/Vaduz',\n  EuropeVatican = 'Europe/Vatican',\n  EuropeVienna = 'Europe/Vienna',\n  EuropeVilnius = 'Europe/Vilnius',\n  EuropeVolgograd = 'Europe/Volgograd',\n  EuropeWarsaw = 'Europe/Warsaw',\n  EuropeZagreb = 'Europe/Zagreb',\n  EuropeZaporozhye = 'Europe/Zaporozhye',\n  EuropeZurich = 'Europe/Zurich',\n  GMT = 'GMT',\n  IndianAntananarivo = 'Indian/Antananarivo',\n  IndianChagos = 'Indian/Chagos',\n  IndianChristmas = 'Indian/Christmas',\n  IndianCocos = 'Indian/Cocos',\n  IndianComoro = 'Indian/Comoro',\n  IndianKerguelen = 'Indian/Kerguelen',\n  IndianMahe = 'Indian/Mahe',\n  IndianMaldives = 'Indian/Maldives',\n  IndianMauritius = 'Indian/Mauritius',\n  IndianMayotte = 'Indian/Mayotte',\n  IndianReunion = 'Indian/Reunion',\n  PacificApia = 'Pacific/Apia',\n  PacificAuckland = 'Pacific/Auckland',\n  PacificBougainville = 'Pacific/Bougainville',\n  PacificChatham = 'Pacific/Chatham',\n  PacificChuuk = 'Pacific/Chuuk',\n  PacificEaster = 'Pacific/Easter',\n  PacificEfate = 'Pacific/Efate',\n  PacificEnderbury = 'Pacific/Enderbury',\n  PacificFakaofo = 'Pacific/Fakaofo',\n  PacificFiji = 'Pacific/Fiji',\n  PacificFunafuti = 'Pacific/Funafuti',\n  PacificGalapagos = 'Pacific/Galapagos',\n  PacificGambier = 'Pacific/Gambier',\n  PacificGuadalcanal = 'Pacific/Guadalcanal',\n  PacificGuam = 'Pacific/Guam',\n  PacificHonolulu = 'Pacific/Honolulu',\n  PacificJohnston = 'Pacific/Johnston',\n  PacificKiritimati = 'Pacific/Kiritimati',\n  PacificKosrae = 'Pacific/Kosrae',\n  PacificKwajalein = 'Pacific/Kwajalein',\n  PacificMajuro = 'Pacific/Majuro',\n  PacificMarquesas = 'Pacific/Marquesas',\n  PacificMidway = 'Pacific/Midway',\n  PacificNauru = 'Pacific/Nauru',\n  PacificNiue = 'Pacific/Niue',\n  PacificNorfolk = 'Pacific/Norfolk',\n  PacificNoumea = 'Pacific/Noumea',\n  PacificPagoPago = 'Pacific/Pago_Pago',\n  PacificPalau = 'Pacific/Palau',\n  PacificPitcairn = 'Pacific/Pitcairn',\n  PacificPohnpei = 'Pacific/Pohnpei',\n  PacificPonape = 'Pacific/Ponape',\n  PacificPortMoresby = 'Pacific/Port_Moresby',\n  PacificRarotonga = 'Pacific/Rarotonga',\n  PacificSaipan = 'Pacific/Saipan',\n  PacificSamoa = 'Pacific/Samoa',\n  PacificTahiti = 'Pacific/Tahiti',\n  PacificTarawa = 'Pacific/Tarawa',\n  PacificTongatapu = 'Pacific/Tongatapu',\n  PacificTruk = 'Pacific/Truk',\n  PacificWake = 'Pacific/Wake',\n  PacificWallis = 'Pacific/Wallis',\n  PacificYap = 'Pacific/Yap',\n  // USAlaska = 'US/Alaska',\n  // USAleutian = 'US/Aleutian',\n  // USArizona = 'US/Arizona',\n  // USCentral = 'US/Central',\n  // USCentralStandard = 'US/Central Standard',\n  // USCentralDaylight = 'US/Central Daylight',\n  // USEastern = 'US/Eastern',\n  // USEasternStandard = 'US/Eastern Standard',\n  // USEasternDaylight = 'US/Eastern Daylight',\n  // USHawaii = 'US/Hawaii',\n  // USMountain = 'US/Mountain',\n  // USMountainStandard = 'US/Mountain Standard',\n  // USMountainDaylight = 'US/Mountain Daylight',\n  // USPacific = 'US/Pacific',\n  // USPacificStandard = 'US/Pacific Standard',\n  // USPacificDaylight = 'US/Pacific Daylight',\n  // USPacificIsland = 'US/Pacific-Island',\n}\n\nexport type TimezoneRegion = {\n  id: TimezoneRegions;\n  name: string;\n  offset: TimezoneOffset;\n  timezone: Timezones;\n};\n", "import { Timezones } from './timezones';\n\nexport enum TimezoneOffset {\n  UTC_MINUS_12 = 'UTC-12',\n  UTC_MINUS_11_30 = 'UTC-11:30',\n  UTC_MINUS_11 = 'UTC-11',\n  UTC_MINUS_10_30 = 'UTC-10:30',\n  UTC_MINUS_10 = 'UTC-10',\n  UTC_MINUS_9_30 = 'UTC-9:30',\n  UTC_MINUS_9 = 'UTC-09',\n  UTC_MINUS_8_45 = 'UTC-8:45',\n  UTC_MINUS_8 = 'UTC-08',\n  UTC_MINUS_7 = 'UTC-07',\n  UTC_MINUS_6_30 = 'UTC-6:30',\n  UTC_MINUS_6 = 'UTC-06',\n  UTC_MINUS_5_45 = 'UTC-5:45',\n  UTC_MINUS_5_30 = 'UTC-5:30',\n  UTC_MINUS_5 = 'UTC-05',\n  UTC_MINUS_4_30 = 'UTC-4:30',\n  UTC_MINUS_4 = 'UTC-04',\n  UTC_MINUS_3_30 = 'UTC-3:30',\n  UTC_MINUS_3 = 'UTC-03',\n  UTC_MINUS_2_30 = 'UTC-2:30',\n  UTC_MINUS_2 = 'UTC-02',\n  UTC_MINUS_1 = 'UTC-01',\n  UTC_0 = 'UTC+00',\n  UTC_PLUS_1 = 'UTC+01',\n  UTC_PLUS_2 = 'UTC+02',\n  UTC_PLUS_3 = 'UTC+03',\n  UTC_PLUS_3_30 = 'UTC+3:30',\n  UTC_PLUS_4 = 'UTC+04',\n  UTC_PLUS_4_30 = 'UTC+4:30',\n  UTC_PLUS_5 = 'UTC+05',\n  UTC_PLUS_5_30 = 'UTC+5:30',\n  UTC_PLUS_5_45 = 'UTC+5:45',\n  UTC_PLUS_6 = 'UTC+06',\n  UTC_PLUS_6_30 = 'UTC+6:30',\n  UTC_PLUS_7 = 'UTC+07',\n  UTC_PLUS_8 = 'UTC+08',\n  UTC_PLUS_8_45 = 'UTC+8:45',\n  UTC_PLUS_9 = 'UTC+09',\n  UTC_PLUS_9_30 = 'UTC+9:30',\n  UTC_PLUS_10 = 'UTC+10',\n  UTC_PLUS_10_30 = 'UTC+10:30',\n  UTC_PLUS_11 = 'UTC+11',\n  UTC_PLUS_11_30 = 'UTC+11:30',\n  UTC_PLUS_12 = 'UTC+12',\n  UTC_PLUS_12_45 = 'UTC+12:45',\n  UTC_PLUS_13 = 'UTC+13',\n  UTC_PLUS_13_45 = 'UTC+13:45',\n  UTC_PLUS_14 = 'UTC+14',\n}\n\nexport type TimezoneDetails = {\n  dst: {\n    is: boolean;\n    uses: boolean;\n  };\n  id: Timezones;\n  name: string;\n  offset: TimezoneOffset;\n};\n", "import { TimezoneOffset } from './timezone.js';\nimport { TimezoneDetails } from './timezone';\n\nexport enum Timezones {\n  AcreTime = 'ACT',\n  AfghanistanTime = 'AFT',\n  AIXCentralEuropeanTime = 'DFT',\n  AlaskaDaylightTime = 'AKDT',\n  AlaskaStandardTime = 'AKST',\n  AlmaAtaTime = 'ALMT',\n  AmazonSummerTime = 'AMST',\n  AmazonTime = 'AMT',\n  AnadyrTime = 'ANAT',\n  AqtobeTime = 'AQTT',\n  ArabiaStandardTime = 'AST',\n  ArgentinaTime = 'ART',\n  ArmeniaTime = 'AMT',\n  ASEANCommonTime = 'ASEAN',\n  AtlanticDaylightTime = 'ADT',\n  AtlanticStandardTime = 'AST',\n  AustralianCentralDaylightSavingTime = 'ACDT',\n  AustralianCentralStandardTime = 'ACST',\n  AustralianCentralWesternStandardTime = 'ACWST',\n  AustralianEasternDaylightSavingTime = 'AEDT',\n  AustralianEasternStandardTime = 'AEST',\n  AustralianEasternTime = 'AET',\n  AustralianWesternStandardTime = 'AWST',\n  AzerbaijanTime = 'AZT',\n  AzoresStandardTime = 'AZOT',\n  AzoresSummerTime = 'AZOST',\n  BakerIslandTime = 'BIT',\n  BangladeshStandardTime = 'BST',\n  BhutanTime = 'BTT',\n  BoliviaTime = 'BOT',\n  BougainvilleStandardTime = 'BST',\n  BrasiliaSummerTime = 'BRST',\n  BrasiliaTime = 'BRT',\n  BritishIndianOceanTime = 'BIOT',\n  BritishSummerTime = 'BST',\n  BruneiTime = 'BNT',\n  CapeVerdeTime = 'CVT',\n  CentralAfricaTime = 'CAT',\n  CentralDaylightTime = 'CDT',\n  CentralEuropeanSummerTime = 'CEST',\n  CentralEuropeanTime = 'CET',\n  CentralIndonesiaTime = 'WITA',\n  CentralStandardTime = 'CST',\n  CentralTime = 'CT',\n  CentralWesternStandardTime = 'CWST',\n  ChamorroStandardTime = 'CHST',\n  ChathamDaylightTime = 'CHADT',\n  ChathamStandardTime = 'CHAST',\n  ChileStandardTime = 'CLT',\n  ChileSummerTime = 'CLST',\n  ChinaStandardTime = 'CST',\n  ChoibalsanStandardTime = 'CHOT',\n  ChoibalsanSummerTime = 'CHOST',\n  ChristmasIslandTime = 'CXT',\n  ChuukTime = 'CHUT',\n  ClipptertonIslandStandardTime = 'CIST',\n  CocosIslandsTime = 'CCT',\n  ColombiaSummerTime = 'COST',\n  ColombiaTime = 'COT',\n  CookIslandTime = 'CKT',\n  CoordinatedUniversalTime = 'UTC',\n  CubaDaylightTime = 'CDT',\n  CubaStandardTime = 'CST',\n  DavisTime = 'DAVT',\n  DumontDUrvilleTime = 'DDUT',\n  EastAfricaTime = 'EAT',\n  EasterIslandStandardTime = 'EAST',\n  EasterIslandSummerTime = 'EASST',\n  EasternCaribbeanTime = 'ECT',\n  EasternDaylightTime = 'EDT',\n  EasternEuropeanSummerTime = 'EEST',\n  EasternEuropeanTime = 'EET',\n  EasternGreenlandSummerTime = 'EGST',\n  EasternGreenlandTime = 'EGT',\n  EasternIndonesianTime = 'WIT',\n  EasternStandardTime = 'EST',\n  EasternTime = 'ET',\n  EcuadorTime = 'ECT',\n  FalklandIslandsSummerTime = 'FKST',\n  FalklandIslandsTime = 'FKT',\n  FernandoDeNoronhaTime = 'FNT',\n  FijiTime = 'FJT',\n  FrenchGuianaTime = 'GFT',\n  FrenchSouthernAndAntarcticTime = 'TFT',\n  FurtherEasternEuropeanTime = 'FET',\n  GalapagosTime = 'GALT',\n  GambierIslandTime = 'GIT',\n  GambierIslandsTime = 'GAMT',\n  GeorgiaStandardTime = 'GET',\n  GilbertIslandTime = 'GILT',\n  GreenwichMeanTime = 'GMT',\n  GulfStandardTime = 'GST',\n  GuyanaTime = 'GYT',\n  HawaiiAleutianDaylightTime = 'HDT',\n  HawaiiAleutianStandardTime = 'HST',\n  HeardAndMcDonaldIslandsTime = 'HMT',\n  HeureAvanceeDEuropeCentraleTime = 'HAEC',\n  HongKongTime = 'HKT',\n  HovdSummerTime = 'HOVST',\n  HovdTime = 'HOVT',\n  IndianOceanTime = 'IOT',\n  IndianStandardTime = 'IST',\n  IndochinaTime = 'ICT',\n  InternationalDayLineWestTime = 'IDLW',\n  IranDaylightTime = 'IRDT',\n  IranStandardTime = 'IRST',\n  IrishStandardTime = 'IST',\n  IrkutskSummerTime = 'IRKST',\n  IrkutskTime = 'IRKT',\n  IsraelDaylightTime = 'IDT',\n  IsraelStandardTime = 'IST',\n  JapanStandardTime = 'JST',\n  KaliningradTime = 'KALT',\n  KamchatkaTime = 'KAMT',\n  KoreaStandardTime = 'KST',\n  KosraeTime = 'KOST',\n  KrasnoyarskSummerTime = 'KRAST',\n  KrasnoyarskTime = 'KRAT',\n  KyrgyzstanTime = 'KGT',\n  LineIslandsTime = 'LINT',\n  KazakhstanStandardTime = 'KAST',\n  LordHoweStandardTime = 'LHST',\n  LordHoweSummerTime = 'LHST',\n  MacquarieIslandStationTime = 'MIST',\n  MagadanTime = 'MAGT',\n  MalaysiaStandardTime = 'MST',\n  MalaysiaTime = 'MYT',\n  MaldivesTime = 'MVT',\n  MarquesasIslandsTime = 'MART',\n  MarshallIslandsTime = 'MHT',\n  MauritiusTime = 'MUT',\n  MawsonStationTime = 'MAWT',\n  MiddleEuropeanSummerTime = 'MEDT',\n  MiddleEuropeanTime = 'MET',\n  MoscowTime = 'MSK',\n  MountainDaylightTime = 'MDT',\n  MountainStandardTime = 'MST',\n  MyanmarStandardTime = 'MMT',\n  NepalTime = 'NCT',\n  NauruTime = 'NRT',\n  NewCaledoniaTime = 'NCT',\n  NewZealandDaylightTime = 'NZDT',\n  NewZealandStandardTime = 'NZST',\n  NewfoundlandDaylightTime = 'NDT',\n  NewfoundlandStandardTime = 'NST',\n  NewfoundlandTime = 'NT',\n  NiueTime = 'NUT',\n  NorfolkIslandTime = 'NFT',\n  NovosibirskTime = 'NOVT',\n  OmskTime = 'OMST',\n  OralTime = 'ORAT',\n  PacificDaylightTime = 'PDT',\n  PacificStandardTime = 'PST',\n  PakistanStandardTime = 'PKT',\n  PalauTime = 'PWT',\n  PapuaNewGuineaTime = 'PGT',\n  ParaguaySummerTime = 'PYST',\n  ParaguayTime = 'PYT',\n  PeruTime = 'PET',\n  PhilippineStandardTime = 'PHST',\n  PhilippineTime = 'PHT',\n  PhoenixIslandTime = 'PHOT',\n  PitcairnTime = 'PST',\n  PohnpeiStandardTime = 'PONT',\n  ReunionTime = 'RET',\n  RotheraResearchStationTime = 'ROTT',\n  SaintPierreAndMiquelonDaylightTime = 'PMDT',\n  SaintPierreAndMiquelonStandardTime = 'PMST',\n  SakhalinIslandTime = 'SAKT',\n  SamaraTime = 'SAMT',\n  SamoaDaylightTime = 'SDT',\n  SamoaStandardTime = 'SST',\n  SeychellesTime = 'SCT',\n  ShowaStationTime = 'SYOT',\n  SingaporeStandardTime = 'SST',\n  SingaporeTime = 'SGT',\n  SolomonIslandsTime = 'SBT',\n  SouthAfricanStandardTime = 'SAST',\n  SouthGeorgiaAndTheSouthSandwichIslandsTime = 'GST',\n  SrednekolymskTime = 'SRET',\n  SriLankaStandardTime = 'SLST',\n  SurinameTime = 'SRT',\n  TahitiTime = 'TAHT',\n  TajikistanTime = 'TJT',\n  ThailandStandardTime = 'THA',\n  TimorLesteTime = 'TLT',\n  TokelauTime = 'TKT',\n  TongaTime = 'TOT',\n  TurkeyTime = 'TRT',\n  TurkmenistanTime = 'TMT',\n  TuvaluTime = 'TVT',\n  UlaanbaatarStandardTime = 'ULAT',\n  UlaanbaatarSummerTime = 'ULAST',\n  UruguayStandardTime = 'UYT',\n  UruguaySummerTime = 'UYST',\n  UzbekistanTime = 'UZT',\n  VanuatuTime = 'VUT',\n  VenezuelaStandardTime = 'VET',\n  VladivostokTime = 'VLAT',\n  VolgogradTime = 'VOLT',\n  VostokStationTime = 'VOST',\n  WakeIslandTime = 'WAKT',\n  WestAfricaSummerTime = 'WAST',\n  WestAfricaTime = 'WAT',\n  WestGreenlandSummerTime = 'WGST',\n  WestGreenlandTime = 'WGT',\n  WestKazakhstanTime = 'WKT',\n  WesternEuropeanSummerTime = 'WEDT',\n  WesternEuropeanTime = 'WET',\n  WesternIndonesianTime = 'WIT',\n  WesternStandardTime = 'WST',\n  YakutskTime = 'YAKT',\n  YekaterinburgTime = 'YEKT',\n}\n\nexport const AcreTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AcreTime,\n  name: 'Acre Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const AfghanistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AfghanistanTime,\n  name: 'Afghanistan Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const AIXCentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AIXCentralEuropeanTime,\n  name: 'AIX Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const AlaskaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AlaskaDaylightTime,\n  name: 'Alaska Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const AlaskaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlaskaStandardTime,\n  name: 'Alaska Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const AlmaAtaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlmaAtaTime,\n  name: 'Alma-Ata Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const AmazonSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonSummerTime,\n  name: 'Amazon Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AmazonTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonTime,\n  name: 'Amazon Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AnadyrTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AnadyrTime,\n  name: 'Anadyr Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const AqtobeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AqtobeTime,\n  name: 'Aqtobe Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ArabiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArabiaStandardTime,\n  name: 'Arabia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const ArgentinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArgentinaTime,\n  name: 'Argentina Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ArmeniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArmeniaTime,\n  name: 'Armenia Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AtlanticDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AtlanticDaylightTime,\n  name: 'Atlantic Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AtlanticStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AtlanticStandardTime,\n  name: 'Atlantic Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AustralianCentralDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralDaylightSavingTime,\n  name: 'Australian Central Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const AustralianCentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralStandardTime,\n  name: 'Australian Central Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const AustralianCentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralWesternStandardTime,\n  name: 'Australian Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const AustralianEasternDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternDaylightSavingTime,\n  name: 'Australian Eastern Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const AustralianEasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternStandardTime,\n  name: 'Australian Eastern Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianEasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternTime,\n  name: 'Australian Eastern Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianWesternStandardTime,\n  name: 'Australian Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const AzerbaijanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzerbaijanTime,\n  name: 'Azerbaijan Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AzoresStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzoresStandardTime,\n  name: 'Azores Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const AzoresSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AzoresSummerTime,\n  name: 'Azores Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const BakerIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BakerIslandTime,\n  name: 'Baker Island Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const BangladeshStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BangladeshStandardTime,\n  name: 'Bangladesh Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BhutanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BhutanTime,\n  name: 'Bhutan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BoliviaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BoliviaTime,\n  name: 'Bolivia Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const BougainvilleStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BougainvilleStandardTime,\n  name: 'Bougainville Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const BrasiliaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BrasiliaSummerTime,\n  name: 'Brasilia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const BrasiliaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BrasiliaTime,\n  name: 'Brasilia Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const BritishIndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BritishIndianOceanTime,\n  name: 'British Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BritishSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BritishSummerTime,\n  name: 'British Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const BruneiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BruneiTime,\n  name: 'Brunei Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CapeVerdeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CapeVerdeTime,\n  name: 'Cape Verde Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const CentralAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralAfricaTime,\n  name: 'Central Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralDaylightTime,\n  name: 'Central Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanSummerTime,\n  name: 'Central European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanTime,\n  name: 'Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const CentralIndonesiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralIndonesiaTime,\n  name: 'Central Indonesia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralStandardTime,\n  name: 'Central Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const CentralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralTime,\n  name: 'Central Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralWesternStandardTime,\n  name: 'Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const ChamorroStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChamorroStandardTime,\n  name: 'Chamorro Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ChathamDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChathamDaylightTime,\n  name: 'Chatham Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13_45,\n};\n\nexport const ChathamStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChathamStandardTime,\n  name: 'Chatham Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12_45,\n};\n\nexport const ChileStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChileStandardTime,\n  name: 'Chile Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ChileSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChileSummerTime,\n  name: 'Chile Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ChinaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChinaStandardTime,\n  name: 'China Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanStandardTime,\n  name: 'Choibalsan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanSummerTime,\n  name: 'Choibalsan Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const ChristmasIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChristmasIslandTime,\n  name: 'Christmas Island Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const ChuukTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChuukTime,\n  name: 'Chuuk Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ClipptertonIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ClipptertonIslandStandardTime,\n  name: 'Clippterton Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const CocosIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CocosIslandsTime,\n  name: 'Cocos Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const ColombiaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ColombiaSummerTime,\n  name: 'Colombia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ColombiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ColombiaTime,\n  name: 'Colombia Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CookIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CookIslandTime,\n  name: 'Cook Island Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const CoordinatedUniversalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CoordinatedUniversalTime,\n  name: 'Coordinated Universal Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const CubaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CubaDaylightTime,\n  name: 'Cuba Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const CubaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CubaStandardTime,\n  name: 'Cuba Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const DavisTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DavisTime,\n  name: 'Davis Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const DumontDUrvilleTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DumontDUrvilleTime,\n  name: \"Dumont D'Urville Time\",\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const EastAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EastAfricaTime,\n  name: 'East Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasterIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasterIslandStandardTime,\n  name: 'Easter Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const EasterIslandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasterIslandSummerTime,\n  name: 'Easter Island Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternCaribbeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternCaribbeanTime,\n  name: 'Eastern Caribbean Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternDaylightTime,\n  name: 'Eastern Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanSummerTime,\n  name: 'Eastern European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanTime,\n  name: 'Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const EasternGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandSummerTime,\n  name: 'Eastern Greenland Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const EasternGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandTime,\n  name: 'Eastern Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const EasternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternIndonesianTime,\n  name: 'Eastern Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const EasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternStandardTime,\n  name: 'Eastern Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternTime,\n  name: 'Eastern Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EcuadorTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EcuadorTime,\n  name: 'Ecuador Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const FalklandIslandsSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsSummerTime,\n  name: 'Falkland Islands Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FalklandIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsTime,\n  name: 'Falkland Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const FernandoDeNoronhaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FernandoDeNoronhaTime,\n  name: 'Fernando de Noronha Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const FijiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FijiTime,\n  name: 'Fiji Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const FrenchGuianaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchGuianaTime,\n  name: 'French Guiana Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FrenchSouthernAndAntarcticTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchSouthernAndAntarcticTime,\n  name: 'French Southern and Antarctic Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const FurtherEasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FurtherEasternEuropeanTime,\n  name: 'Further Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const GalapagosTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GalapagosTime,\n  name: 'Galapagos Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const GambierIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandTime,\n  name: 'Gambier Island Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GambierIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandsTime,\n  name: 'Gambier Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GeorgiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GeorgiaStandardTime,\n  name: 'Georgia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GilbertIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GilbertIslandTime,\n  name: 'Gilbert Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const GreenwichMeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GreenwichMeanTime,\n  name: 'Greenwich Mean Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const GulfStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GulfStandardTime,\n  name: 'Gulf Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GuyanaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GuyanaTime,\n  name: 'Guyana Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const HawaiiAleutianDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianDaylightTime,\n  name: 'Hawaii-Aleutian Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const HawaiiAleutianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianStandardTime,\n  name: 'Hawaii-Aleutian Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const HeardAndMcDonaldIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HeardAndMcDonaldIslandsTime,\n  name: 'Heard and McDonald Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const HongKongTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HongKongTime,\n  name: 'Hong Kong Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HovdSummerTime,\n  name: 'Hovd Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HovdTime,\n  name: 'Hovd Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const IndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianOceanTime,\n  name: 'Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IndianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianStandardTime,\n  name: 'Indian Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const IndochinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndochinaTime,\n  name: 'Indochina Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const InternationalDayLineWestTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.InternationalDayLineWestTime,\n  name: 'International Day Line West Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const IranDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IranDaylightTime,\n  name: 'Iran Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const IranStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IranStandardTime,\n  name: 'Iran Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3_30,\n};\n\nexport const IrishStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrishStandardTime,\n  name: 'Irish Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const IrkutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrkutskTime,\n  name: 'Irkutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const IsraelDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IsraelDaylightTime,\n  name: 'Israel Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IsraelStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IsraelStandardTime,\n  name: 'Israel Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const JapanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.JapanStandardTime,\n  name: 'Japan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KaliningradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KaliningradTime,\n  name: 'Kaliningrad Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const KamchatkaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KamchatkaTime,\n  name: 'Kamchatka Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const KoreaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KoreaStandardTime,\n  name: 'Korea Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KosraeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KosraeTime,\n  name: 'Kosrae Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const KrasnoyarskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KrasnoyarskTime,\n  name: 'Krasnoyarsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const KyrgyzstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KyrgyzstanTime,\n  name: 'Kyrgyzstan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const LineIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LineIslandsTime,\n  name: 'Line Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_14,\n};\n\nexport const LordHoweStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweStandardTime,\n  name: 'Lord Howe Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const LordHoweSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweSummerTime,\n  name: 'Lord Howe Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MacquarieIslandStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MacquarieIslandStationTime,\n  name: 'Macquarie Island Station Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MagadanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MagadanTime,\n  name: 'Magadan Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MalaysiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaStandardTime,\n  name: 'Malaysia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MalaysiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaTime,\n  name: 'Malaysia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MaldivesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MaldivesTime,\n  name: 'Maldives Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MarquesasIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarquesasIslandsTime,\n  name: 'Marquesas Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const MarshallIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarshallIslandsTime,\n  name: 'Marshall Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MauritiusTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MauritiusTime,\n  name: 'Mauritius Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const MawsonStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MawsonStationTime,\n  name: 'Mawson Station Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MiddleEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanSummerTime,\n  name: 'Middle European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const MiddleEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanTime,\n  name: 'Middle European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const MoscowTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MoscowTime,\n  name: 'Moscow Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const MountainDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainDaylightTime,\n  name: 'Mountain Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const MountainStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainStandardTime,\n  name: 'Mountain Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const MyanmarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MyanmarStandardTime,\n  name: 'Myanmar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const NepalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NepalTime,\n  name: 'Nepal Time',\n  offset: TimezoneOffset.UTC_PLUS_5_45,\n};\n\nexport const NauruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NauruTime,\n  name: 'Nauru Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewCaledoniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewCaledoniaTime,\n  name: 'New Caledonia Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NewZealandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandDaylightTime,\n  name: 'New Zealand Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const NewZealandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandStandardTime,\n  name: 'New Zealand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewfoundlandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewfoundlandDaylightTime,\n  name: 'Newfoundland Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2_30,\n};\n\nexport const NewfoundlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NewfoundlandTime,\n  name: 'Newfoundland Time',\n  offset: TimezoneOffset.UTC_MINUS_3_30,\n};\n\nexport const NiueTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NiueTime,\n  name: 'Niue Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const NorfolkIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NorfolkIslandTime,\n  name: 'Norfolk Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NovosibirskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NovosibirskTime,\n  name: 'Novosibirsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const OmskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OmskTime,\n  name: 'Omsk Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const OralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OralTime,\n  name: 'Oral Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PacificDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificDaylightTime,\n  name: 'Pacific Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const PacificStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificStandardTime,\n  name: 'Pacific Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PakistanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PakistanStandardTime,\n  name: 'Pakistan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PalauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PalauTime,\n  name: 'Palau Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const PapuaNewGuineaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PapuaNewGuineaTime,\n  name: 'Papua New Guinea Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ParaguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguaySummerTime,\n  name: 'Paraguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ParaguayTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguayTime,\n  name: 'Paraguay Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const PeruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PeruTime,\n  name: 'Peru Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const PhilippineStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineStandardTime,\n  name: 'Philippine Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhillipineTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineTime,\n  name: 'Philippine Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhoenixIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhoenixIslandTime,\n  name: 'Phoenix Island Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const PitcairnTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PitcairnTime,\n  name: 'Pitcairn Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PohnpeiStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PohnpeiStandardTime,\n  name: 'Pohnpei Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const ReunionTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ReunionTime,\n  name: 'Reunion Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const RotheraResearchStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.RotheraResearchStationTime,\n  name: 'Rothera Research Station Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SaintPierreAndMiquelonDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonDaylightTime,\n  name: 'Saint Pierre and Miquelon Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SaintPierreAndMiquelonStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonStandardTime,\n  name: 'Saint Pierre and Miquelon Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SakhalinIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SakhalinIslandTime,\n  name: 'Sakhalin Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SamaraTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamaraTime,\n  name: 'Samara Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const SamoaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaDaylightTime,\n  name: 'Samoa Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const SamoaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaStandardTime,\n  name: 'Samoa Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const SeychellesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SeychellesTime,\n  name: 'Seychelles Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const ShowaStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ShowaStationTime,\n  name: 'Showa Station Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const SingaporeStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeStandardTime,\n  name: 'Singapore Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SingaporeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeTime,\n  name: 'Singapore Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SolomonIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SolomonIslandsTime,\n  name: 'Solomon Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SouthAfricanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthAfricanStandardTime,\n  name: 'South African Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const SouthGeorgiaAndTheSouthSandwichIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,\n  name: 'South Georgia and the South Sandwich Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SrednekolymskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SrednekolymskTime,\n  name: 'Srednekolymsk Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SriLankaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SriLankaStandardTime,\n  name: 'Sri Lanka Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const SurinameTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SurinameTime,\n  name: 'Suriname Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const TahitiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TahitiTime,\n  name: 'Tahiti Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const TajikistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TajikistanTime,\n  name: 'Tajikistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ThailandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ThailandStandardTime,\n  name: 'Thailand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const TimorLesteTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TimorLesteTime,\n  name: 'Timor-Leste Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const TokelauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TokelauTime,\n  name: 'Tokelau Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TongaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TongaTime,\n  name: 'Tonga Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TurkeyTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkeyTime,\n  name: 'Turkey Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const TurkmenistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkmenistanTime,\n  name: 'Turkmenistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const TuvaluTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TuvaluTime,\n  name: 'Tuvalu Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const UlaanbaatarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarStandardTime,\n  name: 'Ulaanbaatar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const UlaanbaatarSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarSummerTime,\n  name: 'Ulaanbaatar Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const UruguayStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguayStandardTime,\n  name: 'Uruguay Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const UruguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguaySummerTime,\n  name: 'Uruguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const UzbekistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UzbekistanTime,\n  name: 'Uzbekistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const VanuatuTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VanuatuTime,\n  name: 'Vanuatu Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const VenezuelaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VenezuelaStandardTime,\n  name: 'Venezuela Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const VladivostokTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VladivostokTime,\n  name: 'Vladivostok Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const VolgogradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VolgogradTime,\n  name: 'Volgograd Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const VostokStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VostokStationTime,\n  name: 'Vostok Station Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const WakeIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WakeIslandTime,\n  name: 'Wake Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const WestAfricaSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaSummerTime,\n  name: 'West Africa Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const WestAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaTime,\n  name: 'West Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WestGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandSummerTime,\n  name: 'West Greenland Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const WestGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandTime,\n  name: 'West Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const WestKazakhstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestKazakhstanTime,\n  name: 'West Kazakhstan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const WesternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanSummerTime,\n  name: 'Western European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WesternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanTime,\n  name: 'Western European Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const WesternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternIndonesianTime,\n  name: 'Western Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const WesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternStandardTime,\n  name: 'Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const YakutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YakutskTime,\n  name: 'Yakutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const YekaterinburgTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YekaterinburgTime,\n  name: 'Yekaterinburg Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n", "export enum Region {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n  Polar = 'Polar',\n}\n\nexport enum SubRegion {\n  CentralAmerica = 'Central America',\n  EasternAsia = 'Eastern Asia',\n  EasternEurope = 'Eastern Europe',\n  EasternAfrica = 'Eastern Africa',\n  MiddleAfrica = 'Middle Africa',\n  MiddleEast = 'Middle East',\n  NorthernAfrica = 'Northern Africa',\n  NorthernAmerica = 'Northern America',\n  NorthernEurope = 'Northern Europe',\n  Polynesia = 'Polynesia',\n  SouthAmerica = 'South America',\n  SouthernAfrica = 'Southern Africa',\n  SouthernAsia = 'Southern Asia',\n  SouthernEurope = 'Southern Europe',\n  WesternAfrica = 'Western Africa',\n  WesternAsia = 'Western Asia',\n  WesternEurope = 'Western Europe',\n  WesternAustralia = 'Western Australia',\n}\n", "import { CurrencyCode } from '../currency/index.js';\nimport { LocaleCode } from '../locale/index.js';\nimport { TimezoneRegions } from '../time/region.js';\nimport { TimezoneOffset } from '../time/timezone.js';\nimport { Timezones } from '../time/timezones.js';\nimport { CountryCode } from './country.js';\nimport { Country } from './country';\nimport { Region, SubRegion } from './region.js';\n\nexport const Countries: Record<Country['name']['short'], Country> = {\n  Afghanistan: {\n    i18n: {\n      calling_codes: [93],\n      currencies: [CurrencyCode.AfghanistanAfghani],\n      languages: [\n        LocaleCode.Pashto,\n        LocaleCode.Dari,\n        LocaleCode.Turkmen,\n        LocaleCode.Uzbek,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4_30],\n        regions: [TimezoneRegions.AsiaKabul],\n        timezones: [Timezones.AfghanistanTime],\n      },\n    },\n    id: CountryCode.Afghanistan,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEB',\n        emoji_unicode: 'U+1F1E6 U+1F1EB',\n        svg: 'https://www.countryflags.io/af/flat/64.svg',\n      },\n      tld: ['.af'],\n    },\n    iso: {\n      alpha2: CountryCode.Afghanistan,\n      alpha3: 'AFG',\n      numeric: '004',\n    },\n    name: {\n      alt_spellings: ['AF', 'Af\u0121\u0101nist\u0101n'],\n      demonym: 'Afghan',\n      native: {\n        endonym: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n      },\n      official: 'Islamic Republic of Afghanistan',\n      short: 'Afghanistan',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Afghanistan',\n        [LocaleCode.Albanian]: 'Shqip\u00EBri',\n        [LocaleCode.Amharic]: '\u12A0\u134D\u130B\u1295',\n        [LocaleCode.Arabic]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Basque]: 'Afganist\u00E1n',\n        [LocaleCode.Belarusian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Bengali]: '\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8',\n        [LocaleCode.Berber]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D',\n        [LocaleCode.Bosnian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Breton]: 'Afganistan',\n        [LocaleCode.Bulgarian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Afganistan',\n        [LocaleCode.Chinese]: '\u963F\u5BCC\u6C57',\n        [LocaleCode.Croatian]: 'Afganistan',\n        [LocaleCode.Czech]: 'Afganistan',\n        [LocaleCode.Danish]: 'Afghanistan',\n        [LocaleCode.Dutch]: 'Afghanistan',\n        [LocaleCode.English]: 'Afghanistan',\n        [LocaleCode.Esperanto]: 'Afganistan',\n        [LocaleCode.Estonian]: 'Afganistan',\n        [LocaleCode.Finnish]: 'Afghanistan',\n        [LocaleCode.French]: 'Afghanistan',\n        [LocaleCode.Frisian]: 'Afghanistan',\n        [LocaleCode.Galician]: 'Afganist\u00E1n',\n        [LocaleCode.Georgian]: '\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8',\n        [LocaleCode.German]: 'Afghanistan',\n        [LocaleCode.Greenlandic]: 'Afghanistan',\n        [LocaleCode.Greek]: '\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD',\n        [LocaleCode.Gujarati]: '\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8',\n        [LocaleCode.Haitian]: 'Afghanistan',\n        [LocaleCode.Hausa]: 'Afghanistan',\n        [LocaleCode.Hebrew]: '\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF',\n        [LocaleCode.Hindi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Hungarian]: 'Afganistan',\n        [LocaleCode.Icelandic]: 'Afghanistan',\n        [LocaleCode.Igbo]: 'Afghanistan',\n        [LocaleCode.Indonesian]: 'Afghanistan',\n        [LocaleCode.Irish]: 'Afghanistan',\n        [LocaleCode.Italian]: 'Afghanistan',\n        [LocaleCode.Japanese]: '\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3',\n        [LocaleCode.Javanese]: 'Afghanistan',\n        [LocaleCode.Kannada]: '\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8',\n        [LocaleCode.Kazakh]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780',\n        [LocaleCode.Korean]: '\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4',\n        [LocaleCode.Kurdish]: 'Afghanistan',\n        [LocaleCode.Kyrgyz]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99',\n        [LocaleCode.Latin]: 'Afghanistan',\n        [LocaleCode.Latvian]: 'Afghanistan',\n        [LocaleCode.Lithuanian]: 'Afganistanas',\n        [LocaleCode.Luxembourgish]: 'Afghanistan',\n        [LocaleCode.Macedonian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Malagasy]: 'Afghanistan',\n        [LocaleCode.Malay]: 'Afghanistan',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28',\n        [LocaleCode.Maltese]: 'Afghanistan',\n        [LocaleCode.Maori]: 'Afghanistan',\n        [LocaleCode.Marathi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Mongolian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Nepali]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Norwegian]: 'Afghanistan',\n        [LocaleCode.Pashto]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Persian]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Portuguese]: 'Afghanistan',\n        [LocaleCode.Punjabi]: 'Afghanistan',\n        [LocaleCode.Romanian]: 'Afghanistan',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Russian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Samoan]: 'Afghanistan',\n        [LocaleCode.Sanskrit]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Scots]: 'Afghanistan',\n        [LocaleCode.Serbian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Sesotho]: 'Afghanistan',\n        [LocaleCode.Shona]: 'Afghanistan',\n        [LocaleCode.Sindhi]: 'Afghanistan',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Afganistan',\n        [LocaleCode.Slovenian]: 'Afganistan',\n        [LocaleCode.Somali]: 'Afghanistan',\n        [LocaleCode.Spanish]: 'Afganist\u00E1n',\n        [LocaleCode.Sudanese]: 'Afghanistan',\n        [LocaleCode.Swahili]: 'Afghanistan',\n        [LocaleCode.Swedish]: 'Afghanistan',\n        [LocaleCode.Tagalog]: 'Afghanistan',\n        [LocaleCode.Tajik]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tatar]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tamil]: '\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD',\n        [LocaleCode.Telugu]: '\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D',\n        [LocaleCode.Turkish]: 'Afganistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Urdu]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Vietnamese]: 'Afghanistan',\n        [LocaleCode.Welsh]: 'Afghanistan',\n        [LocaleCode.Xhosa]: 'Afghanistan',\n        [LocaleCode.Yiddish]: 'Afghanistan',\n        [LocaleCode.Yoruba]: 'Afghanistan',\n        [LocaleCode.Zulu]: 'Afghanistan',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Kabul',\n          total: 34100000,\n        },\n      },\n      geography: {\n        area: 652230,\n        region: Region.Asia,\n        sub_region: SubRegion.SouthernAsia,\n      },\n      government: {\n        capital: 'Kabul',\n        type: 'Islamic Emirate',\n      },\n    },\n  },\n  Albania: {\n    i18n: {\n      calling_codes: [355],\n      currencies: [CurrencyCode.AlbaniaLek],\n      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1],\n        regions: [TimezoneRegions.EuropeBrussels],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Albania,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF1',\n        emoji_unicode: 'U+1F1E6 U+1F1F1',\n        svg: 'https://www.countryflags.io/al/flat/64.svg',\n      },\n      tld: ['.al'],\n    },\n    iso: {\n      alpha2: CountryCode.Albania,\n      alpha3: 'ALB',\n      numeric: '008',\n    },\n    name: {\n      alt_spellings: ['AL', 'Shqip\u00EBri', 'Shqip\u00EBria', 'Shqipnia'],\n      demonym: 'Albanian',\n      native: {\n        endonym: 'Shqip\u00EBri',\n      },\n      official: 'Republic of Albania',\n      short: 'Albania',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Albania',\n        [LocaleCode.Albanian]: 'Albania',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1263\u1295\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Albania',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B',\n        [LocaleCode.Bosnian]: 'Albanija',\n        [LocaleCode.Breton]: 'Albania',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Alb\u00E0nia',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u5DF4\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Albanija',\n        [LocaleCode.Czech]: 'Alb\u00E1nie',\n        [LocaleCode.Danish]: 'Albanien',\n        [LocaleCode.Dutch]: 'Albani\u00EB',\n        [LocaleCode.English]: 'Albania',\n        [LocaleCode.Esperanto]: 'Albanio',\n        [LocaleCode.Estonian]: 'Albaania',\n        [LocaleCode.Finnish]: 'Albania',\n        [LocaleCode.French]: 'Albanie',\n        [LocaleCode.Frisian]: 'Albani\u00EB',\n        [LocaleCode.Galician]: 'Alb\u00E2nia',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0',\n        [LocaleCode.German]: 'Albanien',\n        [LocaleCode.Greenlandic]: 'Albania',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Albanais',\n        [LocaleCode.Hausa]: 'Albania',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alb\u00E1nia',\n        [LocaleCode.Icelandic]: 'Alb\u00FAnir',\n        [LocaleCode.Igbo]: 'Albania',\n        [LocaleCode.Indonesian]: 'Albania',\n        [LocaleCode.Irish]: 'Alb\u00E1in',\n        [LocaleCode.Italian]: 'Albania',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30D0\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Albania',\n        [LocaleCode.Kannada]: '\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uBC14\uB2C8\uC544',\n        [LocaleCode.Kurdish]: '\u0622\u0644\u0628\u0627\u0646\u06CC\u0627',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5',\n        [LocaleCode.Latin]: 'Albania',\n        [LocaleCode.Latvian]: 'Alb\u0101nija',\n        [LocaleCode.Lithuanian]: 'Albanija',\n        [LocaleCode.Luxembourgish]: 'Albani\u00EB',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Albania',\n        [LocaleCode.Malay]: 'Albania',\n        [LocaleCode.Malayalam]: '\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E',\n        [LocaleCode.Maltese]: 'Albania',\n        [LocaleCode.Maori]: 'Albania',\n        [LocaleCode.Marathi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Albania',\n        [LocaleCode.Pashto]: '\u0627\u0627\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Persian]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Polish]: 'Albania',\n        [LocaleCode.Portuguese]: 'Alb\u00E2nia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Alb\u0103n',\n        [LocaleCode.Russian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Albania',\n        [LocaleCode.Sanskrit]: 'Albani',\n        [LocaleCode.Scots]: 'Alb\u00E0inia',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Albania',\n        [LocaleCode.Shona]: 'Albania',\n        [LocaleCode.Sindhi]: 'Albania',\n        [LocaleCode.Sinhala]: '\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Alb\u00E1nsko',\n        [LocaleCode.Slovenian]: 'Albanija',\n        [LocaleCode.Somali]: 'Albania',\n        [LocaleCode.Spanish]: 'Albania',\n        [LocaleCode.Sudanese]: 'Albania',\n        [LocaleCode.Swahili]: 'Albania',\n        [LocaleCode.Swedish]: 'Albanien',\n        [LocaleCode.Tagalog]: 'Albania',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Albaniye',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0431\u0430\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Albanie',\n        [LocaleCode.Welsh]: 'Albania',\n        [LocaleCode.Xhosa]: 'Albania',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9',\n        [LocaleCode.Yoruba]: 'Albania',\n        [LocaleCode.Zulu]: 'Albania',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Tirana',\n          total: 2853000,\n        },\n      },\n      geography: {\n        area: 28748,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Tirana',\n        type: 'Republic',\n      },\n    },\n  },\n  Algeria: {\n    i18n: {\n      calling_codes: [213],\n      currencies: [CurrencyCode.AlgeriaDinar],\n      languages: [\n        LocaleCode.Arabic,\n        LocaleCode.French,\n        LocaleCode.Berber,\n        LocaleCode.Tamazight,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.AfricaAlgiers],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n\n    id: CountryCode.Algeria,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE9\uD83C\uDDFF',\n        emoji_unicode: 'U+1F1E9 U+1F1FF',\n        svg: 'https://www.countryflags.io/dz/flat/64.svg',\n      },\n      tld: ['.dz', '.\u062C\u0632\u0627\u0626\u0631'],\n    },\n    iso: {\n      alpha2: CountryCode.Algeria,\n      alpha3: 'DZA',\n      numeric: '012',\n    },\n    name: {\n      alt_spellings: ['DZ', 'Dzayer', 'Alg\u00E9rie'],\n      demonym: 'Algerian',\n      native: {\n        endonym: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n      },\n      official: \"People's Democratic Republic of Algeria\",\n      short: 'Algeria',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Algerije',\n        [LocaleCode.Albanian]: 'Algeria',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1300\u122D\u1235',\n        [LocaleCode.Arabic]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Armenian]: '\u0531\u056C\u0563\u0578\u0580\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Basque]: 'Algeria',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u099C\u09C7\u09B0',\n        [LocaleCode.Berber]: '\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Bhutani]: '\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41',\n        [LocaleCode.Bosnian]: 'Al\u017Eir',\n        [LocaleCode.Breton]: 'Algeria',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Burmese]: '\u1021\u102C\u101B\u1015\u103A',\n        [LocaleCode.Catalan]: 'Alg\u00E8ria',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u53CA\u5229\u4E9A',\n        [LocaleCode.Croatian]: 'Al\u017Eir',\n        [LocaleCode.Czech]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Danish]: 'Algeriet',\n        [LocaleCode.Dutch]: 'Algerije',\n        [LocaleCode.English]: 'Algeria',\n        [LocaleCode.Esperanto]: 'Al\u011Derio',\n        [LocaleCode.Estonian]: 'Al\u017Eira',\n        [LocaleCode.Finnish]: 'Algeria',\n        [LocaleCode.French]: 'Alg\u00E9rie',\n        [LocaleCode.Frisian]: 'Algeri\u00EB',\n        [LocaleCode.Galician]: 'Alxeria',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8',\n        [LocaleCode.German]: 'Algerien',\n        [LocaleCode.Greenlandic]: 'Algeria',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Alg\u00E9rie',\n        [LocaleCode.Hausa]: 'Algeria',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alg\u00E1r',\n        [LocaleCode.Icelandic]: 'Alg\u00FAra',\n        [LocaleCode.Igbo]: 'Algeria',\n        [LocaleCode.Indonesian]: 'Aljir',\n        [LocaleCode.Irish]: 'Alg\u00E9rie',\n        [LocaleCode.Italian]: 'Algeria',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2',\n        [LocaleCode.Javanese]: 'Aljir',\n        [LocaleCode.Kannada]: '\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uC81C\uB9AC',\n        [LocaleCode.Kurdish]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99',\n        [LocaleCode.Latin]: 'Algeria',\n        [LocaleCode.Latvian]: 'Al\u017E\u012Brija',\n        [LocaleCode.Lithuanian]: 'Al\u017Eyras',\n        [LocaleCode.Luxembourgish]: 'Algeria',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Malagasy]: 'Alg\u00E9rie',\n        [LocaleCode.Malay]: 'Aljir',\n        [LocaleCode.Malayalam]: '\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B',\n        [LocaleCode.Maltese]: 'Alg\u00E9rie',\n        [LocaleCode.Maori]: 'Algeria',\n        [LocaleCode.Marathi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Nepali]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Algeria',\n        [LocaleCode.Pashto]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Persian]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628',\n        [LocaleCode.Polish]: 'Algieria',\n        [LocaleCode.Portuguese]: 'Alg\u00E9ria',\n        [LocaleCode.Punjabi]: '\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Algeria',\n        [LocaleCode.Russian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Samoan]: 'Algeria',\n        [LocaleCode.Sanskrit]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Scots]: 'Algeria',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Sesotho]: 'Algeria',\n        [LocaleCode.Shona]: 'Algeria',\n        [LocaleCode.Sindhi]: 'Algeria',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Slovenian]: 'Al\u017Eir',\n        [LocaleCode.Somali]: 'Algeria',\n        [LocaleCode.Spanish]: 'Algeria',\n        [LocaleCode.Sudanese]: 'Aljir',\n        [LocaleCode.Swahili]: 'Aljir',\n        [LocaleCode.Swedish]: 'Algeriet',\n        [LocaleCode.Tagalog]: 'Algeria',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Tamil]: '\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Telugu]: '\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Cezayir',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Urdu]: '\u0622\u0644\u062C\u06CC\u0631',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Vietnamese]: '\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5',\n        [LocaleCode.Welsh]: 'Algeria',\n        [LocaleCode.Xhosa]: 'Algeria',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Algeria',\n        [LocaleCode.Zulu]: 'Algeria',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Oran',\n          total: 37100000,\n        },\n      },\n      geography: {\n        area: 2381740,\n        region: Region.Africa,\n        sub_region: SubRegion.NorthernAfrica,\n      },\n      government: {\n        capital: 'Algiers',\n        type: 'Republic',\n      },\n    },\n  },\n  AmericanSamoa: {\n    i18n: {\n      calling_codes: [1684],\n      currencies: [CurrencyCode.AmericanSamoaTala],\n\n      languages: [LocaleCode.English, LocaleCode.Samoan],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_11],\n        regions: [TimezoneRegions.PacificSamoa],\n        timezones: [Timezones.SamoaStandardTime],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF8',\n        emoji_unicode: 'U+1F1E6 U+1F1F8',\n        svg: 'https://www.countryflags.io/as/flat/64.svg',\n      },\n      tld: ['.as'],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: 'ASM',\n      numeric: '016',\n    },\n    name: {\n      alt_spellings: ['AS', 'Amerika S\u0101moa', 'Amelika S\u0101moa', 'S\u0101moa Amelika'],\n      demonym: 'American Samoan',\n      native: {\n        endonym: 'American Samoa',\n      },\n      official: 'American Samoa',\n      short: 'American Samoa',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Amerikaans Samoa',\n        [LocaleCode.Albanian]: 'Samoa Amerikane',\n        [LocaleCode.Amharic]: '\u1233\u121E\u12A0\u122D',\n        [LocaleCode.Arabic]: '\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Armenian]: '\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Samoa Amerikana',\n        [LocaleCode.Bashkir]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Basque]: 'Samoa Amerikana',\n        [LocaleCode.Belarusian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Bengali]: '\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Bhutani]: '\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D',\n        [LocaleCode.Bosnian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Breton]: 'Samoa Amerikan',\n        [LocaleCode.Bulgarian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C',\n        [LocaleCode.Catalan]: 'Samoa Americana',\n        [LocaleCode.Chinese]: '\u7F8E\u5C5E\u8428\u6469\u4E9A',\n        [LocaleCode.Croatian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Czech]: 'Americk\u00E1 Samoa',\n        [LocaleCode.Danish]: 'Amerikansk Samoa',\n        [LocaleCode.Dutch]: 'Amerikaans Samoa',\n        [LocaleCode.English]: 'American Samoa',\n        [LocaleCode.Esperanto]: 'Samoa Amerika',\n        [LocaleCode.Estonian]: 'Ameerika Samoa',\n        [LocaleCode.Finnish]: 'Amerikka Samoa',\n        [LocaleCode.French]: 'American Samoa',\n        [LocaleCode.Frisian]: 'Amerikaans Samoa',\n        [LocaleCode.Galician]: 'Samoa Americana',\n        [LocaleCode.Georgian]: '\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0',\n        [LocaleCode.German]: 'Amerikanisch-Samoa',\n        [LocaleCode.Greenlandic]: 'Amerikaans Samoa',\n        [LocaleCode.Greek]: '\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Amerikaans Samoa',\n        [LocaleCode.Hausa]: 'Amerikaans Samoa',\n        [LocaleCode.Hebrew]: '\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Hungarian]: 'Amerikai Szamoa',\n        [LocaleCode.Icelandic]: 'Amerikai Szamoa',\n        [LocaleCode.Igbo]: 'Ikina Amerika',\n        [LocaleCode.Indonesian]: 'Samoa Amerika',\n        [LocaleCode.Irish]: 'Samoa Amerikana',\n        [LocaleCode.Italian]: 'Samoa Americane',\n        [LocaleCode.Japanese]: '\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2',\n        [LocaleCode.Javanese]: 'Samoa Amerika',\n        [LocaleCode.Kannada]: '\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86',\n        [LocaleCode.Kazakh]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB',\n        [LocaleCode.Korean]: '\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544',\n        [LocaleCode.Kurdish]: 'Amerikaans Samoa',\n        [LocaleCode.Kyrgyz]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94',\n        [LocaleCode.Latin]: 'Samoa Amerikana',\n        [LocaleCode.Latvian]: 'Amerikas Samoa',\n        [LocaleCode.Lithuanian]: 'Amerikos Samoa',\n        [LocaleCode.Luxembourgish]: 'Amerikaans Samoa',\n        [LocaleCode.Macedonian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Malagasy]: 'Samoa Amerika',\n        [LocaleCode.Malay]: 'Amerika Samo',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06',\n        [LocaleCode.Maltese]: 'Samoa Amerika',\n        [LocaleCode.Maori]: 'Samoa Amerika',\n        [LocaleCode.Marathi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Mongolian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Nepali]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Norwegian]: 'Amerikansk Samoa',\n        [LocaleCode.Pashto]: '\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Persian]: '\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Polish]: 'Samoa Ameryka\u0144skie',\n        [LocaleCode.Portuguese]: 'Samoa Americana',\n        [LocaleCode.Punjabi]: '\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06',\n        [LocaleCode.Romanian]: 'Samoa americane',\n        [LocaleCode.Russian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Samoan]: 'Samoa Amerika',\n        [LocaleCode.Sanskrit]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Scots]: 'Amerikaans Samoa',\n        [LocaleCode.Serbian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Sesotho]: 'Amerikaans Samoa',\n        [LocaleCode.Shona]: 'Amerikaans Samoa',\n        [LocaleCode.Sindhi]: 'Amerikaans Samoa',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0',\n        [LocaleCode.Slovak]: 'Amerikaans Samoa',\n        [LocaleCode.Slovenian]: 'Amerikaans Samoa',\n        [LocaleCode.Somali]: 'Amerikaans Samoa',\n        [LocaleCode.Spanish]: 'Samoa Americana',\n        [LocaleCode.Sudanese]: 'Amerikaans Samoa',\n        [LocaleCode.Swahili]: 'Amerikaans Samoa',\n        [LocaleCode.Swedish]: 'Amerikansk Samoa',\n        [LocaleCode.Tagalog]: 'Amerikaans Samoa',\n        [LocaleCode.Tajik]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E',\n        [LocaleCode.Thai]: '\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40',\n        [LocaleCode.Turkish]: 'Amerikan Samoas\u0131',\n        [LocaleCode.Ukrainian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Vietnamese]: 'Amerikaans Samoa',\n        [LocaleCode.Welsh]: 'Amerikaans Samoa',\n        [LocaleCode.Xhosa]: 'Amerikaans Samoa',\n        [LocaleCode.Yiddish]: 'Amerikaans Samoa',\n        [LocaleCode.Yoruba]: 'Amerikaans Samoa',\n        [LocaleCode.Zulu]: 'Amerikaans Samoa',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Pago Pago',\n          total: 558000,\n        },\n      },\n      geography: {\n        area: 199,\n        region: Region.Oceania,\n        sub_region: SubRegion.Polynesia,\n      },\n      government: {\n        capital: 'Pago Pago',\n        type: 'Nonmetropolitan Territory of the US',\n      },\n    },\n  },\n  Andorra: {\n    i18n: {\n      calling_codes: [376],\n      currencies: [CurrencyCode.Euro],\n      languages: [LocaleCode.Catalan, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.EuropeAndorra],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Andorra,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF4',\n        emoji_unicode: 'U+1F1E6 U+1F1F4',\n        svg: 'https://www.countryflags.io/ad/flat/64.svg',\n      },\n      tld: ['.ad'],\n    },\n    iso: {\n      alpha2: CountryCode.Andorra,\n      alpha3: 'AND',\n      numeric: '020',\n    },\n    name: {\n      alt_spellings: ['AD', 'Principality of Andorra', \"Principat d'Andorra\"],\n      demonym: 'Andorran',\n      native: {\n        endonym: 'Andorra',\n      },\n      official: 'Principality of Andorra',\n      short: 'Andorra',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Andorra',\n        [LocaleCode.Albanian]: 'Andorra',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584',\n        [LocaleCode.Azerbaijani]: 'Andorra',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Basque]: 'Andorra',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Andora',\n        [LocaleCode.Breton]: 'Andorra',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038',\n        [LocaleCode.Catalan]: 'Andorra',\n        [LocaleCode.Chinese]: '\u5B89\u9053\u5C14',\n        [LocaleCode.Croatian]: 'Andora',\n        [LocaleCode.Czech]: 'Andorra',\n        [LocaleCode.Danish]: 'Andorra',\n        [LocaleCode.Dutch]: 'Andorra',\n        [LocaleCode.English]: 'Andorra',\n        [LocaleCode.Esperanto]: 'Andora',\n        [LocaleCode.Estonian]: 'Andorra',\n        [LocaleCode.Finnish]: 'Andorra',\n        [LocaleCode.French]: 'Andorra',\n        [LocaleCode.Frisian]: 'Andorra',\n        [LocaleCode.Galician]: 'Andorra',\n        [LocaleCode.Georgian]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.German]: 'Andorra',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B4\u03CC\u03C1\u03B1',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Hungarian]: 'Andorra',\n        [LocaleCode.Icelandic]: 'Andorra',\n        [LocaleCode.Igbo]: 'Andorra',\n        [LocaleCode.Indonesian]: 'Andorra',\n        [LocaleCode.Irish]: 'Andorra',\n        [LocaleCode.Italian]: 'Andorra',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30C9\u30E9',\n        [LocaleCode.Javanese]: 'Andorra',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6',\n        [LocaleCode.Korean]: '\uC548\uB3C4\uB77C',\n        [LocaleCode.Kurdish]: 'Andorra',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2',\n        [LocaleCode.Latin]: 'Andorra',\n        [LocaleCode.Latvian]: 'Andora',\n        [LocaleCode.Lithuanian]: 'Andora',\n        [LocaleCode.Luxembourgish]: 'Andorra',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Malagasy]: 'Andorra',\n        [LocaleCode.Malay]: 'Andorra',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D',\n        [LocaleCode.Maltese]: 'Andorra',\n        [LocaleCode.Maori]: 'Andorra',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Norwegian]: 'Andorra',\n        [LocaleCode.Pashto]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Polish]: 'Andora',\n        [LocaleCode.Portuguese]: 'Andorra',\n        [LocaleCode.Punjabi]: '\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E',\n        [LocaleCode.Romanian]: 'Andorra',\n        [LocaleCode.Russian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Samoan]: 'Andorra',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Scots]: 'Andorra',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Sesotho]: 'Andorra',\n        [LocaleCode.Shona]: 'Andorra',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DAF\u0DDA',\n        [LocaleCode.Slovak]: 'Andorra',\n        [LocaleCode.Slovenian]: 'Andora',\n        [LocaleCode.Somali]: 'Andorra',\n        [LocaleCode.Spanish]: 'Andorra',\n        [LocaleCode.Sudanese]: 'Andorra',\n        [LocaleCode.Swahili]: 'Andorra',\n        [LocaleCode.Swedish]: 'Andorra',\n        [LocaleCode.Tagalog]: 'Andorra',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Andora',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Urdu]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Vietnamese]: 'Andorra',\n        [LocaleCode.Welsh]: 'Andorra',\n        [LocaleCode.Xhosa]: 'Andorra',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Yoruba]: 'Andorra',\n        [LocaleCode.Zulu]: 'Andorra',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Andorra la Vella',\n          total: 78000,\n        },\n      },\n      geography: {\n        area: 468,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Andorra la Vella',\n        type: 'Constitutional Monarchy',\n      },\n    },\n  },\n  Angola: {\n    i18n: {\n      calling_codes: [244],\n      currencies: [CurrencyCode.AngolaKwanza],\n      languages: [\n        LocaleCode.Portuguese,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Italian,\n        LocaleCode.German,\n        LocaleCode.English,\n      ],\n      tz: {\n        offsets: [\n          TimezoneOffset.UTC_0,\n          TimezoneOffset.UTC_PLUS_1,\n          TimezoneOffset.UTC_PLUS_2,\n        ],\n        regions: [TimezoneRegions.AfricaLuanda],\n        timezones: [Timezones.WestAfricaTime],\n      },\n    },\n    id: CountryCode.Angola,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ao/flat/64.svg',\n      },\n      tld: ['.ao'],\n    },\n    iso: {\n      alpha2: CountryCode.Angola,\n      alpha3: 'AGO',\n      numeric: '024',\n    },\n    name: {\n      alt_spellings: ['AO', 'Rep\u00FAblica de Angola', '\u0281\u025Bpublika de an'],\n      demonym: 'Angolan',\n      native: {\n        endonym: 'Angola',\n      },\n      official: 'Republic of Angola',\n      short: 'Angola',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Angola',\n        [LocaleCode.Albanian]: 'Ang\u00F2la',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u130E\u120A\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561',\n        [LocaleCode.Azerbaijani]: 'Ang\u0259l',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Basque]: 'Angola',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09B2\u09BE',\n        [LocaleCode.Berber]: 'Angola',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n        [LocaleCode.Bosnian]: 'Angola',\n        [LocaleCode.Breton]: 'Angola',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angola',\n        [LocaleCode.Chinese]: '\u5B89\u54E5\u62C9',\n        [LocaleCode.Croatian]: 'Angola',\n        [LocaleCode.Czech]: 'Angola',\n        [LocaleCode.Danish]: 'Angola',\n        [LocaleCode.Dutch]: 'Angola',\n        [LocaleCode.English]: 'Angola',\n        [LocaleCode.Esperanto]: 'Angolo',\n        [LocaleCode.Estonian]: 'Angola',\n        [LocaleCode.Finnish]: 'Angola',\n        [LocaleCode.French]: 'Angola',\n        [LocaleCode.Frisian]: 'Angola',\n        [LocaleCode.Galician]: 'Angola',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0',\n        [LocaleCode.German]: 'Angola',\n        [LocaleCode.Greenlandic]: 'Angola',\n        [LocaleCode.Greek]: '\u0391\u03B3\u03BA\u03CC\u03BB\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Angola',\n        [LocaleCode.Hausa]: 'Angola',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Angola',\n        [LocaleCode.Icelandic]: 'Angola',\n        [LocaleCode.Igbo]: 'Angola',\n        [LocaleCode.Indonesian]: 'Angola',\n        [LocaleCode.Irish]: 'Angola',\n        [LocaleCode.Italian]: 'Angola',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30B4\u30E9',\n        [LocaleCode.Javanese]: 'Anggol',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F',\n        [LocaleCode.Korean]: '\uC559\uACE8\uB77C',\n        [LocaleCode.Kurdish]: 'Angola',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2',\n        [LocaleCode.Latin]: 'Angola',\n        [LocaleCode.Latvian]: 'Angola',\n        [LocaleCode.Lithuanian]: 'Angola',\n        [LocaleCode.Luxembourgish]: 'Angola',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Malagasy]: 'Angola',\n        [LocaleCode.Malay]: 'Angola',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E',\n        [LocaleCode.Maltese]: 'Angola',\n        [LocaleCode.Maori]: 'Angola',\n        [LocaleCode.Marathi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Angola',\n        [LocaleCode.Pashto]: '\u0627\u0646\u06AB\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Angola',\n        [LocaleCode.Portuguese]: 'Angola',\n        [LocaleCode.Punjabi]: '\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Angole',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Samoan]: 'Angola',\n        [LocaleCode.Sanskrit]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Scots]: 'Angola',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Sesotho]: 'Angola',\n        [LocaleCode.Shona]: 'Angola',\n        [LocaleCode.Sindhi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Angola',\n        [LocaleCode.Slovenian]: 'Angola',\n        [LocaleCode.Somali]: 'Angola',\n        [LocaleCode.Spanish]: 'Angola',\n        [LocaleCode.Sudanese]: 'Angola',\n        [LocaleCode.Swahili]: 'Angola',\n        [LocaleCode.Swedish]: 'Angola',\n        [LocaleCode.Tagalog]: 'Angola',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Angola',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: 'Angola',\n        [LocaleCode.Vietnamese]: 'Angola',\n        [LocaleCode.Xhosa]: 'Angola',\n        [LocaleCode.Welsh]: 'Angola',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Yoruba]: 'Angola',\n        [LocaleCode.Zulu]: 'Angola',\n      },\n    },\n  },\n  Anguilla: {\n    i18n: {\n      calling_codes: [1264],\n      currencies: [\n        CurrencyCode.DominicaDollar,\n        CurrencyCode.EastCaribbeanDollar,\n        CurrencyCode.Euro,\n        CurrencyCode.UnitedStatesDollar,\n        CurrencyCode.BritishPound,\n      ],\n      languages: [LocaleCode.English, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_4],\n        regions: [TimezoneRegions.AmericaAnguilla],\n        timezones: [Timezones.AtlanticStandardTime],\n      },\n    },\n    id: CountryCode.Anguilla,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ai/flat/64.svg',\n      },\n      tld: ['.ai'],\n    },\n    iso: {\n      alpha2: CountryCode.Anguilla,\n      alpha3: 'AIA',\n      numeric: '660',\n    },\n    name: {\n      alt_spellings: ['AI'],\n      demonym: 'Anguillian',\n      native: {\n        endonym: 'Anguilla',\n      },\n      official: 'Anguilla',\n      short: 'Anguilla',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Anguilla',\n        [LocaleCode.Albanian]: 'Anguilla',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1309\u120B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0531\u0576\u0563\u056B\u056C\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Basque]: 'Angila',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Angila',\n        [LocaleCode.Breton]: 'Angila',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angilla',\n        [LocaleCode.Chinese]: '\u5B89\u572D\u62C9',\n        [LocaleCode.Croatian]: 'Angila',\n        [LocaleCode.Czech]: 'Anguilla',\n        [LocaleCode.Danish]: 'Anguilla',\n        [LocaleCode.Dutch]: 'Anguilla',\n        [LocaleCode.English]: 'Anguilla',\n        [LocaleCode.Esperanto]: 'Angila',\n        [LocaleCode.Estonian]: 'Anguilla',\n        [LocaleCode.Finnish]: 'Anguilla',\n        [LocaleCode.French]: 'Anguilla',\n        [LocaleCode.Frisian]: 'Angila',\n        [LocaleCode.Galician]: 'Anguilla',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0',\n        [LocaleCode.German]: 'Anguilla',\n        [LocaleCode.Greenlandic]: 'Anguilla',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Anguilla',\n        [LocaleCode.Hausa]: 'Anguilla',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Anguilla',\n        [LocaleCode.Icelandic]: 'Anguilla',\n        [LocaleCode.Igbo]: 'Anguilla',\n        [LocaleCode.Indonesian]: 'Anguilla',\n        [LocaleCode.Irish]: 'Anguilla',\n        [LocaleCode.Italian]: 'Anguilla',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30AE\u30E9',\n        [LocaleCode.Javanese]: 'Anguilla',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798',\n        [LocaleCode.Korean]: '\uC575\uADC8\uB77C',\n        [LocaleCode.Kurdish]: 'Anguilla',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3',\n        [LocaleCode.Latin]: 'Anguilla',\n        [LocaleCode.Latvian]: 'Anguilla',\n        [LocaleCode.Lithuanian]: 'Anguilla',\n        [LocaleCode.Luxembourgish]: 'Angilla',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Malagasy]: 'Angila',\n        [LocaleCode.Malay]: 'Anguilla',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E',\n        [LocaleCode.Maltese]: 'Anguilla',\n        [LocaleCode.Maori]: 'Anguilla',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Anguilla',\n        [LocaleCode.Pashto]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Anguilla',\n        [LocaleCode.Portuguese]: 'Anguilla',\n        [LocaleCode.Punjabi]: '\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Anguilla',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Samoan]: 'Anguilla',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Scots]: 'Anguilla',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Sesotho]: 'Anguilla',\n        [LocaleCode.Shona]: 'Anguilla',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Anguilla',\n        [LocaleCode.Slovenian]: 'Anguilla',\n        [LocaleCode.Somali]: 'Anguilla',\n        [LocaleCode.Spanish]: 'Anguilla',\n        [LocaleCode.Sudanese]: 'Anguilla',\n        [LocaleCode.Swahili]: 'Anguilla',\n        [LocaleCode.Swedish]: 'Anguilla',\n        [LocaleCode.Tagalog]: 'Anguilla',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Turkish]: 'Anguilla',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Urdu]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Vietnamese]: 'Anguilla',\n        [LocaleCode.Welsh]: 'Anguilla',\n        [LocaleCode.Xhosa]: 'Anguilla',\n        [LocaleCode.Yiddish]: 'Anguilla',\n        [LocaleCode.Yoruba]: 'Anguilla',\n        [LocaleCode.Zulu]: 'Anguilla',\n      },\n    },\n  },\n  Antarctica: {\n    i18n: {\n      calling_codes: [672],\n      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],\n      languages: [\n        LocaleCode.English,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Portuguese,\n        LocaleCode.Italian,\n        LocaleCode.Dutch,\n        LocaleCode.German,\n        LocaleCode.Swedish,\n        LocaleCode.Norwegian,\n        LocaleCode.Danish,\n        LocaleCode.Finnish,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [\n          TimezoneRegions.AntarcticaCasey,\n          TimezoneRegions.AntarcticaDavis,\n          TimezoneRegions.AntarcticaMcMurdo,\n          TimezoneRegions.AntarcticaPalmer,\n          TimezoneRegions.AntarcticaRothera,\n        ],\n        timezones: [\n          Timezones.AtlanticStandardTime,\n          Timezones.CentralTime,\n          Timezones.EasternTime,\n          Timezones.AtlanticStandardTime,\n          Timezones.AzoresStandardTime,\n          Timezones.NewfoundlandStandardTime,\n        ],\n      },\n    },\n    id: CountryCode.Antarctica,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF6',\n        emoji_unicode: 'U+1F1E6 U+1F1F6',\n        svg: 'https://www.countryflags.io/aq/flat/64.svg',\n      },\n      tld: ['.aq'],\n    },\n    iso: {\n      alpha2: CountryCode.Antarctica,\n      alpha3: 'ATA',\n      numeric: '010',\n    },\n    name: {\n      alt_spellings: ['AQ'],\n      demonym: 'Antarctican',\n      native: {\n        endonym: 'Antarctica',\n      },\n      official: 'Antarctica',\n      short: 'Antarctica',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Antarctica',\n        [LocaleCode.Albanian]: 'Antarktika',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1272\u120D\u12AB\u1293',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Basque]: 'Antarktika',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0',\n        [LocaleCode.Berber]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Bosnian]: 'Antarktika',\n        [LocaleCode.Breton]: 'Antarktika',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038',\n        [LocaleCode.Catalan]: 'Ant\u00E0rtida',\n        [LocaleCode.Chinese]: '\u5357\u6781\u6D32',\n        [LocaleCode.Croatian]: 'Antarktika',\n        [LocaleCode.Czech]: 'Antarktida',\n        [LocaleCode.Danish]: 'Antarktis',\n        [LocaleCode.Dutch]: 'Antarctica',\n        [LocaleCode.English]: 'Antarctica',\n        [LocaleCode.Esperanto]: 'Antarktika',\n        [LocaleCode.Estonian]: 'Antarktika',\n        [LocaleCode.Finnish]: 'Antarktis',\n        [LocaleCode.French]: 'Antarctica',\n        [LocaleCode.Frisian]: 'Antarktis',\n        [LocaleCode.Galician]: 'Ant\u00E1rtida',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0',\n        [LocaleCode.German]: 'Antarktis',\n        [LocaleCode.Greenlandic]: 'Antarktis',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE',\n        [LocaleCode.Gujarati]: '\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0',\n        [LocaleCode.Haitian]: 'Antarctica',\n        [LocaleCode.Hausa]: 'Antarktika',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930',\n        [LocaleCode.Hungarian]: 'Antarktika',\n        [LocaleCode.Icelandic]: 'Antarktis',\n        [LocaleCode.Igbo]: 'Antarktika',\n        [LocaleCode.Indonesian]: 'Antarktika',\n        [LocaleCode.Irish]: 'Antarktika',\n        [LocaleCode.Italian]: 'Antartide',\n        [LocaleCode.Japanese]: '\u5357\u6975',\n        [LocaleCode.Javanese]: 'Antarktika',\n        [LocaleCode.Kannada]: '\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799',\n        [LocaleCode.Korean]: '\uC564\uD2F0\uCE74\uD1A0\uB2C9',\n        [LocaleCode.Kurdish]: 'Antarktika',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0',\n        [LocaleCode.Latin]: 'Antarctica',\n        [LocaleCode.Latvian]: 'Antarktika',\n        [LocaleCode.Lithuanian]: 'Antarktis',\n        [LocaleCode.Luxembourgish]: 'Antarktis',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Malagasy]: 'Antarctica',\n        [LocaleCode.Malay]: 'Antarktika',\n        [LocaleCode.Malayalam]: '\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F',\n        [LocaleCode.Maltese]: 'Antarktika',\n        [LocaleCode.Maori]: 'Antarktika',\n        [LocaleCode.Marathi]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Norwegian]: 'Antarktis',\n        [LocaleCode.Pashto]: '\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Polish]: 'Antarktyka',\n        [LocaleCode.Portuguese]: 'Ant\u00E1rtida',\n        [LocaleCode.Punjabi]: '\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E',\n        [LocaleCode.Romanian]: 'Antarctica',\n        [LocaleCode.Russian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Samoan]: 'Antarktika',\n        [LocaleCode.Sanskrit]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Scots]: 'Antarktika',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Sesotho]: 'Antarktika',\n        [LocaleCode.Shona]: 'Antarktika',\n        [LocaleCode.Sindhi]: 'Antarktika',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Antarktika',\n        [LocaleCode.Slovenian]: 'Antarktika',\n        [LocaleCode.Somali]: 'Antarktika',\n        [LocaleCode.Spanish]: 'Ant\u00E1rtida',\n        [LocaleCode.Sudanese]: 'Antarktika',\n        [LocaleCode.Swahili]: 'Antarktika',\n        [LocaleCode.Swedish]: 'Antarktis',\n        [LocaleCode.Tagalog]: 'Antarktika',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E',\n        [LocaleCode.Thai]: '\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72',\n        [LocaleCode.Turkish]: 'Antarktika',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Vietnamese]: '\u0110\u1EA5t Antarktik',\n        [LocaleCode.Welsh]: 'Antarktika',\n        [LocaleCode.Xhosa]: 'Antarktika',\n        [LocaleCode.Yiddish]: 'Antarktika',\n        [LocaleCode.Yoruba]: 'Antarktika',\n        [LocaleCode.Zulu]: 'Antarktika',\n      },\n    },\n  },\n  Armenia: {\n    i18n: {\n      calling_codes: [374],\n      currencies: [CurrencyCode.ArmeniaDram],\n      languages: [LocaleCode.Armenian],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4],\n        regions: [TimezoneRegions.AsiaJakarta],\n        timezones: [Timezones.ArmeniaTime],\n      },\n    },\n    id: CountryCode.Armenia,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF2',\n        emoji_unicode: 'U+1F1E6 U+1F1F2',\n        svg: 'https://www.countryflags.io/am/flat/64.svg',\n      },\n      tld: ['.am'],\n    },\n    iso: {\n      alpha2: CountryCode.Armenia,\n      alpha3: 'ARM',\n      numeric: '051',\n    },\n    name: {\n      alt_spellings: ['AM', 'Hayastan', 'Republic of Armenia', '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576'],\n      demonym: 'Armenian',\n      native: {\n        endonym: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n      },\n      official: 'Republic of Armenia',\n      short: 'Armenia',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Armeni\u00EB',\n        [LocaleCode.Albanian]: 'Armenia',\n        [LocaleCode.Amharic]: '\u12A0\u121B\u122D\u129B',\n        [LocaleCode.Arabic]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Arm\u00E9nia',\n        [LocaleCode.Belarusian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF',\n        [LocaleCode.Berber]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42',\n        [LocaleCode.Bosnian]: 'Armenija',\n        [LocaleCode.Breton]: 'Armeni\u00EB',\n        [LocaleCode.Bulgarian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1010\u102D\u1010\u1039',\n        [LocaleCode.Catalan]: 'Arm\u00E8nia',\n        [LocaleCode.Chinese]: '\u4E9A\u7F8E\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Armenija',\n        [LocaleCode.Czech]: 'Arm\u00E9nie',\n        [LocaleCode.Danish]: 'Armenien',\n        [LocaleCode.Dutch]: 'Armeni\u00EB',\n        [LocaleCode.English]: 'Armenia',\n        [LocaleCode.Esperanto]: 'Armenia',\n        [LocaleCode.Estonian]: 'Armeenia',\n        [LocaleCode.Finnish]: 'Armenia',\n        [LocaleCode.French]: 'Armenia',\n        [LocaleCode.Frisian]: 'Armeenia',\n        [LocaleCode.Galician]: 'Arm\u00E9nia',\n        [LocaleCode.Georgian]: '\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8',\n        [LocaleCode.German]: 'Armenien',\n        [LocaleCode.Greenlandic]: 'Armenia',\n        [LocaleCode.Greek]: '\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF',\n        [LocaleCode.Haitian]: 'Armenia',\n        [LocaleCode.Hausa]: 'Armenia',\n        [LocaleCode.Hebrew]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: '\u00D6rm\u00E9nyorsz\u00E1g',\n        [LocaleCode.Icelandic]: 'Armenia',\n        [LocaleCode.Igbo]: 'Armenia',\n        [LocaleCode.Indonesian]: 'Armenia',\n        [LocaleCode.Irish]: 'Armenia',\n        [LocaleCode.Italian]: 'Armenia',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30E1\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Armenia',\n        [LocaleCode.Kannada]: '\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8',\n        [LocaleCode.Korean]: '\uC544\uB974\uBA54\uB2C8\uC544',\n        [LocaleCode.Kurdish]: 'Armenia',\n        [LocaleCode.Kyrgyz]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2',\n        [LocaleCode.Latin]: 'Armenia',\n        [LocaleCode.Latvian]: 'Armeenia',\n        [LocaleCode.Lithuanian]: 'Arm\u0117nija',\n        [LocaleCode.Luxembourgish]: 'Armenien',\n        [LocaleCode.Macedonian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Armenia',\n        [LocaleCode.Malay]: 'Armenia',\n        [LocaleCode.Malayalam]: '\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F',\n        [LocaleCode.Maltese]: 'Armenia',\n        [LocaleCode.Maori]: 'Armenia',\n        [LocaleCode.Marathi]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Mongolian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Norwegian]: 'Armenia',\n        [LocaleCode.Pashto]: '\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627',\n        [LocaleCode.Persian]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Armenia',\n        [LocaleCode.Portuguese]: 'Armenia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40',\n        [LocaleCode.Romanian]: 'Armenia',\n        [LocaleCode.Russian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Armenia',\n        [LocaleCode.Sanskrit]: 'Armenia',\n        [LocaleCode.Scots]: 'Armenia',\n        [LocaleCode.Serbian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Armenia',\n        [LocaleCode.Shona]: 'Armenia',\n        [LocaleCode.Sindhi]: 'Armenia',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2',\n        [LocaleCode.Slovak]: 'Armenia',\n        [LocaleCode.Slovenian]: 'Armenija',\n        [LocaleCode.Somali]: 'Armenia',\n        [LocaleCode.Spanish]: 'Armenia',\n        [LocaleCode.Sudanese]: 'Armenia',\n        [LocaleCode.Swahili]: 'Armenia',\n        [LocaleCode.Swedish]: 'Armenien',\n        [LocaleCode.Tagalog]: 'Armenia',\n        [LocaleCode.Tajik]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D',\n        [LocaleCode.Turkish]: 'Ermenistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0440\u043C\u0435\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Armenia',\n        [LocaleCode.Welsh]: 'Armenia',\n        [LocaleCode.Xhosa]: 'Armenia',\n        [LocaleCode.Yiddish]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Armenia',\n        [LocaleCode.Zulu]: 'Armenia',\n      },\n    },\n  },\n\n  SomeCountry: {\n    i18n: {\n      calling_codes: [],\n      currencies: [],\n      languages: [],\n      tz: {\n        offsets: [],\n        regions: [],\n        timezones: [],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '',\n        emoji_unicode: '',\n        svg: '',\n      },\n      tld: [],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: '',\n      numeric: '',\n    },\n    name: {\n      alt_spellings: [],\n      demonym: '',\n      native: {\n        endonym: '',\n      },\n      official: '',\n      short: '',\n      translations: {\n        [LocaleCode.Afrikaans]: '',\n        [LocaleCode.Albanian]: '',\n        [LocaleCode.Amharic]: '',\n        [LocaleCode.Arabic]: '',\n        [LocaleCode.Armenian]: '',\n        [LocaleCode.Azerbaijani]: '',\n        [LocaleCode.Bashkir]: '',\n        [LocaleCode.Basque]: '',\n        [LocaleCode.Belarusian]: '',\n        [LocaleCode.Bengali]: '',\n        [LocaleCode.Berber]: '',\n        [LocaleCode.Bhutani]: '',\n        [LocaleCode.Bosnian]: '',\n        [LocaleCode.Breton]: '',\n        [LocaleCode.Bulgarian]: '',\n        [LocaleCode.Burmese]: '',\n        [LocaleCode.Catalan]: '',\n        [LocaleCode.Chinese]: '',\n        [LocaleCode.Croatian]: '',\n        [LocaleCode.Czech]: '',\n        [LocaleCode.Danish]: '',\n        [LocaleCode.Dutch]: '',\n        [LocaleCode.English]: '',\n        [LocaleCode.Esperanto]: '',\n        [LocaleCode.Estonian]: '',\n        [LocaleCode.Finnish]: '',\n        [LocaleCode.French]: '',\n        [LocaleCode.Frisian]: '',\n        [LocaleCode.Galician]: '',\n        [LocaleCode.Georgian]: '',\n        [LocaleCode.German]: '',\n        [LocaleCode.Greenlandic]: '',\n        [LocaleCode.Greek]: '',\n        [LocaleCode.Gujarati]: '',\n        [LocaleCode.Haitian]: '',\n        [LocaleCode.Hausa]: '',\n        [LocaleCode.Hebrew]: '',\n        [LocaleCode.Hindi]: '',\n        [LocaleCode.Hungarian]: '',\n        [LocaleCode.Icelandic]: '',\n        [LocaleCode.Igbo]: '',\n        [LocaleCode.Indonesian]: '',\n        [LocaleCode.Irish]: '',\n        [LocaleCode.Italian]: '',\n        [LocaleCode.Japanese]: '',\n        [LocaleCode.Javanese]: '',\n        [LocaleCode.Kannada]: '',\n        [LocaleCode.Kazakh]: '',\n        [LocaleCode.Khmer]: '',\n        [LocaleCode.Korean]: '',\n        [LocaleCode.Kurdish]: '',\n        [LocaleCode.Kyrgyz]: '',\n        [LocaleCode.Lao]: '',\n        [LocaleCode.Latin]: '',\n        [LocaleCode.Latvian]: '',\n        [LocaleCode.Lithuanian]: '',\n        [LocaleCode.Luxembourgish]: '',\n        [LocaleCode.Macedonian]: '',\n        [LocaleCode.Malagasy]: '',\n        [LocaleCode.Malay]: '',\n        [LocaleCode.Malayalam]: '',\n        [LocaleCode.Maltese]: '',\n        [LocaleCode.Maori]: '',\n        [LocaleCode.Marathi]: '',\n        [LocaleCode.Mongolian]: '',\n        [LocaleCode.Nepali]: '',\n        [LocaleCode.Norwegian]: '',\n        [LocaleCode.Pashto]: '',\n        [LocaleCode.Persian]: '',\n        [LocaleCode.Polish]: '',\n        [LocaleCode.Portuguese]: '',\n        [LocaleCode.Punjabi]: '',\n        [LocaleCode.Romanian]: '',\n        [LocaleCode.Russian]: '',\n        [LocaleCode.Samoan]: '',\n        [LocaleCode.Sanskrit]: '',\n        [LocaleCode.Scots]: '',\n        [LocaleCode.Serbian]: '',\n        [LocaleCode.Sesotho]: '',\n        [LocaleCode.Shona]: '',\n        [LocaleCode.Sindhi]: '',\n        [LocaleCode.Sinhala]: '',\n        [LocaleCode.Slovak]: '',\n        [LocaleCode.Slovenian]: '',\n        [LocaleCode.Somali]: '',\n        [LocaleCode.Spanish]: '',\n        [LocaleCode.Sudanese]: '',\n        [LocaleCode.Swahili]: '',\n        [LocaleCode.Swedish]: '',\n        [LocaleCode.Tagalog]: '',\n        [LocaleCode.Tajik]: '',\n        [LocaleCode.Tamil]: '',\n        [LocaleCode.Tatar]: '',\n        [LocaleCode.Telugu]: '',\n        [LocaleCode.Thai]: '',\n        [LocaleCode.Tibetan]: '',\n        [LocaleCode.Turkish]: '',\n        [LocaleCode.Ukrainian]: '',\n        [LocaleCode.Urdu]: '',\n        [LocaleCode.Uzbek]: '',\n        [LocaleCode.Vietnamese]: '',\n        [LocaleCode.Welsh]: '',\n        [LocaleCode.Xhosa]: '',\n        [LocaleCode.Yiddish]: '',\n        [LocaleCode.Yoruba]: '',\n        [LocaleCode.Zulu]: '',\n      },\n    },\n  },\n};\n", "import { LanguageCode } from '../language/index.js';\nimport { LocaleCode } from './index.js';\nimport { Locale } from '.';\nimport { CountryCode } from './country.js';\n\nexport const Afrikaans: Locale = {\n  id: LocaleCode.Afrikaans,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans',\n  native_name: 'Afrikaans',\n  rtl: false,\n};\n\nexport const AfrikaansSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.AfrikaansSouthAfrica,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans (South Africa)',\n  native_name: 'Afrikaans (Suid-Afrika)',\n  rtl: false,\n};\n\nexport const Albanian: Locale = {\n  id: LocaleCode.Albanian,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian',\n  native_name: 'Shqip',\n  rtl: false,\n};\n\nexport const AlbanianAlbania: Locale = {\n  country: {\n    code: CountryCode.Albania,\n    name: 'Albania',\n    native: 'Shqip\u00EBria',\n  },\n  id: LocaleCode.AlbanianAlbania,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian (Albania)',\n  native_name: 'Shqip (Shqip\u00EBria)',\n  rtl: false,\n};\n\nexport const Amharic: Locale = {\n  id: LocaleCode.Amharic,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic',\n  native_name: '\u12A0\u121B\u122D\u129B',\n  rtl: false,\n};\n\nexport const AmharicEthiopia: Locale = {\n  country: {\n    code: CountryCode.Ethiopia,\n    name: 'Ethiopia',\n    native: '\u12A2\u1275\u12EE\u1335\u12EB',\n  },\n  id: LocaleCode.AmharicEthiopia,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic (Ethiopia)',\n  native_name: '\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)',\n  rtl: false,\n};\n\nexport const Arabic: Locale = {\n  id: LocaleCode.Arabic,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  rtl: true,\n};\n\nexport const ArabicAlgeria: Locale = {\n  country: {\n    code: CountryCode.Algeria,\n    name: 'Algeria',\n    native: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n  },\n  id: LocaleCode.ArabicAlgeria,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Algeria)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)',\n  rtl: true,\n};\n\nexport const ArabicBahrain: Locale = {\n  country: {\n    code: CountryCode.Bahrain,\n    name: 'Bahrain',\n    native: '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',\n  },\n  id: LocaleCode.ArabicBahrain,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Bahrain)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)',\n  rtl: true,\n};\n\nexport const ArabicEgypt: Locale = {\n  country: {\n    code: CountryCode.Egypt,\n    name: 'Egypt',\n    native: '\u0645\u0635\u0631',\n  },\n  id: LocaleCode.ArabicEgypt,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Egypt)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)',\n  rtl: true,\n};\n\nexport const ArabicIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.ArabicIraq,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Iraq)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: true,\n};\n\nexport const ArabicJordan: Locale = {\n  country: {\n    code: CountryCode.Jordan,\n    name: 'Jordan',\n    native: '\u0627\u0644\u0623\u0631\u062F\u0646',\n  },\n  id: LocaleCode.ArabicJordan,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Jordan)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)',\n  rtl: true,\n};\n\nexport const ArabicKuwait: Locale = {\n  country: {\n    code: CountryCode.Kuwait,\n    name: 'Kuwait',\n    native: '\u0627\u0644\u0643\u0648\u064A\u062A',\n  },\n\n  id: LocaleCode.ArabicKuwait,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Kuwait)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)',\n  rtl: true,\n};\n\nexport const ArabicLebanon: Locale = {\n  country: {\n    code: CountryCode.Lebanon,\n    name: 'Lebanon',\n    native: '\u0644\u0628\u0646\u0627\u0646',\n  },\n  id: LocaleCode.ArabicLebanon,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Lebanon)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicLibya: Locale = {\n  country: {\n    code: CountryCode.Libya,\n    name: 'Libya',\n    native: '\u0644\u064A\u0628\u064A\u0627',\n  },\n  id: LocaleCode.ArabicLibya,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Libya)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)',\n  rtl: true,\n};\n\nexport const ArabicMorocco: Locale = {\n  country: {\n    code: CountryCode.Morocco,\n    name: 'Morocco',\n    native: '\u0627\u0644\u0645\u063A\u0631\u0628',\n  },\n  id: LocaleCode.ArabicMorocco,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Morocco)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)',\n  rtl: true,\n};\n\nexport const ArabicOman: Locale = {\n  country: {\n    code: CountryCode.Oman,\n    name: 'Oman',\n    native: '\u0639\u0645\u0627\u0646',\n  },\n  id: LocaleCode.ArabicOman,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Oman)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicQatar: Locale = {\n  country: {\n    code: CountryCode.Qatar,\n    name: 'Qatar',\n    native: '\u0642\u0637\u0631',\n  },\n  id: LocaleCode.ArabicQatar,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Qatar)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)',\n  rtl: true,\n};\n\nexport const ArabicSaudiArabia: Locale = {\n  country: {\n    code: CountryCode.SaudiArabia,\n    name: 'Saudi Arabia',\n    native: '\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n  },\n  id: LocaleCode.ArabicSaudiArabia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Saudi Arabia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)',\n  rtl: true,\n};\n\nexport const ArabicTunisia: Locale = {\n  country: {\n    code: CountryCode.Tunisia,\n    name: 'Tunisia',\n    native: '\u062A\u0648\u0646\u0633',\n  },\n  id: LocaleCode.ArabicTunisia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Tunisia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)',\n  rtl: true,\n};\n\nexport const ArabicUnitedArabEmirates: Locale = {\n  country: {\n    code: CountryCode.UnitedArabEmirates,\n    name: 'United Arab Emirates',\n    native: '\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n  },\n  id: LocaleCode.ArabicUnitedArabEmirates,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (United Arab Emirates)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)',\n  rtl: true,\n};\n\nexport const ArabicYemen: Locale = {\n  country: {\n    code: CountryCode.Yemen,\n    name: 'Yemen',\n    native: '\u0627\u0644\u064A\u0645\u0646',\n  },\n  id: LocaleCode.ArabicYemen,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Yemen)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)',\n  rtl: true,\n};\n\nexport const Armenian: Locale = {\n  id: LocaleCode.Armenian,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian',\n  native_name: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  rtl: false,\n};\n\nexport const ArmenianArmenia: Locale = {\n  country: { code: CountryCode.Armenia, name: 'Armenia', native: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576' },\n  id: LocaleCode.ArmenianArmenia,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian (Armenia)',\n  native_name: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)',\n  rtl: false,\n};\n\nexport const Azerbaijani = {\n  id: LocaleCode.Azerbaijani,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azeribaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri',\n  native_name: 'Az\u0259rbaycan',\n  rtl: false,\n};\n\nexport const AzerbaijaniAzerbaijan: Locale = {\n  country: {\n    code: CountryCode.Azerbaijan,\n    name: 'Azerbaijan',\n    native: 'Az\u0259rbaycan',\n  },\n  id: LocaleCode.AzerbaijaniAzerbaijan,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azerbaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri (Azerbaijan)',\n  native_name: 'Az\u0259rbaycan (Az\u0259rbaycan)',\n  rtl: false,\n};\n\nexport const Basque: Locale = {\n  id: LocaleCode.Basque,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque',\n  native_name: 'Euskara',\n  rtl: false,\n};\n\nexport const BasqueSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.BasqueSpain,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque (Spain)',\n  native_name: 'Euskara (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Belarusian: Locale = {\n  id: LocaleCode.Belarusian,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian',\n  native_name: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  rtl: false,\n};\n\nexport const BelarusianBelarus: Locale = {\n  country: {\n    code: CountryCode.Belarus,\n    name: 'Belarus',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C',\n  },\n  id: LocaleCode.BelarusianBelarus,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian (Belarus)',\n  native_name: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)',\n  rtl: false,\n};\n\nexport const Bengali: Locale = {\n  id: LocaleCode.Bengali,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  rtl: false,\n};\n\nexport const BengaliBangladesh: Locale = {\n  country: {\n    code: CountryCode.Bangladesh,\n    name: 'Bangladesh',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6',\n  },\n  id: LocaleCode.BengaliBangladesh,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali (Bangladesh)',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)',\n  rtl: false,\n};\n\nexport const Bhutani: Locale = {\n  id: LocaleCode.Bhutani,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const BhutaniBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n  },\n  id: LocaleCode.BhutaniBhutan,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)',\n  rtl: false,\n};\n\nexport const Bulgarian: Locale = {\n  id: LocaleCode.Bulgarian,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian',\n  native_name: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const BulgarianBulgaria: Locale = {\n  country: {\n    code: CountryCode.Bulgaria,\n    name: 'Bulgaria',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F',\n  },\n  id: LocaleCode.BulgarianBulgaria,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian (Bulgaria)',\n  native_name: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)',\n  rtl: false,\n};\n\nexport const Burmese: Locale = {\n  id: LocaleCode.Burmese,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese',\n  native_name: '\u1017\u1019\u102C\u1005\u102C',\n  rtl: false,\n};\n\nexport const BurmeseMyanmar: Locale = {\n  country: {\n    code: CountryCode.Myanmar,\n    name: 'Myanmar',\n    native: '\u1019\u103C\u1014\u103A\u1019\u102C',\n  },\n  id: LocaleCode.BurmeseMyanmar,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese (Myanmar)',\n  native_name: '\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)',\n  rtl: false,\n};\n\nexport const Cantonese: Locale = {\n  id: LocaleCode.Cantonese,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese',\n  native_name: '\u5EE3\u6771\u8A71',\n  rtl: false,\n};\n\nexport const CantoneseHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.CantoneseHongKong,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese (Hong Kong)',\n  native_name: '\u5EE3\u6771\u8A71 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const Catalan: Locale = {\n  id: LocaleCode.Catalan,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan',\n  native_name: 'Catal\u00E0',\n  rtl: false,\n};\n\nexport const CatalanSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.CatalanSpain,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan (Spain)',\n  native_name: 'Catal\u00E0 (Espanya)',\n  rtl: false,\n};\n\nexport const ChineseSimplified: Locale = {\n  id: LocaleCode.ChineseSimplified,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.ChineseSimplifiedChina,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/China)',\n  native_name: '\u4E2D\u6587 (\u4E2D\u56FD)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseSimplifiedHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseSimplifiedMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseSimplifiedSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const ChineseTraditional: Locale = {\n  id: LocaleCode.ChineseTraditional,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Traditional)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseTraditionalHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseTraditionalHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Hong Kong)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseTraditionalMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Macau)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseTraditionalSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Singapore)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const Croatian: Locale = {\n  id: LocaleCode.Croatian,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian',\n  native_name: 'Hrvatski',\n  rtl: false,\n};\n\nexport const CroatianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.CroatianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Bosnia and Herzegovina)',\n  native_name: 'Hrvatski (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const CroatianCroatia: Locale = {\n  country: {\n    code: CountryCode.Croatia,\n    name: 'Croatia',\n    native: 'Hrvatska',\n  },\n  id: LocaleCode.CroatianCroatia,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Croatia)',\n  native_name: 'Hrvatski (Hrvatska)',\n  rtl: false,\n};\n\nexport const Czech: Locale = {\n  id: LocaleCode.Czech,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech',\n  native_name: '\u010Ce\u0161tina',\n  rtl: false,\n};\n\nexport const CzechCzechRepublic: Locale = {\n  country: {\n    code: CountryCode.CzechRepublic,\n    name: 'Czech Republic',\n    native: '\u010Cesk\u00E1 republika',\n  },\n  id: LocaleCode.CzechCzechRepublic,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech (Czech Republic)',\n  native_name: '\u010Ce\u0161tina (\u010Cesk\u00E1 republika)',\n  rtl: false,\n};\n\nexport const Danish: Locale = {\n  id: LocaleCode.Danish,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish',\n  native_name: 'Dansk',\n  rtl: false,\n};\n\nexport const DanishDenmark: Locale = {\n  country: {\n    code: CountryCode.Denmark,\n    name: 'Denmark',\n    native: 'Danmark',\n  },\n  id: LocaleCode.DanishDenmark,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish (Denmark)',\n  native_name: 'Dansk (Danmark)',\n  rtl: false,\n};\n\nexport const Divehi: Locale = {\n  id: LocaleCode.Divehi,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  rtl: true,\n};\n\nexport const DivehiMaldives: Locale = {\n  country: {\n    code: CountryCode.Maldives,\n    name: 'Maldives',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC',\n  },\n  id: LocaleCode.DivehiMaldives,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi (Maldives)',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)',\n  rtl: true,\n};\n\nexport const Dutch: Locale = {\n  id: LocaleCode.Dutch,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch',\n  native_name: 'Nederlands',\n  rtl: false,\n};\n\nexport const DutchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.DutchBelgium,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Belgium)',\n  native_name: 'Nederlands (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const DutchNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.DutchNetherlands,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Netherlands)',\n  native_name: 'Nederlands (Nederland)',\n  rtl: false,\n};\n\nexport const English: Locale = {\n  id: LocaleCode.English,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English',\n  native_name: 'English',\n  rtl: false,\n};\n\nexport const EnglishAustralia: Locale = {\n  country: {\n    code: CountryCode.Australia,\n    name: 'Australia',\n    native: 'Australia',\n  },\n  id: LocaleCode.EnglishAustralia,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Australia)',\n  native_name: 'English (Australia)',\n  rtl: false,\n};\n\nexport const EnglishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.EnglishBelgium,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Belgium)',\n  native_name: 'English (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const EnglishCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.EnglishCanada,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Canada)',\n  native_name: 'English (Canada)',\n  rtl: false,\n};\n\nexport const EnglishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.EnglishIreland,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Ireland)',\n  native_name: 'English (\u00C9ire)',\n  rtl: false,\n};\n\nexport const EnglishJamaica: Locale = {\n  country: {\n    code: CountryCode.Jamaica,\n    name: 'Jamaica',\n    native: 'Jamaica',\n  },\n  id: LocaleCode.EnglishJamaica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Jamaica)',\n  native_name: 'English (Jamaica)',\n  rtl: false,\n};\n\nexport const EnglishNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.EnglishNewZealand,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (New Zealand)',\n  native_name: 'English (New Zealand)',\n  rtl: false,\n};\n\nexport const EnglishPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Philippines',\n  },\n  id: LocaleCode.EnglishPhilippines,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Philippines)',\n  native_name: 'English (Philippines)',\n  rtl: false,\n};\n\nexport const EnglishSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.EnglishSingapore,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Singapore)',\n  native_name: 'English (Singapore)',\n  rtl: false,\n};\n\nexport const EnglishSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.EnglishSouthAfrica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (South Africa)',\n  native_name: 'English (South Africa)',\n  rtl: false,\n};\n\nexport const EnglishTrinidadAndTobago: Locale = {\n  country: {\n    code: CountryCode.TrinidadAndTobago,\n    name: 'Trinidad and Tobago',\n    native: 'Trinidad and Tobago',\n  },\n  id: LocaleCode.EnglishTrinidadAndTobago,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Trinidad and Tobago)',\n  native_name: 'English (Trinidad and Tobago)',\n  rtl: false,\n};\n\nexport const EnglishUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.EnglishUnitedKingdom,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United Kingdom)',\n  native_name: 'English (United Kingdom)',\n  rtl: false,\n};\n\nexport const EnglishUnitedStates: Locale = {\n  country: {\n    code: CountryCode.UnitedStates,\n    name: 'United States',\n    native: 'United States',\n  },\n  id: LocaleCode.EnglishUnitedStates,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United States)',\n  native_name: 'English (United States)',\n  rtl: false,\n};\n\nexport const EnglishZimbabwe: Locale = {\n  country: {\n    code: CountryCode.Zimbabwe,\n    name: 'Zimbabwe',\n    native: 'Zimbabwe',\n  },\n  id: LocaleCode.EnglishZimbabwe,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Zimbabwe)',\n  native_name: 'English (Zimbabwe)',\n  rtl: false,\n};\n\nexport const Esperanto: Locale = {\n  id: LocaleCode.Esperanto,\n  language: {\n    code: LanguageCode.Esperanto,\n    name: 'Esperanto',\n    native: 'Esperanto',\n  },\n  name: 'Esperanto',\n  native_name: 'Esperanto',\n  rtl: false,\n};\n\nexport const Estonian: Locale = {\n  id: LocaleCode.Estonian,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian',\n  native_name: 'Eesti',\n  rtl: false,\n};\n\nexport const EstonianEstonia: Locale = {\n  country: {\n    code: CountryCode.Estonia,\n    name: 'Estonia',\n    native: 'Eesti',\n  },\n  id: LocaleCode.EstonianEstonia,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian (Estonia)',\n  native_name: 'Eesti (Eesti)',\n  rtl: false,\n};\n\nexport const Faroese: Locale = {\n  id: LocaleCode.Faroese,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese',\n  native_name: 'F\u00F8royskt',\n  rtl: false,\n};\n\nexport const FaroeseFaroeIslands: Locale = {\n  country: {\n    code: CountryCode.FaroeIslands,\n    name: 'Faroe Islands',\n    native: 'F\u00F8royar',\n  },\n  id: LocaleCode.FaroeseFaroeIslands,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese (Faroe Islands)',\n  native_name: 'F\u00F8royskt (F\u00F8royar)',\n  rtl: false,\n};\n\nexport const Farsi: Locale = {\n  id: LocaleCode.Farsi,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const FarsiIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.FarsiIran,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Filipino: Locale = {\n  id: LocaleCode.Filipino,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino',\n  native_name: 'Filipino',\n  rtl: false,\n};\n\nexport const FilipinoPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.FilipinoPhilippines,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino (Philippines)',\n  native_name: 'Filipino (Pilipinas)',\n  rtl: false,\n};\n\nexport const Finnish: Locale = {\n  id: LocaleCode.Finnish,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish',\n  native_name: 'Suomi',\n  rtl: false,\n};\n\nexport const FinnishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.FinnishFinland,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish (Finland)',\n  native_name: 'Suomi (Suomi)',\n  rtl: false,\n};\n\nexport const French: Locale = {\n  id: LocaleCode.French,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French',\n  native_name: 'Fran\u00E7ais',\n  rtl: false,\n};\n\nexport const FrenchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgique',\n  },\n  id: LocaleCode.FrenchBelgium,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Belgium)',\n  native_name: 'Fran\u00E7ais (Belgique)',\n  rtl: false,\n};\n\nexport const FrenchCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.FrenchCanada,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Canada)',\n  native_name: 'Fran\u00E7ais (Canada)',\n  rtl: false,\n};\n\nexport const FrenchFrance: Locale = {\n  country: {\n    code: CountryCode.France,\n    name: 'France',\n    native: 'France',\n  },\n  id: LocaleCode.FrenchFrance,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (France)',\n  native_name: 'Fran\u00E7ais (France)',\n  rtl: false,\n};\n\nexport const FrenchLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.FrenchLuxembourg,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Luxembourg)',\n  native_name: 'Fran\u00E7ais (Luxembourg)',\n  rtl: false,\n};\n\nexport const FrenchMonaco: Locale = {\n  country: {\n    code: CountryCode.Monaco,\n    name: 'Monaco',\n    native: 'Monaco',\n  },\n  id: LocaleCode.FrenchMonaco,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Monaco)',\n  native_name: 'Fran\u00E7ais (Monaco)',\n  rtl: false,\n};\n\nexport const FrenchReunion: Locale = {\n  country: {\n    code: CountryCode.Reunion,\n    name: 'Reunion',\n    native: 'La R\u00E9union',\n  },\n  id: LocaleCode.FrenchReunion,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Reunion)',\n  native_name: 'Fran\u00E7ais (La R\u00E9union)',\n  rtl: false,\n};\n\nexport const FrenchSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.FrenchSwitzerland,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Switzerland)',\n  native_name: 'Fran\u00E7ais (Suisse)',\n  rtl: false,\n};\n\nexport const Frisian: Locale = {\n  id: LocaleCode.Frisian,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian',\n  native_name: 'Frysk',\n  rtl: false,\n};\n\nexport const FrisianNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.FrisianNetherlands,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian (Netherlands)',\n  native_name: 'Frysk (Nederland)',\n  rtl: false,\n};\n\nexport const Galician: Locale = {\n  id: LocaleCode.Galician,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician',\n  native_name: 'Galego',\n  rtl: false,\n};\n\nexport const GalicianSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.GalicianSpain,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician (Spain)',\n  native_name: 'Galego (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Georgian: Locale = {\n  id: LocaleCode.Georgian,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  rtl: false,\n};\n\nexport const GeorgianGeorgia: Locale = {\n  country: {\n    code: CountryCode.Georgia,\n    name: 'Georgia',\n    native: '\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD',\n  },\n  id: LocaleCode.GeorgianGeorgia,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian (Georgia)',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)',\n  rtl: false,\n};\n\nexport const German: Locale = {\n  id: LocaleCode.German,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German',\n  native_name: 'Deutsch',\n  rtl: false,\n};\n\nexport const GermanAustria: Locale = {\n  country: {\n    code: CountryCode.Austria,\n    name: 'Austria',\n    native: '\u00D6sterreich',\n  },\n  id: LocaleCode.GermanAustria,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Austria)',\n  native_name: 'Deutsch (\u00D6sterreich)',\n  rtl: false,\n};\n\nexport const GermanBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.GermanBelgium,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Belgium)',\n  native_name: 'Deutsch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const GermanSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.GermanSwitzerland,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Switzerland)',\n  native_name: 'Deutsch (Suisse)',\n  rtl: false,\n};\n\nexport const GermanLiechtenstein: Locale = {\n  country: {\n    code: CountryCode.Liechtenstein,\n    name: 'Liechtenstein',\n    native: 'Liechtenstein',\n  },\n  id: LocaleCode.GermanLiechtenstein,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Liechtenstein)',\n  native_name: 'Deutsch (Liechtenstein)',\n  rtl: false,\n};\n\nexport const GermanLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.GermanLuxembourg,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Luxembourg)',\n  native_name: 'Deutsch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Greek: Locale = {\n  id: LocaleCode.Greek,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  rtl: false,\n};\n\nexport const GreekGreece: Locale = {\n  country: {\n    code: CountryCode.Greece,\n    name: 'Greece',\n    native: '\u0395\u03BB\u03BB\u03AC\u03B4\u03B1',\n  },\n  id: LocaleCode.GreekGreece,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek (Greece)',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)',\n  rtl: false,\n};\n\nexport const Greenlandic: Locale = {\n  id: LocaleCode.Greenlandic,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic',\n  native_name: 'Kalaallisut',\n  rtl: false,\n};\n\nexport const GreenlandicGreenland: Locale = {\n  country: {\n    code: CountryCode.Greenland,\n    name: 'Greenland',\n    native: 'Kalaallit Nunaat',\n  },\n  id: LocaleCode.GreenlandicGreenland,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic (Greenland)',\n  native_name: 'Kalaallisut (Kalaallit Nunaat)',\n  rtl: false,\n};\n\nexport const Gujarati: Locale = {\n  id: LocaleCode.Gujarati,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  rtl: false,\n};\n\nexport const GujaratiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.GujaratiIndia,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati (India)',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Hausa: Locale = {\n  id: LocaleCode.Hausa,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  rtl: false,\n};\n\nexport const HausaGhana: Locale = {\n  country: {\n    code: CountryCode.Ghana,\n    name: 'Ghana',\n    native: 'Ghana',\n  },\n  id: LocaleCode.HausaGhana,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Ghana)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)',\n  rtl: false,\n};\n\nexport const HausaNiger: Locale = {\n  country: {\n    code: CountryCode.Niger,\n    name: 'Niger',\n    native: 'Niger',\n  },\n  id: LocaleCode.HausaNiger,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Niger)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Niger)',\n  rtl: false,\n};\n\nexport const HausaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.HausaNigeria,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Nigeria)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)',\n  rtl: false,\n};\n\nexport const Hebrew: Locale = {\n  id: LocaleCode.Hebrew,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  },\n  name: 'Hebrew',\n  native_name: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  rtl: true,\n};\n\n// TODO: Figure this out since Github is censoring it\nexport const HebrewIsrael: Locale = {\n  country: {\n    code: CountryCode.Israel,\n    name: 'Hebrew',\n    native: '',\n  },\n  id: LocaleCode.HebrewIsrael,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '',\n  },\n  name: 'Hebrew (Israel)',\n  native_name: '',\n  rtl: true,\n};\n\nexport const Hindi: Locale = {\n  id: LocaleCode.Hindi,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  },\n  name: 'Hindi',\n  native_name: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  rtl: false,\n};\n\nexport const HindiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.HindiIndia,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  },\n  name: 'Hindi (India)',\n  native_name: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  rtl: false,\n};\n\nexport const Hungarian: Locale = {\n  id: LocaleCode.Hungarian,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian',\n  native_name: 'Magyar',\n  rtl: false,\n};\n\nexport const HungarianHungary: Locale = {\n  country: {\n    code: CountryCode.Hungary,\n    name: 'Hungary',\n    native: 'Magyarorsz\u00E1g',\n  },\n  id: LocaleCode.HungarianHungary,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian (Hungary)',\n  native_name: 'Magyar (Magyarorsz\u00E1g)',\n  rtl: false,\n};\n\nexport const Icelandic: Locale = {\n  id: LocaleCode.Icelandic,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic',\n  native_name: '\u00CDslenska',\n  rtl: false,\n};\n\nexport const IcelandicIceland: Locale = {\n  country: {\n    code: CountryCode.Iceland,\n    name: 'Iceland',\n    native: '\u00CDsland',\n  },\n  id: LocaleCode.IcelandicIceland,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic (Iceland)',\n  native_name: '\u00CDslenska (\u00CDsland)',\n  rtl: false,\n};\n\nexport const Igbo: Locale = {\n  id: LocaleCode.Igbo,\n  language: {\n    code: LanguageCode.Igbo,\n    name: 'Igbo',\n    native: 'Igbo',\n  },\n  name: 'Igbo',\n  native_name: 'Igbo',\n  rtl: false,\n};\n\nexport const Indonesian: Locale = {\n  id: LocaleCode.Indonesian,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian',\n  native_name: 'Bahasa Indonesia',\n  rtl: false,\n};\n\nexport const IndonesianIndonesia: Locale = {\n  country: {\n    code: CountryCode.Indonesia,\n    name: 'Indonesia',\n    native: 'Indonesia',\n  },\n  id: LocaleCode.IndonesianIndonesia,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian (Indonesia)',\n  native_name: 'Bahasa Indonesia (Indonesia)',\n  rtl: false,\n};\n\nexport const Irish: Locale = {\n  id: LocaleCode.Irish,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish',\n  native_name: 'Gaeilge',\n  rtl: false,\n};\n\nexport const IrishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.IrishIreland,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish (Ireland)',\n  native_name: 'Gaeilge (\u00C9ire)',\n  rtl: false,\n};\n\nexport const Italian: Locale = {\n  id: LocaleCode.Italian,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian',\n  native_name: 'Italiano',\n  rtl: false,\n};\n\nexport const ItalianItaly: Locale = {\n  country: {\n    code: CountryCode.Italy,\n    name: 'Italy',\n    native: 'Italia',\n  },\n  id: LocaleCode.ItalianItaly,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Italy)',\n  native_name: 'Italiano (Italia)',\n  rtl: false,\n};\n\nexport const ItalianSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Schweiz',\n  },\n  id: LocaleCode.ItalianSwitzerland,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Switzerland)',\n  native_name: 'Italiano (Svizzera)',\n  rtl: false,\n};\n\nexport const Japanese: Locale = {\n  id: LocaleCode.Japanese,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese',\n  native_name: '\u65E5\u672C\u8A9E',\n  rtl: false,\n};\n\nexport const JapaneseJapan: Locale = {\n  country: {\n    code: CountryCode.Japan,\n    name: 'Japan',\n    native: '\u65E5\u672C',\n  },\n  id: LocaleCode.JapaneseJapan,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese (Japan)',\n  native_name: '\u65E5\u672C\u8A9E (\u65E5\u672C)',\n  rtl: false,\n};\n\nexport const Kannada: Locale = {\n  id: LocaleCode.Kannada,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  rtl: false,\n};\n\nexport const KannadaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0CAD\u0CBE\u0CB0\u0CA4',\n  },\n  id: LocaleCode.KannadaIndia,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada (India)',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)',\n  rtl: false,\n};\n\nexport const Kazakh: Locale = {\n  id: LocaleCode.Kazakh,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  rtl: false,\n};\n\nexport const KazakhKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KazakhKazakhstan,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh (Kazakhstan)',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Khmer: Locale = {\n  id: LocaleCode.Khmer,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  rtl: false,\n};\n\nexport const KhmerCambodia: Locale = {\n  country: {\n    code: CountryCode.Cambodia,\n    name: 'Cambodia',\n    native: '\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6',\n  },\n  id: LocaleCode.KhmerCambodia,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer (Cambodia)',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)',\n  rtl: false,\n};\n\nexport const Konkani: Locale = {\n  id: LocaleCode.Konkani,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  rtl: false,\n};\n\nexport const KonkaniIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.KonkaniIndia,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani (India)',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Korean: Locale = {\n  id: LocaleCode.Korean,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean',\n  native_name: '\uD55C\uAD6D\uC5B4',\n  rtl: false,\n};\n\nexport const KoreanSouthKorea: Locale = {\n  country: {\n    code: CountryCode.SouthKorea,\n    name: 'South Korea',\n    native: '\uB300\uD55C\uBBFC\uAD6D',\n  },\n  id: LocaleCode.KoreanSouthKorea,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean (South Korea)',\n  native_name: '\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)',\n  rtl: false,\n};\n\nexport const Kurdish: Locale = {\n  id: LocaleCode.Kurdish,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish',\n  native_name: 'Kurd\u00EE',\n  rtl: false,\n};\n\nexport const KurdishIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.KurdishIraq,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Iraq)',\n  native_name: 'Kurd\u00EE (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: false,\n};\n\nexport const KurdishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.KurdishTurkey,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Turkey)',\n  native_name: 'Kurd\u00EE (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Kyrgyz: Locale = {\n  id: LocaleCode.Kyrgyz,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  rtl: false,\n};\n\nexport const KyrgyzKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KyrgyzKyrgyzstan,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz (Kyrgyzstan)',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Lao: Locale = {\n  id: LocaleCode.Lao,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao',\n  native_name: '\u0EA5\u0EB2\u0EA7',\n  rtl: false,\n};\n\nexport const LaoLaos: Locale = {\n  country: {\n    code: CountryCode.Laos,\n    name: 'Laos',\n    native: '\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95',\n  },\n  id: LocaleCode.LaoLaos,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao (Laos)',\n  native_name: '\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)',\n  rtl: false,\n};\n\nexport const Latvian: Locale = {\n  id: LocaleCode.Latvian,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian',\n  native_name: 'Latvie\u0161u',\n  rtl: false,\n};\n\nexport const LatvianLatvia: Locale = {\n  country: {\n    code: CountryCode.Latvia,\n    name: 'Latvia',\n    native: 'Latvija',\n  },\n  id: LocaleCode.LatvianLatvia,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian (Latvia)',\n  native_name: 'Latvie\u0161u (Latvija)',\n  rtl: false,\n};\n\nexport const Lithuanian: Locale = {\n  id: LocaleCode.Lithuanian,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian',\n  native_name: 'Lietuvi\u0173',\n  rtl: false,\n};\n\nexport const LithuanianLithuania: Locale = {\n  country: {\n    code: CountryCode.Lithuania,\n    name: 'Lithuania',\n    native: 'Lietuva',\n  },\n  id: LocaleCode.LithuanianLithuania,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian (Lithuania)',\n  native_name: 'Lietuvi\u0173 (Lietuva)',\n  rtl: false,\n};\n\nexport const Luxembourgish: Locale = {\n  id: LocaleCode.Luxembourgish,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish',\n  native_name: 'L\u00EBtzebuergesch',\n  rtl: false,\n};\n\nexport const LuxembourgishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.LuxembourgishBelgium,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Belgium)',\n  native_name: 'L\u00EBtzebuergesch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const LuxembourgishLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.LuxembourgishLuxembourg,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Luxembourg)',\n  native_name: 'L\u00EBtzebuergesch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Macedonian: Locale = {\n  id: LocaleCode.Macedonian,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const MacedonianNorthMacedonia: Locale = {\n  country: {\n    code: CountryCode.NorthMacedonia,\n    name: 'Macedonia',\n    native: '\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430',\n  },\n  id: LocaleCode.MacedonianNorthMacedonia,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian (North Macedonia)',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)',\n  rtl: false,\n};\n\nexport const Malay: Locale = {\n  id: LocaleCode.Malay,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay',\n  native_name: 'Bahasa Melayu',\n  rtl: false,\n};\n\nexport const MalayBrunei: Locale = {\n  country: {\n    code: CountryCode.Brunei,\n    name: 'Brunei',\n    native: 'Negara Brunei Darussalam',\n  },\n  id: LocaleCode.MalayBrunei,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Brunei)',\n  native_name: 'Bahasa Melayu (Negara Brunei Darussalam)',\n  rtl: false,\n};\n\nexport const MalayMalaysia: Locale = {\n  country: {\n    code: CountryCode.Malaysia,\n    name: 'Malaysia',\n    native: 'Malaysia',\n  },\n  id: LocaleCode.MalayMalaysia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Malaysia)',\n  native_name: 'Bahasa Melayu (Malaysia)',\n  rtl: false,\n};\n\nexport const MalaySingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.MalaySingapore,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Singapore)',\n  native_name: 'Bahasa Melayu (Singapore)',\n  rtl: false,\n};\n\nexport const MalayIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MalayIndia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (India)',\n  native_name: 'Bahasa Melayu (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Maltese: Locale = {\n  id: LocaleCode.Maltese,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese',\n  native_name: 'Malti',\n  rtl: false,\n};\n\nexport const MalteseMalta: Locale = {\n  country: {\n    code: CountryCode.Malta,\n    name: 'Malta',\n    native: 'Malta',\n  },\n  id: LocaleCode.MalteseMalta,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese (Malta)',\n  native_name: 'Malti (Malta)',\n  rtl: false,\n};\n\nexport const Maori: Locale = {\n  id: LocaleCode.Maori,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori',\n  native_name: 'M\u0101ori',\n  rtl: false,\n};\n\nexport const MaoriNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.MaoriNewZealand,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori (New Zealand)',\n  native_name: 'M\u0101ori (New Zealand)',\n  rtl: false,\n};\n\nexport const Marathi: Locale = {\n  id: LocaleCode.Marathi,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi',\n  native_name: '\u092E\u0930\u093E\u0920\u0940',\n  rtl: false,\n};\n\nexport const MarathiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MarathiIndia,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi (India)',\n  native_name: '\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Mongolian: Locale = {\n  id: LocaleCode.Mongolian,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  rtl: false,\n};\n\nexport const MongolianMongolia: Locale = {\n  country: {\n    code: CountryCode.Mongolia,\n    name: 'Mongolia',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441',\n  },\n  id: LocaleCode.MongolianMongolia,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian (Mongolia)',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)',\n  rtl: false,\n};\n\nexport const Montenegrin: Locale = {\n  id: LocaleCode.Montenegrin,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  rtl: false,\n};\n\nexport const MontenegrinMontenegro: Locale = {\n  country: {\n    code: CountryCode.Montenegro,\n    name: 'Montenegro',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  id: LocaleCode.MontenegrinMontenegro,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin (Montenegro)',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)',\n  rtl: false,\n};\n\nexport const Nepali: Locale = {\n  id: LocaleCode.Nepali,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  rtl: false,\n};\n\nexport const NepaliNepal: Locale = {\n  country: {\n    code: CountryCode.Nepal,\n    name: 'Nepal',\n    native: '\u0928\u0947\u092A\u093E\u0932',\n  },\n  id: LocaleCode.NepaliNepal,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali (Nepal)',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)',\n  rtl: false,\n};\n\nexport const NorthernSotho: Locale = {\n  id: LocaleCode.NorthernSotho,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho',\n  native_name: 'Sesotho sa Leboa',\n  rtl: false,\n};\n\nexport const NorthernSothoSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.NorthernSothoSouthAfrica,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho (South Africa)',\n  native_name: 'Sesotho sa Leboa (South Africa)',\n  rtl: false,\n};\n\nexport const Norwegian: Locale = {\n  id: LocaleCode.Norwegian,\n  language: {\n    code: LanguageCode.Norwegian,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian',\n  native_name: 'Norsk',\n  rtl: false,\n};\n\nexport const NorwegianBokmalNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianBokmalNorway,\n  language: {\n    code: LanguageCode.NorwegianBokmal,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Bokmal)',\n  native_name: 'Norsk (Bokm\u00E5l)',\n  rtl: false,\n};\n\nexport const NorwegianNynorskNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianNynorskNorway,\n  language: {\n    code: LanguageCode.NorwegianNynorsk,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Nynorsk)',\n  native_name: 'Norsk (Nynorsk)',\n  rtl: false,\n};\n\nexport const Oriya: Locale = {\n  id: LocaleCode.Oriya,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  rtl: false,\n};\n\nexport const OriyaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.OriyaIndia,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya (India)',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)',\n  rtl: false,\n};\n\nexport const Pashto: Locale = {\n  id: LocaleCode.Pashto,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto',\n  native_name: '\u067E\u069A\u062A\u0648',\n  rtl: true,\n};\n\nexport const PashtoAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PashtoAfghanistan,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto (Afghanistan)',\n  native_name: '\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Persian: Locale = {\n  id: LocaleCode.Persian,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const PersianIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.PersianIran,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Polish: Locale = {\n  id: LocaleCode.Polish,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish',\n  native_name: 'Polski',\n  rtl: false,\n};\n\nexport const PolishPoland: Locale = {\n  country: {\n    code: CountryCode.Poland,\n    name: 'Poland',\n    native: 'Polska',\n  },\n  id: LocaleCode.PolishPoland,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish (Poland)',\n  native_name: 'Polski (Polska)',\n  rtl: false,\n};\n\nexport const Portuguese: Locale = {\n  id: LocaleCode.Portuguese,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese',\n  native_name: 'Portugu\u00EAs',\n  rtl: false,\n};\n\nexport const PortugueseBrazil: Locale = {\n  country: {\n    code: CountryCode.Brazil,\n    name: 'Brazil',\n    native: 'Brasil',\n  },\n  id: LocaleCode.PortugueseBrazil,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Brazil)',\n  native_name: 'Portugu\u00EAs (Brasil)',\n  rtl: false,\n};\n\nexport const PortuguesePortugal: Locale = {\n  country: {\n    code: CountryCode.Portugal,\n    name: 'Portugal',\n    native: 'Portugal',\n  },\n  id: LocaleCode.PortuguesePortugal,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Portugal)',\n  native_name: 'Portugu\u00EAs (Portugal)',\n  rtl: false,\n};\n\nexport const Punjabi: Locale = {\n  id: LocaleCode.Punjabi,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  rtl: true,\n};\n\nexport const PunjabiPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PunjabiPakistan,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (Pakistan)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const PunjabiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0A2D\u0A3E\u0A30\u0A24',\n  },\n  id: LocaleCode.PunjabiIndia,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (India)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)',\n  rtl: true,\n};\n\nexport const Quechua: Locale = {\n  id: LocaleCode.Quechua,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua',\n  native_name: 'Runa Simi',\n  rtl: false,\n};\n\nexport const QuechuaBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.QuechuaBolivia,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Bolivia)',\n  native_name: 'Runa Simi (Bolivia)',\n  rtl: false,\n};\n\nexport const QuechuaEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.QuechuaEcuador,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Ecuador)',\n  native_name: 'Runa Simi (Ecuador)',\n  rtl: false,\n};\n\nexport const QuechuaPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.QuechuaPeru,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Peru)',\n  native_name: 'Runa Simi (Per\u00FA)',\n  rtl: false,\n};\n\nexport const Romanian: Locale = {\n  id: LocaleCode.Romanian,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian',\n  native_name: 'Rom\u00E2n\u0103',\n  rtl: false,\n};\n\nexport const RomanianRomania: Locale = {\n  country: {\n    code: CountryCode.Romania,\n    name: 'Romania',\n    native: 'Rom\u00E2nia',\n  },\n  id: LocaleCode.RomanianRomania,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian (Romania)',\n  native_name: 'Rom\u00E2n\u0103 (Rom\u00E2nia)',\n  rtl: false,\n};\n\nexport const Russian: Locale = {\n  id: LocaleCode.Russian,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  rtl: false,\n};\n\nexport const RussianRussia: Locale = {\n  country: {\n    code: CountryCode.RussianFederation,\n    name: 'Russian Federation',\n    native: '\u0420\u043E\u0441\u0441\u0438\u044F',\n  },\n  id: LocaleCode.RussianRussia,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Russia)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)',\n  rtl: false,\n};\n\nexport const RussianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.RussianUkraine,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Ukraine)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const RussianKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.RussianKazakhstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kazakhstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const RussianKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  id: LocaleCode.RussianKyrgyzstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kyrgyzstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)',\n  rtl: false,\n};\n\nexport const Sanskrit: Locale = {\n  id: LocaleCode.Sanskrit,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  rtl: false,\n};\n\nexport const SanskritIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.SanskritIndia,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit (India)',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Sami: Locale = {\n  id: LocaleCode.Sami,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami',\n  native_name: 'S\u00E1megiella',\n  rtl: false,\n};\n\nexport const SamiFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SamiFinland,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Finland)',\n  native_name: 'S\u00E1megiella (Suomi)',\n  rtl: false,\n};\n\nexport const SamiNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.SamiNorway,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Norway)',\n  native_name: 'S\u00E1megiella (Norge)',\n  rtl: false,\n};\n\nexport const SamiSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SamiSweden,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Sweden)',\n  native_name: 'S\u00E1megiella (Sverige)',\n  rtl: false,\n};\n\nexport const Samoan: Locale = {\n  id: LocaleCode.Samoan,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan',\n  native_name: 'Gagana fa\u2019a S\u0101moa',\n  rtl: false,\n};\n\nexport const SamoanSamoa: Locale = {\n  country: {\n    code: CountryCode.Samoa,\n    name: 'Samoa',\n    native: 'Samoa',\n  },\n  id: LocaleCode.SamoanSamoa,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan (Samoa)',\n  native_name: 'Gagana fa\u2019a S\u0101moa (Samoa)',\n  rtl: false,\n};\n\nexport const Serbian: Locale = {\n  id: LocaleCode.Serbian,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin)',\n  native_name: 'Srpski (Latinica)',\n  rtl: false,\n};\n\nexport const SerbianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.SerbianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Bosnia and Herzegovina)',\n  native_name: 'Srpski (Latinica) (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const SerbianSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: 'Srbija i Crna Gora',\n  },\n  id: LocaleCode.SerbianSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Serbia and Montenegro)',\n  native_name: 'Srpski (Latinica) (Srbija i Crna Gora)',\n  rtl: false,\n};\n\nexport const SerbianCyrillic: Locale = {\n  id: LocaleCode.SerbianCyrillic,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: '\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Bosnia and Herzegovina)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: '\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Serbia and Montenegro)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)',\n  rtl: false,\n};\n\nexport const Slovak: Locale = {\n  id: LocaleCode.Slovak,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak',\n  native_name: 'Sloven\u010Dina',\n  rtl: false,\n};\n\nexport const SlovakSlovakia: Locale = {\n  country: {\n    code: CountryCode.Slovakia,\n    name: 'Slovakia',\n    native: 'Slovensko',\n  },\n  id: LocaleCode.SlovakSlovakia,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak (Slovakia)',\n  native_name: 'Sloven\u010Dina (Slovensko)',\n  rtl: false,\n};\n\nexport const Slovenian: Locale = {\n  id: LocaleCode.Slovenian,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian',\n  native_name: 'Sloven\u0161\u010Dina',\n  rtl: false,\n};\n\nexport const SlovenianSlovenia: Locale = {\n  country: {\n    code: CountryCode.Slovenia,\n    name: 'Slovenia',\n    native: 'Slovenija',\n  },\n  id: LocaleCode.SlovenianSlovenia,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian (Slovenia)',\n  native_name: 'Sloven\u0161\u010Dina (Slovenija)',\n  rtl: false,\n};\n\nexport const Somali: Locale = {\n  id: LocaleCode.Somali,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali',\n  native_name: 'Soomaaliga',\n  rtl: true,\n};\n\nexport const SomaliSomalia: Locale = {\n  country: {\n    code: CountryCode.Somalia,\n    name: 'Somalia',\n    native: 'Soomaaliya',\n  },\n  id: LocaleCode.SomaliSomalia,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali (Somalia)',\n  native_name: 'Soomaaliga (Soomaaliya)',\n  rtl: true,\n};\n\nexport const Spanish: Locale = {\n  id: LocaleCode.Spanish,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish',\n  native_name: 'Espa\u00F1ol',\n  rtl: false,\n};\n\nexport const SpanishArgentina: Locale = {\n  country: {\n    code: CountryCode.Argentina,\n    name: 'Argentina',\n    native: 'Argentina',\n  },\n  id: LocaleCode.SpanishArgentina,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Argentina)',\n  native_name: 'Espa\u00F1ol (Argentina)',\n  rtl: false,\n};\n\nexport const SpanishBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.SpanishBolivia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Bolivia)',\n  native_name: 'Espa\u00F1ol (Bolivia)',\n  rtl: false,\n};\n\nexport const SpanishChile: Locale = {\n  country: {\n    code: CountryCode.Chile,\n    name: 'Chile',\n    native: 'Chile',\n  },\n  id: LocaleCode.SpanishChile,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Chile)',\n  native_name: 'Espa\u00F1ol (Chile)',\n  rtl: false,\n};\n\nexport const SpanishColombia: Locale = {\n  country: {\n    code: CountryCode.Colombia,\n    name: 'Colombia',\n    native: 'Colombia',\n  },\n  id: LocaleCode.SpanishColombia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Colombia)',\n  native_name: 'Espa\u00F1ol (Colombia)',\n  rtl: false,\n};\n\nexport const SpanishCostaRica: Locale = {\n  country: {\n    code: CountryCode.CostaRica,\n    name: 'Costa Rica',\n    native: 'Costa Rica',\n  },\n  id: LocaleCode.SpanishCostaRica,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Costa Rica)',\n  native_name: 'Espa\u00F1ol (Costa Rica)',\n  rtl: false,\n};\n\nexport const SpanishCuba: Locale = {\n  country: {\n    code: CountryCode.Cuba,\n    name: 'Cuba',\n    native: 'Cuba',\n  },\n  id: LocaleCode.SpanishCuba,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Cuba)',\n  native_name: 'Espa\u00F1ol (Cuba)',\n  rtl: false,\n};\n\nexport const SpanishDominicanRepublic: Locale = {\n  country: {\n    code: CountryCode.DominicanRepublic,\n    name: 'Dominican Republic',\n    native: 'Rep\u00FAblica Dominicana',\n  },\n  id: LocaleCode.SpanishDominicanRepublic,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Dominican Republic)',\n  native_name: 'Espa\u00F1ol (Rep\u00FAblica Dominicana)',\n  rtl: false,\n};\n\nexport const SpanishEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.SpanishEcuador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Ecuador)',\n  native_name: 'Espa\u00F1ol (Ecuador)',\n  rtl: false,\n};\n\nexport const SpanishElSalvador: Locale = {\n  country: {\n    code: CountryCode.ElSalvador,\n    name: 'El Salvador',\n    native: 'El Salvador',\n  },\n  id: LocaleCode.SpanishElSalvador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (El Salvador)',\n  native_name: 'Espa\u00F1ol (El Salvador)',\n  rtl: false,\n};\n\nexport const SpanishEquatorialGuinea: Locale = {\n  country: {\n    code: CountryCode.EquatorialGuinea,\n    name: 'Equatorial Guinea',\n    native: 'Guinea Ecuatorial',\n  },\n  id: LocaleCode.SpanishEquatorialGuinea,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Equatorial Guinea)',\n  native_name: 'Espa\u00F1ol (Guinea Ecuatorial)',\n  rtl: false,\n};\n\nexport const SpanishGuatemala: Locale = {\n  country: {\n    code: CountryCode.Guatemala,\n    name: 'Guatemala',\n    native: 'Guatemala',\n  },\n  id: LocaleCode.SpanishGuatemala,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Guatemala)',\n  native_name: 'Espa\u00F1ol (Guatemala)',\n  rtl: false,\n};\n\nexport const SpanishHonduras: Locale = {\n  country: {\n    code: CountryCode.Honduras,\n    name: 'Honduras',\n    native: 'Honduras',\n  },\n  id: LocaleCode.SpanishHonduras,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Honduras)',\n  native_name: 'Espa\u00F1ol (Honduras)',\n  rtl: false,\n};\n\nexport const SpanishMexico: Locale = {\n  country: {\n    code: CountryCode.Mexico,\n    name: 'Mexico',\n    native: 'M\u00E9xico',\n  },\n  id: LocaleCode.SpanishMexico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Mexico)',\n  native_name: 'Espa\u00F1ol (M\u00E9xico)',\n  rtl: false,\n};\n\nexport const SpanishNicaragua: Locale = {\n  country: {\n    code: CountryCode.Nicaragua,\n    name: 'Nicaragua',\n    native: 'Nicaragua',\n  },\n  id: LocaleCode.SpanishNicaragua,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Nicaragua)',\n  native_name: 'Espa\u00F1ol (Nicaragua)',\n  rtl: false,\n};\n\nexport const SpanishPanama: Locale = {\n  country: {\n    code: CountryCode.Panama,\n    name: 'Panama',\n    native: 'Panam\u00E1',\n  },\n  id: LocaleCode.SpanishPanama,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Panama)',\n  native_name: 'Espa\u00F1ol (Panam\u00E1)',\n  rtl: false,\n};\n\nexport const SpanishParaguay: Locale = {\n  country: {\n    code: CountryCode.Paraguay,\n    name: 'Paraguay',\n    native: 'Paraguay',\n  },\n  id: LocaleCode.SpanishParaguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Paraguay)',\n  native_name: 'Espa\u00F1ol (Paraguay)',\n  rtl: false,\n};\n\nexport const SpanishPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.SpanishPeru,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Peru)',\n  native_name: 'Espa\u00F1ol (Per\u00FA)',\n  rtl: false,\n};\n\nexport const SpanishPuertoRico: Locale = {\n  country: {\n    code: CountryCode.PuertoRico,\n    name: 'Puerto Rico',\n    native: 'Puerto Rico',\n  },\n  id: LocaleCode.SpanishPuertoRico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Puerto Rico)',\n  native_name: 'Espa\u00F1ol (Puerto Rico)',\n  rtl: false,\n};\n\nexport const SpanishUruguay: Locale = {\n  country: {\n    code: CountryCode.Uruguay,\n    name: 'Uruguay',\n    native: 'Uruguay',\n  },\n  id: LocaleCode.SpanishUruguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Uruguay)',\n  native_name: 'Espa\u00F1ol (Uruguay)',\n  rtl: false,\n};\n\nexport const SpanishVenezuela: Locale = {\n  country: {\n    code: CountryCode.Venezuela,\n    name: 'Venezuela',\n    native: 'Venezuela',\n  },\n  id: LocaleCode.SpanishVenezuela,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Venezuela)',\n  native_name: 'Espa\u00F1ol (Venezuela)',\n  rtl: false,\n};\n\nexport const SutuSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.SutuSouthAfrica,\n  language: {\n    code: LanguageCode.Sutu,\n    name: 'Sutu',\n    native: 'Sesotho',\n  },\n  name: 'Sutu (South Africa)',\n  native_name: 'Sesotho (Afrika Borwa)',\n  rtl: false,\n};\n\nexport const Swahili: Locale = {\n  id: LocaleCode.Swahili,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili',\n  native_name: 'Kiswahili',\n  rtl: false,\n};\n\nexport const SwahiliKenya: Locale = {\n  country: {\n    code: CountryCode.Kenya,\n    name: 'Kenya',\n    native: 'Kenya',\n  },\n  id: LocaleCode.SwahiliKenya,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili (Kenya)',\n  native_name: 'Kiswahili (Kenya)',\n  rtl: false,\n};\n\nexport const Swedish: Locale = {\n  id: LocaleCode.Swedish,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish',\n  native_name: 'Svenska',\n  rtl: false,\n};\n\nexport const SwedishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SwedishFinland,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Finland)',\n  native_name: 'Svenska (Finland)',\n  rtl: false,\n};\n\nexport const SwedishSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SwedishSweden,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Sweden)',\n  native_name: 'Svenska (Sverige)',\n  rtl: false,\n};\n\nexport const Syriac: Locale = {\n  id: LocaleCode.Syriac,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  rtl: true,\n};\n\nexport const SyriacSyria: Locale = {\n  country: {\n    code: CountryCode.Syria,\n    name: 'Syria',\n    native: '\u0633\u0648\u0631\u064A\u0627',\n  },\n  id: LocaleCode.SyriacSyria,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac (Syria)',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)',\n  rtl: true,\n};\n\nexport const Tajik: Locale = {\n  id: LocaleCode.Tajik,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  rtl: false,\n};\n\nexport const TajikTajikistan: Locale = {\n  country: {\n    code: CountryCode.Tajikistan,\n    name: 'Tajikistan',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.TajikTajikistan,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik (Tajikistan)',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Tagalog: Locale = {\n  id: LocaleCode.Tagalog,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog',\n  native_name: 'Tagalog',\n  rtl: false,\n};\n\nexport const TagalogPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.TagalogPhilippines,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog (Philippines)',\n  native_name: 'Tagalog (Pilipinas)',\n  rtl: false,\n};\n\nexport const Tamil: Locale = {\n  id: LocaleCode.Tamil,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  rtl: false,\n};\n\nexport const TamilIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TamilIndia,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil (India)',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Telugu: Locale = {\n  id: LocaleCode.Telugu,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  rtl: false,\n};\n\nexport const TeluguIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02',\n  },\n  id: LocaleCode.TeluguIndia,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu (India)',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)',\n  rtl: false,\n};\n\nexport const Thai: Locale = {\n  id: LocaleCode.Thai,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai',\n  native_name: '\u0E44\u0E17\u0E22',\n  rtl: false,\n};\n\nexport const ThaiThailand: Locale = {\n  country: {\n    code: CountryCode.Thailand,\n    name: 'Thailand',\n    native: '\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22',\n  },\n  id: LocaleCode.ThaiThailand,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai (Thailand)',\n  native_name: '\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)',\n  rtl: false,\n};\n\nexport const Tibetan: Locale = {\n  id: LocaleCode.Tibetan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const TibetanChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.TibetanChina,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (China)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)',\n  rtl: false,\n};\n\nexport const TibetanBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D',\n  },\n  id: LocaleCode.TibetanBhutan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)',\n  rtl: false,\n};\n\nexport const TibetanIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TibetanIndia,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (India)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Tsonga: Locale = {\n  id: LocaleCode.Tsonga,\n  language: {\n    code: LanguageCode.Tsonga,\n    name: 'Tsonga',\n    native: 'Xitsonga',\n  },\n  name: 'Tsonga',\n  native_name: 'Xitsonga',\n  rtl: false,\n};\n\nexport const Tswana: Locale = {\n  id: LocaleCode.Tswana,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana',\n  native_name: 'Setswana',\n  rtl: false,\n};\n\nexport const TswanaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.TswanaSouthAfrica,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana (South Africa)',\n  native_name: 'Setswana (South Africa)',\n  rtl: false,\n};\n\nexport const Turkish: Locale = {\n  id: LocaleCode.Turkish,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish',\n  native_name: 'T\u00FCrk\u00E7e',\n  rtl: false,\n};\n\nexport const TurkishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.TurkishTurkey,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish (Turkey)',\n  native_name: 'T\u00FCrk\u00E7e (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Ukrainian: Locale = {\n  id: LocaleCode.Ukrainian,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  rtl: false,\n};\n\nexport const UkrainianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.UkrainianUkraine,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian (Ukraine)',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const Urdu: Locale = {\n  id: LocaleCode.Urdu,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu',\n  native_name: '\u0627\u0631\u062F\u0648',\n  rtl: true,\n};\n\nexport const UrduAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduAfghanistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Afghanistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UrduIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.UrduIndia,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (India)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)',\n  rtl: true,\n};\n\nexport const UrduPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduPakistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Pakistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UzbekLatin: Locale = {\n  id: LocaleCode.Uzbek,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek',\n  native_name: 'O\u02BBzbekcha',\n  rtl: false,\n};\n\nexport const UzbekUzbekistan: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: 'O\u02BBzbekiston',\n  },\n  id: LocaleCode.UzbekUzbekistan,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek (Latin, Uzbekistan)',\n  native_name: 'O\u02BBzbekcha (O\u02BBzbekiston)',\n  rtl: false,\n};\n\nexport const UzbekCyrillic: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.UzbekCyrillic,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  name: 'Uzbek (Cyrillic)',\n  native_name: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Vietnamese: Locale = {\n  id: LocaleCode.Vietnamese,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t',\n  rtl: false,\n};\n\nexport const VietnameseVietnam: Locale = {\n  country: {\n    code: CountryCode.Vietnam,\n    name: 'Vietnam',\n    native: 'Vi\u1EC7t Nam',\n  },\n  id: LocaleCode.VietnameseVietnam,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese (Vietnam)',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)',\n  rtl: false,\n};\n\nexport const Welsh: Locale = {\n  id: LocaleCode.Welsh,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh',\n  native_name: 'Cymraeg',\n  rtl: false,\n};\n\nexport const WelshUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.WelshUnitedKingdom,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh (United Kingdom)',\n  native_name: 'Cymraeg (United Kingdom)',\n  rtl: false,\n};\n\nexport const Xhosa: Locale = {\n  id: LocaleCode.Xhosa,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa',\n  native_name: 'isiXhosa',\n  rtl: false,\n};\n\nexport const XhosaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.XhosaSouthAfrica,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa (South Africa)',\n  native_name: 'isiXhosa (South Africa)',\n  rtl: false,\n};\n\nexport const Yiddish: Locale = {\n  id: LocaleCode.Yiddish,\n  language: {\n    code: LanguageCode.Yiddish,\n    name: 'Yiddish',\n    native: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  },\n  name: 'Yiddish',\n  native_name: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  rtl: false,\n};\n\nexport const Yoruba: Locale = {\n  id: LocaleCode.Yoruba,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba',\n  native_name: 'Yor\u00F9b\u00E1',\n  rtl: false,\n};\n\nexport const YorubaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.YorubaNigeria,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba (Nigeria)',\n  native_name: 'Yor\u00F9b\u00E1 (Nigeria)',\n  rtl: false,\n};\n\n// export const ZhuyinMandarin: Locale = {\n//   id: LocaleCode.ZhuyinMandarin,\n//   language: {\n//     code: LanguageCode.Mandarin,\n//     name: 'Mandarin',\n//     native: '\u666E\u901A\u8BDD',\n//   },\n//   name: 'Zhuyin (Mandarin)',\n//   native_name: '\u666E\u901A\u8BDD (\u666E\u901A\u8BDD)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinChina: Locale = {\n//   country: {\n//     code: CountryCode.China,\n//     name: 'China',\n//     native: '\u4E2D\u56FD',\n//   },\n//   id: LocaleCode.ZhuyinMandarinChina,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, China)',\n//   native_name: 'Zhuyin (Mandarin, China)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinTaiwan: Locale = {\n//   country: {\n//     code: CountryCode.Taiwan,\n//     name: 'Taiwan',\n//     native: '\u81FA\u7063',\n//   },\n//   id: LocaleCode.ZhuyinMandarinTaiwan,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Taiwan)',\n//   native_name: 'Zhuyin (Mandarin, Taiwan)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinHongKong: Locale = {\n//   country: {\n//     code: CountryCode.HongKong,\n//     name: 'Hong Kong',\n//     native: '\u9999\u6E2F',\n//   },\n//   id: LocaleCode.ZhuyinMandarinHongKong,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Hong Kong)',\n//   native_name: 'Zhuyin (Mandarin, Hong Kong)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinMacau: Locale = {\n//   country: {\n//     code: CountryCode.Macau,\n//     name: 'Macau',\n//     native: '\u6FB3\u9580',\n//   },\n//   id: LocaleCode.ZhuyinMandarinMacau,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Macau)',\n//   native_name: 'Zhuyin (Mandarin, Macau)',\n//   rtl: false,\n// };\n\nexport const Zulu: Locale = {\n  id: LocaleCode.Zulu,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu',\n  native_name: 'isiZulu',\n  rtl: false,\n};\n\nexport const ZuluSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.ZuluSouthAfrica,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu (South Africa)',\n  native_name: 'isiZulu (South Africa)',\n  rtl: false,\n};\n", "import { TimezoneRegions } from './region.js';\nimport { TimezoneRegion } from './region';\nimport { TimezoneOffset } from './timezone.js';\nimport { Timezones } from './timezones.js';\n\nexport const AfricaAbidjan: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAbidjan,\n  name: 'Africa/Abidjan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAccra: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAccra,\n  name: 'Africa/Accra',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAddisAbaba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAddisAbaba,\n  name: 'Africa/Addis_Ababa',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaAlgiers: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAlgiers,\n  name: 'Africa/Algiers',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaAsmara: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAsmara,\n  name: 'Africa/Asmara',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaBamako: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBamako,\n  name: 'Africa/Bamako',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBangui: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBangui,\n  name: 'Africa/Bangui',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBanjul: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBanjul,\n  name: 'Africa/Banjul',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBissau: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBissau,\n  name: 'Africa/Bissau',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBlantyre: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBlantyre,\n  name: 'Africa/Blantyre',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaBrazzaville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBrazzaville,\n  name: 'Africa/Brazzaville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBujumbura: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBujumbura,\n  name: 'Africa/Bujumbura',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaCairo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCairo,\n  name: 'Africa/Cairo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AfricaCasablanca: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCasablanca,\n  name: 'Africa/Casablanca',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AfricaCeuta: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCeuta,\n  name: 'Africa/Ceuta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaConakry: TimezoneRegion = {\n  id: TimezoneRegions.AfricaConakry,\n  name: 'Africa/Conakry',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDakar: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDakar,\n  name: 'Africa/Dakar',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDarEsSalaam: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDarEsSalaam,\n  name: 'Africa/Dar_es_Salaam',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDjibouti: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDjibouti,\n  name: 'Africa/Djibouti',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDouala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDouala,\n  name: 'Africa/Douala',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaElAaiun: TimezoneRegion = {\n  id: TimezoneRegions.AfricaElAaiun,\n  name: 'Africa/El_Aaiun',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaFreetown: TimezoneRegion = {\n  id: TimezoneRegions.AfricaFreetown,\n  name: 'Africa/Freetown',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaGaborone: TimezoneRegion = {\n  id: TimezoneRegions.AfricaGaborone,\n  name: 'Africa/Gaborone',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaHarare: TimezoneRegion = {\n  id: TimezoneRegions.AfricaHarare,\n  name: 'Africa/Harare',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaJohannesburg: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJohannesburg,\n  name: 'Africa/Johannesburg',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaJuba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJuba,\n  name: 'Africa/Juba',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKampala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKampala,\n  name: 'Africa/Kampala',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKhartoum: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKhartoum,\n  name: 'Africa/Khartoum',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKigali: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKigali,\n  name: 'Africa/Kigali',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaKinshasa: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKinshasa,\n  name: 'Africa/Kinshasa',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLagos: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLagos,\n  name: 'Africa/Lagos',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLibreville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLibreville,\n  name: 'Africa/Libreville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLome,\n  name: 'Africa/Lome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaLuanda: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLuanda,\n  name: 'Africa/Luanda',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLubumbashi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLubumbashi,\n  name: 'Africa/Lubumbashi',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaLusaka: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLusaka,\n  name: 'Africa/Lusaka',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMalabo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMalabo,\n  name: 'Africa/Malabo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaMaputo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaputo,\n  name: 'Africa/Maputo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMaseru: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaseru,\n  name: 'Africa/Maseru',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMbabane: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMbabane,\n  name: 'Africa/Mbabane',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMogadishu: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMogadishu,\n  name: 'Africa/Mogadishu',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaMonrovia: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMonrovia,\n  name: 'Africa/Monrovia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaNairobi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNairobi,\n  name: 'Africa/Nairobi',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaNdjamena: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNdjamena,\n  name: 'Africa/Ndjamena',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNiamey: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNiamey,\n  name: 'Africa/Niamey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNouakchott: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNouakchott,\n  name: 'Africa/Nouakchott',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AfricaOuagadougou: TimezoneRegion = {\n  id: TimezoneRegions.AfricaOuagadougou,\n  name: 'Africa/Ouagadougou',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaPortoNovo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaPortoNovo,\n  name: 'Africa/Porto-Novo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaSaoTome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaSaoTome,\n  name: 'Africa/SaoTome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTripoli: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTripoli,\n  name: 'Africa/Tripoli',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTunis: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTunis,\n  name: 'Africa/Tunis',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaWindhoek: TimezoneRegion = {\n  id: TimezoneRegions.AfricaWindhoek,\n  name: 'Africa/Windhoek',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AmericaAdak: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAdak,\n  name: 'America/Adak',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaAnchorage: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnchorage,\n  name: 'America/Anchorage',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaAnguilla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnguilla,\n  name: 'America/Anguilla',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAntigua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAntigua,\n  name: 'America/Antigua',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAraguaina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAraguaina,\n  name: 'America/Araguaina',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaArgentinaBuenosAires: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaBuenosAires,\n  name: 'America/Argentina/Buenos_Aires',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCatamarca: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCatamarca,\n  name: 'America/Argentina/Catamarca',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCordoba,\n  name: 'America/Argentina/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaJujuy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaJujuy,\n  name: 'America/Argentina/Jujuy',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaLaRioja: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaLaRioja,\n  name: 'America/Argentina/La_Rioja',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaMendoza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaMendoza,\n  name: 'America/Argentina/Mendoza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaRioGallegos: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaRioGallegos,\n  name: 'America/Argentina/Rio_Gallegos',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSalta: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSalta,\n  name: 'America/Argentina/Salta',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanJuan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanJuan,\n  name: 'America/Argentina/San_Juan',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanLuis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanLuis,\n  name: 'America/Argentina/San_Luis',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaTucuman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaTucuman,\n  name: 'America/Argentina/Tucuman',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaUshuaia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaUshuaia,\n  name: 'America/Argentina/Ushuaia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaAruba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAruba,\n  name: 'America/Aruba',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAsuncion: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAsuncion,\n  name: 'America/Asuncion',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ParaguayTime,\n};\n\nexport const AmericaAtikokan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtikokan,\n  name: 'America/Atikokan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaAtka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtka,\n  name: 'America/Atka',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaBahia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahia,\n  name: 'America/Bahia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBahiaBanderas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahiaBanderas,\n  name: 'America/Bahia_Banderas',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBarbados: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBarbados,\n  name: 'America/Barbados',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBelem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelem,\n  name: 'America/Belem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBelize: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelize,\n  name: 'America/Belize',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBlancSablon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBlancSablon,\n  name: 'America/Blanc-Sablon',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBoaVista: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoaVista,\n  name: 'America/Boa_Vista',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaBogota: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBogota,\n  name: 'America/Bogota',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.ColombiaTime,\n};\n\nexport const AmericaBoise: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoise,\n  name: 'America/Boise',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCambridgeBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCambridgeBay,\n  name: 'America/Cambridge_Bay',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCampoGrande: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCampoGrande,\n  name: 'America/Campo_Grande',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCancun: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCancun,\n  name: 'America/Cancun',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCaracas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCaracas,\n  name: 'America/Caracas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.VenezuelaStandardTime,\n};\n\nexport const AmericaCayenne: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayenne,\n  name: 'America/Cayenne',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.FrenchGuianaTime,\n};\n\nexport const AmericaCayman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayman,\n  name: 'America/Cayman',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaChicago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChicago,\n  name: 'America/Chicago',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaChihuahua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChihuahua,\n  name: 'America/Chihuahua',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCoralHarbour: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCoralHarbour,\n  name: 'America/Coral_Harbour',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCordoba,\n  name: 'America/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaCostaRica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCostaRica,\n  name: 'America/Costa_Rica',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaCreston: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCreston,\n  name: 'America/Creston',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCuiaba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuiaba,\n  name: 'America/Cuiaba',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCuracao: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuracao,\n  name: 'America/Curacao',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaDanmarkshavn: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDanmarkshavn,\n  name: 'America/Danmarkshavn',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AmericaDawson: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawson,\n  name: 'America/Dawson',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDawsonCreek: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawsonCreek,\n  name: 'America/Dawson_Creek',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDenver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDenver,\n  name: 'America/Denver',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaDetroit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDetroit,\n  name: 'America/Detroit',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaDominica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDominica,\n  name: 'America/Dominica',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaEdmonton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEdmonton,\n  name: 'America/Edmonton',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaEirunepe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEirunepe,\n  name: 'America/Eirunepe',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaElSalvador: TimezoneRegion = {\n  id: TimezoneRegions.AmericaElSalvador,\n  name: 'America/El_Salvador',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaFortaleza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaFortaleza,\n  name: 'America/Fortaleza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaGlaceBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGlaceBay,\n  name: 'America/Glace_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGodthab: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGodthab,\n  name: 'America/Godthab',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.WestGreenlandTime,\n};\n\nexport const AmericaGooseBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGooseBay,\n  name: 'America/Goose_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrandTurk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrandTurk,\n  name: 'America/Grand_Turk',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrenada: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrenada,\n  name: 'America/Grenada',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuadeloupe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuadeloupe,\n  name: 'America/Guadeloupe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuatemala: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuatemala,\n  name: 'America/Guatemala',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaGuayaquil: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuayaquil,\n  name: 'America/Guayaquil',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EcuadorTime,\n};\n\nexport const AmericaGuyana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuyana,\n  name: 'America/Guyana',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHalifax: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHalifax,\n  name: 'America/Halifax',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHavana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHavana,\n  name: 'America/Havana',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CubaStandardTime,\n};\n\nexport const AmericaHermosillo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHermosillo,\n  name: 'America/Hermosillo',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIndianaIndianapolis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaIndianapolis,\n  name: 'America/Indiana/Indianapolis',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaKnox: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaKnox,\n  name: 'America/Indiana/Knox',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaMarengo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaMarengo,\n  name: 'America/Indiana/Marengo',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaPetersburg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaPetersburg,\n  name: 'America/Indiana/Petersburg',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaTellCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaTellCity,\n  name: 'America/Indiana/Tell_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaVevay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVevay,\n  name: 'America/Indiana/Vevay',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaVincennes: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVincennes,\n  name: 'America/Indiana/Vincennes',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaWinamac: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaWinamac,\n  name: 'America/Indiana/Winamac',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaInuvik: TimezoneRegion = {\n  id: TimezoneRegions.AmericaInuvik,\n  name: 'America/Inuvik',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIqaluit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIqaluit,\n  name: 'America/Iqaluit',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaJamaica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJamaica,\n  name: 'America/Jamaica',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaJuneau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJuneau,\n  name: 'America/Juneau',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaKentuckyLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyLouisville,\n  name: 'America/Kentucky/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKentuckyMonticello: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyMonticello,\n  name: 'America/Kentucky/Monticello',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKralendijk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKralendijk,\n  name: 'America/Kralendijk',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaLaPaz: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLaPaz,\n  name: 'America/La_Paz',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.BoliviaTime,\n};\n\nexport const AmericaLima: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLima,\n  name: 'America/Lima',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.PeruTime,\n};\n\nexport const AmericaLosAngeles: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLosAngeles,\n  name: 'America/Los_Angeles',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLouisville,\n  name: 'America/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaLowerPrinces: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLowerPrinces,\n  name: 'America/Lower_Princes',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMaceio: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMaceio,\n  name: 'America/Maceio',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaManagua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManagua,\n  name: 'America/Managua',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaManaus: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManaus,\n  name: 'America/Manaus',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaMarigot: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMarigot,\n  name: 'America/Marigot',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMartinique: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMartinique,\n  name: 'America/Martinique',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMatamoros: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMatamoros,\n  name: 'America/Matamoros',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMazatlan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMazatlan,\n  name: 'America/Mazatlan',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaMenominee: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMenominee,\n  name: 'America/Menominee',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMerida: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMerida,\n  name: 'America/Merida',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMetlakatla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMetlakatla,\n  name: 'America/Metlakatla',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaMexicoCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMexicoCity,\n  name: 'America/Mexico_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMiquelon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMiquelon,\n  name: 'America/Miquelon',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SaintPierreAndMiquelonStandardTime,\n};\n\nexport const AmericaMoncton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMoncton,\n  name: 'America/Moncton',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMonterrey: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMonterrey,\n  name: 'America/Monterrey',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMontevideo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontevideo,\n  name: 'America/Montevideo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.UruguayStandardTime,\n};\n\nexport const AmericaMontreal: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontreal,\n  name: 'America/Montreal',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaMontserrat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontserrat,\n  name: 'America/Montserrat',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaNassau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNassau,\n  name: 'America/Nassau',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNewYork: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNewYork,\n  name: 'America/New_York',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNipigon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNipigon,\n  name: 'America/Nipigon',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNome: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNome,\n  name: 'America/Nome',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaNoronha: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNoronha,\n  name: 'America/Noronha',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.FernandoDeNoronhaTime,\n};\n\nexport const AmericaNorthDakotaBeulah: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaBeulah,\n  name: 'America/North_Dakota/Beulah',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaCenter: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaCenter,\n  name: 'America/North_Dakota/Center',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaNewSalem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaNewSalem,\n  name: 'America/North_Dakota/New_Salem',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaOjinaga: TimezoneRegion = {\n  id: TimezoneRegions.AmericaOjinaga,\n  name: 'America/Ojinaga',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPanama: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPanama,\n  name: 'America/Panama',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPangnirtung: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPangnirtung,\n  name: 'America/Pangnirtung',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaParamaribo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaParamaribo,\n  name: 'America/Paramaribo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SurinameTime,\n};\n\nexport const AmericaPhoenix: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPhoenix,\n  name: 'America/Phoenix',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPortAuPrince: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortAuPrince,\n  name: 'America/Port-au-Prince',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPortOfSpain: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortOfSpain,\n  name: 'America/Port_of_Spain',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaPortoVelho: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortoVelho,\n  name: 'America/Porto_Velho',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaPuertoRico: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPuertoRico,\n  name: 'America/Puerto_Rico',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaRainyRiver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRainyRiver,\n  name: 'America/Rainy_River',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRankinInlet: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRankinInlet,\n  name: 'America/Rankin_Inlet',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRecife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRecife,\n  name: 'America/Recife',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaRegina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRegina,\n  name: 'America/Regina',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaResolute: TimezoneRegion = {\n  id: TimezoneRegions.AmericaResolute,\n  name: 'America/Resolute',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRioBranco: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRioBranco,\n  name: 'America/Rio_Branco',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaSantaIsabel: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantaIsabel,\n  name: 'America/Santa_Isabel',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaSantarem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantarem,\n  name: 'America/Santarem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaSantiago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantiago,\n  name: 'America/Santiago',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChileStandardTime,\n};\n\nexport const AmericaSantoDomingo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantoDomingo,\n  name: 'America/Santo_Domingo',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSaoPaulo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSaoPaulo,\n  name: 'America/Sao_Paulo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaScoresbysund: TimezoneRegion = {\n  id: TimezoneRegions.AmericaScoresbysund,\n  name: 'America/Scoresbysund',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.EasternGreenlandTime,\n};\n\nexport const AmericaShiprock: TimezoneRegion = {\n  id: TimezoneRegions.AmericaShiprock,\n  name: 'America/Shiprock',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaSitka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSitka,\n  name: 'America/Sitka',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaStBarthelemy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStBarthelemy,\n  name: 'America/St_Barthelemy',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStJohns: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStJohns,\n  name: 'America/St_Johns',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AmericaStKitts: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStKitts,\n  name: 'America/St_Kitts',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStLucia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStLucia,\n  name: 'America/St_Lucia',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStThomas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStThomas,\n  name: 'America/St_Thomas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStVincent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStVincent,\n  name: 'America/St_Vincent',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSwiftCurrent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSwiftCurrent,\n  name: 'America/Swift_Current',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaTegucigalpa: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTegucigalpa,\n  name: 'America/Tegucigalpa',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaThule: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThule,\n  name: 'America/Thule',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaThunderBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThunderBay,\n  name: 'America/Thunder_Bay',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTijuana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTijuana,\n  name: 'America/Tijuana',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaToronto: TimezoneRegion = {\n  id: TimezoneRegions.AmericaToronto,\n  name: 'America/Toronto',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTortola: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTortola,\n  name: 'America/Tortola',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaVancouver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaVancouver,\n  name: 'America/Vancouver',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWhitehorse: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWhitehorse,\n  name: 'America/Whitehorse',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWinnipeg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWinnipeg,\n  name: 'America/Winnipeg',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaYakutat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYakutat,\n  name: 'America/Yakutat',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaYellowknife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYellowknife,\n  name: 'America/Yellowknife',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AntarcticaCasey: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaCasey,\n  name: 'Antarctica/Casey',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.WesternStandardTime,\n};\n\nexport const AntarcticaDavis: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDavis,\n  name: 'Antarctica/Davis',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AntarcticaDumontDUrville: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDumontDUrville,\n  name: 'Antarctica/DumontDUrville',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMacquarie: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMacquarie,\n  name: 'Antarctica/Macquarie',\n  offset: TimezoneOffset.UTC_MINUS_11,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMawson: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMawson,\n  name: 'Antarctica/Mawson',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMcMurdo: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMcMurdo,\n  name: 'Antarctica/McMurdo',\n  offset: TimezoneOffset.UTC_MINUS_12,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const AntarcticaPalmer: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaPalmer,\n  name: 'Antarctica/Palmer',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const AntarcticaRothera: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaRothera,\n  name: 'Antarctica/Rothera',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.RotheraResearchStationTime,\n};\n\nexport const AntarcticaSyowa: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaSyowa,\n  name: 'Antarctica/Syowa',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ShowaStationTime,\n};\n\nexport const AntarcticaTroll: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaTroll,\n  name: 'Antarctica/Troll',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaVostok: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaVostok,\n  name: 'Antarctica/Vostok',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const ArcticLongyearbyen: TimezoneRegion = {\n  id: TimezoneRegions.ArcticLongyearbyen,\n  name: 'Arctic/Longyearbyen',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AsiaAden: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAden,\n  name: 'Asia/Aden',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaAlmaty: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAlmaty,\n  name: 'Asia/Almaty',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.AlmaAtaTime,\n};\n\nexport const AsiaAmman: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAmman,\n  name: 'Asia/Amman',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaAnadyr: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAnadyr,\n  name: 'Asia/Anadyr',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const AsiaAqtau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtau,\n  name: 'Asia/Aqtau',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAqtobe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtobe,\n  name: 'Asia/Aqtobe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAshgabat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAshgabat,\n  name: 'Asia/Ashgabat',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TurkmenistanTime,\n};\n\nexport const AsiaBaghdad: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaghdad,\n  name: 'Asia/Baghdad',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBahrain: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBahrain,\n  name: 'Asia/Bahrain',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBaku: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaku,\n  name: 'Asia/Baku',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AzerbaijanTime,\n};\n\nexport const AsiaBangkok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBangkok,\n  name: 'Asia/Bangkok',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaBarnaul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBarnaul,\n  name: 'Asia/Barnaul',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaBeirut: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBeirut,\n  name: 'Asia/Beirut',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaBishkek: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBishkek,\n  name: 'Asia/Bishkek',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KyrgyzstanTime,\n};\n\nexport const AsiaBrunei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBrunei,\n  name: 'Asia/Brunei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.BruneiTime,\n};\n\nexport const AsiaChita: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChita,\n  name: 'Asia/Chita',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaChoibalsan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChoibalsan,\n  name: 'Asia/Choibalsan',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChoibalsanStandardTime,\n};\n\nexport const AsiaColombo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaColombo,\n  name: 'Asia/Colombo',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaDamascus: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDamascus,\n  name: 'Asia/Damascus',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaDhaka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDhaka,\n  name: 'Asia/Dhaka',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BangladeshStandardTime,\n};\n\nexport const AsiaDili: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDili,\n  name: 'Asia/Dili',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaDubai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDubai,\n  name: 'Asia/Dubai',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaDushanbe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDushanbe,\n  name: 'Asia/Dushanbe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TajikistanTime,\n};\n\nexport const AsiaFamagusta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaFamagusta,\n  name: 'Asia/Famagusta',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaGaza: TimezoneRegion = {\n  id: TimezoneRegions.AsiaGaza,\n  name: 'Asia/Gaza',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHebron: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHebron,\n  name: 'Asia/Hebron',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHoChiMinh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHoChiMinh,\n  name: 'Asia/Ho_Chi_Minh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaHongKong: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHongKong,\n  name: 'Asia/Hong_Kong',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.HongKongTime,\n};\n\nexport const AsiaHovd: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHovd,\n  name: 'Asia/Hovd',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.HovdTime,\n};\n\nexport const AsiaIrkutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaIrkutsk,\n  name: 'Asia/Irkutsk',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.IrkutskTime,\n};\n\nexport const AsiaJakarta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJakarta,\n  name: 'Asia/Jakarta',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaJayapura: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJayapura,\n  name: 'Asia/Jayapura',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaJerusalem: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJerusalem,\n  name: 'Asia/Jerusalem',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaKabul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKabul,\n  name: 'Asia/Kabul',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AfghanistanTime,\n};\n\nexport const AsiaKamchatka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKamchatka,\n  name: 'Asia/Kamchatka',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.KamchatkaTime,\n};\n\nexport const AsiaKarachi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKarachi,\n  name: 'Asia/Karachi',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.PakistanStandardTime,\n};\n\nexport const AsiaKathmandu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKathmandu,\n  name: 'Asia/Kathmandu',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.NepalTime,\n};\n\nexport const AsiaKhandyga: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKhandyga,\n  name: 'Asia/Khandyga',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaKolkata: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKolkata,\n  name: 'Asia/Kolkata',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaKrasnoyarsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKrasnoyarsk,\n  name: 'Asia/Krasnoyarsk',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\nexport const AsiaKualaLumpur: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKualaLumpur,\n  name: 'Asia/Kuala_Lumpur',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuching: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuching,\n  name: 'Asia/Kuching',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuwait: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuwait,\n  name: 'Asia/Kuwait',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaMacau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMacau,\n  name: 'Asia/Macau',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaMagadan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMagadan,\n  name: 'Asia/Magadan',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.MagadanTime,\n};\n\nexport const AsiaMakassar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMakassar,\n  name: 'Asia/Makassar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaTime,\n};\n\nexport const AsiaManila: TimezoneRegion = {\n  id: TimezoneRegions.AsiaManila,\n  name: 'Asia/Manila',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PhilippineTime,\n};\n\nexport const AsiaMuscat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMuscat,\n  name: 'Asia/Muscat',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaNovokuznetsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovokuznetsk,\n  name: 'Asia/Novokuznetsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaNovosibirsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovosibirsk,\n  name: 'Asia/Novosibirsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaOmsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOmsk,\n  name: 'Asia/Omsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.OmskTime,\n};\n\nexport const AsiaOral: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOral,\n  name: 'Asia/Oral',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.OralTime,\n};\n\nexport const AsiaPhnomPenh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPhnomPenh,\n  name: 'Asia/Phnom_Penh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaPontianak: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPontianak,\n  name: 'Asia/Pontianak',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaPyongyang: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPyongyang,\n  name: 'Asia/Pyongyang',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaQatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQatar,\n  name: 'Asia/Qatar',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaQyzylorda: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQyzylorda,\n  name: 'Asia/Qyzylorda',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.WestKazakhstanTime,\n};\n\nexport const AsiaRangoon: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRangoon,\n  name: 'Asia/Rangoon',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.MyanmarStandardTime,\n};\n\nexport const AsiaRiyadh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRiyadh,\n  name: 'Asia/Riyadh',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaSakhalin: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSakhalin,\n  name: 'Asia/Sakhalin',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SakhalinIslandTime,\n};\n\nexport const AsiaSamarkand: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSamarkand,\n  name: 'Asia/Samarkand',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaSeoul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSeoul,\n  name: 'Asia/Seoul',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaShanghai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaShanghai,\n  name: 'Asia/Shanghai',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaSingapore: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSingapore,\n  name: 'Asia/Singapore',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.SingaporeStandardTime,\n};\n\nexport const AsiaSrednekolymsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSrednekolymsk,\n  name: 'Asia/Srednekolymsk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SrednekolymskTime,\n};\n\nexport const AsiaTaipei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTaipei,\n  name: 'Asia/Taipei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaTashkent: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTashkent,\n  name: 'Asia/Tashkent',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaTbilisi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTbilisi,\n  name: 'Asia/Tbilisi',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GeorgiaStandardTime,\n};\n\nexport const AsiaTehran: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTehran,\n  name: 'Asia/Tehran',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.IranStandardTime,\n};\n\nexport const AsiaThimphu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaThimphu,\n  name: 'Asia/Thimphu',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BhutanTime,\n};\n\nexport const AsiaTokyo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTokyo,\n  name: 'Asia/Tokyo',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaTomsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTomsk,\n  name: 'Asia/Tomsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaUlaanbaatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUlaanbaatar,\n  name: 'Asia/Ulaanbaatar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.UlaanbaatarStandardTime,\n};\n\nexport const AsiaUrumqi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUrumqi,\n  name: 'Asia/Urumqi',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaUstNera: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUstNera,\n  name: 'Asia/Ust-Nera',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaVientiane: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVientiane,\n  name: 'Asia/Vientiane',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaVladivostok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVladivostok,\n  name: 'Asia/Vladivostok',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaYakutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYakutsk,\n  name: 'Asia/Yakutsk',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaYekaterinburg: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYekaterinburg,\n  name: 'Asia/Yekaterinburg',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.YekaterinburgTime,\n};\n\nexport const AsiaYerevan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYerevan,\n  name: 'Asia/Yerevan',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ArmeniaTime,\n};\n\nexport const AtlanticAzores: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticAzores,\n  name: 'Atlantic/Azores',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.AzoresStandardTime,\n};\n\nexport const AtlanticBermuda: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticBermuda,\n  name: 'Atlantic/Bermuda',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AtlanticCanary: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCanary,\n  name: 'Atlantic/Canary',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticCapeVerde: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCapeVerde,\n  name: 'Atlantic/Cape_Verde',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CapeVerdeTime,\n};\n\nexport const AtlanticFaroe: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticFaroe,\n  name: 'Atlantic/Faroe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticMadeira: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticMadeira,\n  name: 'Atlantic/Madeira',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticReykjavik: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticReykjavik,\n  name: 'Atlantic/Reykjavik',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticSouthGeorgia: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticSouthGeorgia,\n  name: 'Atlantic/South_Georgia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AtlanticStHelena: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStHelena,\n  name: 'Atlantic/St_Helena',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticStanley: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStanley,\n  name: 'Atlantic/Stanley',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.FalklandIslandsTime,\n};\n\nexport const AustraliaAdelaide: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaAdelaide,\n  name: 'Australia/Adelaide',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaBrisbane: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrisbane,\n  name: 'Australia/Brisbane',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaBrokenHill: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrokenHill,\n  name: 'Australia/Broken_Hill',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaCanberra: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCanberra,\n  name: 'Australia/Canberra',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaCurrie: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCurrie,\n  name: 'Australia/Currie',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaDarwin: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaDarwin,\n  name: 'Australia/Darwin',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaEucla: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaEucla,\n  name: 'Australia/Eucla',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n  timezone: Timezones.AustralianCentralWesternStandardTime,\n};\n\nexport const AustraliaHobart: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaHobart,\n  name: 'Australia/Hobart',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLindeman: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLindeman,\n  name: 'Australia/Lindeman',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLordHowe: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLordHowe,\n  name: 'Australia/Lord_Howe',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n  timezone: Timezones.LordHoweStandardTime,\n};\n\nexport const AustraliaMelbourne: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaMelbourne,\n  name: 'Australia/Melbourne',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaPerth: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaPerth,\n  name: 'Australia/Perth',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.AustralianWesternStandardTime,\n};\n\nexport const AustraliaSydney: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaSydney,\n  name: 'Australia/Sydney',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const EuropeAmsterdam: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAmsterdam,\n  name: 'Europe/Amsterdam',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAndorra: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAndorra,\n  name: 'Europe/Andorra',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAthens: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAthens,\n  name: 'Europe/Athens',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBelgrade: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBelgrade,\n  name: 'Europe/Belgrade',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBerlin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBerlin,\n  name: 'Europe/Berlin',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBratislava: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBratislava,\n  name: 'Europe/Bratislava',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBrussels: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBrussels,\n  name: 'Europe/Brussels',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBucharest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBucharest,\n  name: 'Europe/Bucharest',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBudapest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBudapest,\n  name: 'Europe/Budapest',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBusingen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBusingen,\n  name: 'Europe/Busingen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeChisinau: TimezoneRegion = {\n  id: TimezoneRegions.EuropeChisinau,\n  name: 'Europe/Chisinau',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeCopenhagen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeCopenhagen,\n  name: 'Europe/Copenhagen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeDublin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeDublin,\n  name: 'Europe/Dublin',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeGibraltar: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGibraltar,\n  name: 'Europe/Gibraltar',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeGuernsey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGuernsey,\n  name: 'Europe/Guernsey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeHelsinki: TimezoneRegion = {\n  id: TimezoneRegions.EuropeHelsinki,\n  name: 'Europe/Helsinki',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeIsleOfMan: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIsleOfMan,\n  name: 'Europe/Isle_of_Man',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeIstanbul: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIstanbul,\n  name: 'Europe/Istanbul',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeJersey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeJersey,\n  name: 'Europe/Jersey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeKaliningrad: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKaliningrad,\n  name: 'Europe/Kaliningrad',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeKiev: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKiev,\n  name: 'Europe/Kiev',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeLisbon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLisbon,\n  name: 'Europe/Lisbon',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLjubljana: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLjubljana,\n  name: 'Europe/Ljubljana',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeLondon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLondon,\n  name: 'Europe/London',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLuxembourg: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLuxembourg,\n  name: 'Europe/Luxembourg',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMadrid: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMadrid,\n  name: 'Europe/Madrid',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMalta: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMalta,\n  name: 'Europe/Malta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMariehamn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMariehamn,\n  name: 'Europe/Mariehamn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMinsk: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMinsk,\n  name: 'Europe/Minsk',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMonaco: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMonaco,\n  name: 'Europe/Monaco',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMoscow: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMoscow,\n  name: 'Europe/Moscow',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeOslo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeOslo,\n  name: 'Europe/Oslo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeParis: TimezoneRegion = {\n  id: TimezoneRegions.EuropeParis,\n  name: 'Europe/Paris',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePodgorica: TimezoneRegion = {\n  id: TimezoneRegions.EuropePodgorica,\n  name: 'Europe/Podgorica',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePrague: TimezoneRegion = {\n  id: TimezoneRegions.EuropePrague,\n  name: 'Europe/Prague',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeRiga: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRiga,\n  name: 'Europe/Riga',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeRome: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRome,\n  name: 'Europe/Rome',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSamara: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSamara,\n  name: 'Europe/Samara',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSanMarino: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSanMarino,\n  name: 'Europe/San_Marino',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSarajevo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSarajevo,\n  name: 'Europe/Sarajevo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSimferopol: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSimferopol,\n  name: 'Europe/Simferopol',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSkopje: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSkopje,\n  name: 'Europe/Skopje',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSofia: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSofia,\n  name: 'Europe/Sofia',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeStockholm: TimezoneRegion = {\n  id: TimezoneRegions.EuropeStockholm,\n  name: 'Europe/Stockholm',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeTallinn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTallinn,\n  name: 'Europe/Tallinn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeTirane: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTirane,\n  name: 'Europe/Tirane',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeUzhgorod: TimezoneRegion = {\n  id: TimezoneRegions.EuropeUzhgorod,\n  name: 'Europe/Uzhgorod',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVaduz: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVaduz,\n  name: 'Europe/Vaduz',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVatican: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVatican,\n  name: 'Europe/Vatican',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVienna: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVienna,\n  name: 'Europe/Vienna',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVilnius: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVilnius,\n  name: 'Europe/Vilnius',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVolgograd: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVolgograd,\n  name: 'Europe/Volgograd',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeWarsaw: TimezoneRegion = {\n  id: TimezoneRegions.EuropeWarsaw,\n  name: 'Europe/Warsaw',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZagreb: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZagreb,\n  name: 'Europe/Zagreb',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZaporozhye: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZaporozhye,\n  name: 'Europe/Zaporozhye',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeZurich: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZurich,\n  name: 'Europe/Zurich',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const IndianAntananarivo: TimezoneRegion = {\n  id: TimezoneRegions.IndianAntananarivo,\n  name: 'Indian/Antananarivo',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianChagos: TimezoneRegion = {\n  id: TimezoneRegions.IndianChagos,\n  name: 'Indian/Chagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.IndianOceanTime,\n};\n\nexport const IndianChristmas: TimezoneRegion = {\n  id: TimezoneRegions.IndianChristmas,\n  name: 'Indian/Christmas',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.ChristmasIslandTime,\n};\n\nexport const IndianCocos: TimezoneRegion = {\n  id: TimezoneRegions.IndianCocos,\n  name: 'Indian/Cocos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.CocosIslandsTime,\n};\n\nexport const IndianComoro: TimezoneRegion = {\n  id: TimezoneRegions.IndianComoro,\n  name: 'Indian/Comoro',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianKerguelen: TimezoneRegion = {\n  id: TimezoneRegions.IndianKerguelen,\n  name: 'Indian/Kerguelen',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.FrenchSouthernAndAntarcticTime,\n};\n\nexport const IndianMahe: TimezoneRegion = {\n  id: TimezoneRegions.IndianMahe,\n  name: 'Indian/Mahe',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.SeychellesTime,\n};\n\nexport const IndianMaldives: TimezoneRegion = {\n  id: TimezoneRegions.IndianMaldives,\n  name: 'Indian/Maldives',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.MaldivesTime,\n};\n\nexport const IndianMauritius: TimezoneRegion = {\n  id: TimezoneRegions.IndianMauritius,\n  name: 'Indian/Mauritius',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.MauritiusTime,\n};\n\nexport const IndianMayotte: TimezoneRegion = {\n  id: TimezoneRegions.IndianMayotte,\n  name: 'Indian/Mayotte',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianReunion: TimezoneRegion = {\n  id: TimezoneRegions.IndianReunion,\n  name: 'Indian/Reunion',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ReunionTime,\n};\n\nexport const PacificApia: TimezoneRegion = {\n  id: TimezoneRegions.PacificApia,\n  name: 'Pacific/Apia',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificAuckland: TimezoneRegion = {\n  id: TimezoneRegions.PacificAuckland,\n  name: 'Pacific/Auckland',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const PacificChatham: TimezoneRegion = {\n  id: TimezoneRegions.PacificChatham,\n  name: 'Pacific/Chatham',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const PacificEaster: TimezoneRegion = {\n  id: TimezoneRegions.PacificEaster,\n  name: 'Pacific/Easter',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.EasterIslandStandardTime,\n};\n\nexport const PacificEfate: TimezoneRegion = {\n  id: TimezoneRegions.PacificEfate,\n  name: 'Pacific/Efate',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.VanuatuTime,\n};\n\nexport const PacificEnderbury: TimezoneRegion = {\n  id: TimezoneRegions.PacificEnderbury,\n  name: 'Pacific/Enderbury',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFakaofo: TimezoneRegion = {\n  id: TimezoneRegions.PacificFakaofo,\n  name: 'Pacific/Fakaofo',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFiji: TimezoneRegion = {\n  id: TimezoneRegions.PacificFiji,\n  name: 'Pacific/Fiji',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.FijiTime,\n};\n\nexport const PacificFunafuti: TimezoneRegion = {\n  id: TimezoneRegions.PacificFunafuti,\n  name: 'Pacific/Funafuti',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.TuvaluTime,\n};\n\nexport const PacificGalapagos: TimezoneRegion = {\n  id: TimezoneRegions.PacificGalapagos,\n  name: 'Pacific/Galapagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.GalapagosTime,\n};\n\nexport const PacificGambier: TimezoneRegion = {\n  id: TimezoneRegions.PacificGambier,\n  name: 'Pacific/Gambier',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.GambierIslandTime,\n};\n\nexport const PacificGuadalcanal: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuadalcanal,\n  name: 'Pacific/Guadalcanal',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SolomonIslandsTime,\n};\n\nexport const PacificGuam: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuam,\n  name: 'Pacific/Guam',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificHonolulu: TimezoneRegion = {\n  id: TimezoneRegions.PacificHonolulu,\n  name: 'Pacific/Honolulu',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificJohnston: TimezoneRegion = {\n  id: TimezoneRegions.PacificJohnston,\n  name: 'Pacific/Johnston',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificKiritimati: TimezoneRegion = {\n  id: TimezoneRegions.PacificKiritimati,\n  name: 'Pacific/Kiritimati',\n  offset: TimezoneOffset.UTC_PLUS_14,\n  timezone: Timezones.LineIslandsTime,\n};\n\nexport const PacificKosrae: TimezoneRegion = {\n  id: TimezoneRegions.PacificKosrae,\n  name: 'Pacific/Kosrae',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.KosraeTime,\n};\n\nexport const PacificKwajalein: TimezoneRegion = {\n  id: TimezoneRegions.PacificKwajalein,\n  name: 'Pacific/Kwajalein',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMajuro: TimezoneRegion = {\n  id: TimezoneRegions.PacificMajuro,\n  name: 'Pacific/Majuro',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMarquesas: TimezoneRegion = {\n  id: TimezoneRegions.PacificMarquesas,\n  name: 'Pacific/Marquesas',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.MarquesasIslandsTime,\n};\n\nexport const PacificMidway: TimezoneRegion = {\n  id: TimezoneRegions.PacificMidway,\n  name: 'Pacific/Midway',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificNauru: TimezoneRegion = {\n  id: TimezoneRegions.PacificNauru,\n  name: 'Pacific/Nauru',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NauruTime,\n};\n\nexport const PacificNiue: TimezoneRegion = {\n  id: TimezoneRegions.PacificNiue,\n  name: 'Pacific/Niue',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NiueTime,\n};\n\nexport const PacificNorfolk: TimezoneRegion = {\n  id: TimezoneRegions.PacificNorfolk,\n  name: 'Pacific/Norfolk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NorfolkIslandTime,\n};\n\nexport const PacificNoumea: TimezoneRegion = {\n  id: TimezoneRegions.PacificNoumea,\n  name: 'Pacific/Noumea',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const PacificPagoPago: TimezoneRegion = {\n  id: TimezoneRegions.PacificPagoPago,\n  name: 'Pacific/Pago_Pago',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificPalau: TimezoneRegion = {\n  id: TimezoneRegions.PacificPalau,\n  name: 'Pacific/Palau',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.PalauTime,\n};\n\nexport const PacificPitcairn: TimezoneRegion = {\n  id: TimezoneRegions.PacificPitcairn,\n  name: 'Pacific/Pitcairn',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PitcairnTime,\n};\n\nexport const PacificPonape: TimezoneRegion = {\n  id: TimezoneRegions.PacificPonape,\n  name: 'Pacific/Ponape',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificPortMoresby: TimezoneRegion = {\n  id: TimezoneRegions.PacificPortMoresby,\n  name: 'Pacific/Port_Moresby',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.PapuaNewGuineaTime,\n};\n\nexport const PacificRarotonga: TimezoneRegion = {\n  id: TimezoneRegions.PacificRarotonga,\n  name: 'Pacific/Rarotonga',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.CookIslandTime,\n};\n\nexport const PacificSaipan: TimezoneRegion = {\n  id: TimezoneRegions.PacificSaipan,\n  name: 'Pacific/Saipan',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificTahiti: TimezoneRegion = {\n  id: TimezoneRegions.PacificTahiti,\n  name: 'Pacific/Tahiti',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.TahitiTime,\n};\n\nexport const PacificTarawa: TimezoneRegion = {\n  id: TimezoneRegions.PacificTarawa,\n  name: 'Pacific/Tarawa',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.GilbertIslandTime,\n};\n\nexport const PacificTongatapu: TimezoneRegion = {\n  id: TimezoneRegions.PacificTongatapu,\n  name: 'Pacific/Tongatapu',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificChuuk: TimezoneRegion = {\n  id: TimezoneRegions.PacificChuuk,\n  name: 'Pacific/Chuuk',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n\nexport const PacificPohnpei: TimezoneRegion = {\n  id: TimezoneRegions.PacificPohnpei,\n  name: 'Pacific/Pohnpei',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificYap: TimezoneRegion = {\n  id: TimezoneRegions.PacificYap,\n  name: 'Pacific/Yap',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n", "import { Environment, LogLevel } from '@srclaunch/types';\nimport { Chalk } from 'chalk';\n// import { getBrowserEnvironment, getNodeEnvironment } from '@srclaunch/environment';\nimport { nanoid } from 'nanoid';\n\n// import winston from 'winston';\n// import { CloudWatchConfig } from '../types/cloudwatch';\nimport {\n  AnalyticsEventProps,\n  CriticalEventProps,\n  DebugEventProps,\n  ExceptionEventProps,\n  HttpEventProps,\n  InfoEventProps,\n  WarningEventProps,\n} from '../types/events';\nimport { LoggerConfig } from '../types/index';\n// import { LogLevel } from '../types/levels';\n// import { getCloudwatchTransport } from './cloudwatch.js';\n\nexport class Logger {\n  private readonly level: LogLevel;\n  public readonly environment?: Environment;\n\n  public analytics(props: AnalyticsEventProps): void {\n    console.info({ ...this.getCommonProps(), ...props });\n  }\n  public critical(props: CriticalEventProps): void {\n    console.error({ ...props, ...this.getCommonProps() });\n  }\n  public debug(props: DebugEventProps): void {\n    console.debug({ ...props, ...this.getCommonProps() });\n  }\n  public async exception(props: ExceptionEventProps): Promise<void> {\n    console.error({ ...props, ...this.getCommonProps() });\n  }\n\n  public http(props: HttpEventProps): void {\n    const { details, method, resource } = props.request ?? {};\n    const { status } = props.response ?? {};\n    const chalk = new Chalk();\n\n    const message = `[${chalk.blue(details?.date)}]\n      ${method}:${resource} \n      ${chalk.red(status?.code)}`;\n\n    // TODO: Send this to logging server\n    // const data = {\n    //   message: message,\n    //   ...this.getCommonProps(),\n    //   ...props,\n    // };\n\n    console.info(message);\n  }\n\n  public async info(props: InfoEventProps): Promise<void> {\n    console.info({ ...this.getCommonProps(), message: props });\n  }\n  public warning(props: WarningEventProps): void {\n    console.warn({ ...this.getCommonProps(), ...props });\n  }\n  private getCommonProps() {\n    return {\n      created: new Date().toString(),\n      environment: this.environment?.id,\n      id: nanoid(),\n    };\n  }\n\n  public constructor(config?: LoggerConfig) {\n    this.environment = config?.environment;\n    this.level = config?.level ?? LogLevel.Info;\n  }\n\n  // private getLogLevel(): string {\n  //   switch (this.environment?.type) {\n  //     case EnvironmentType.Development:\n  //       return 'debug';\n  //     case EnvironmentType.NonProduction:\n  //       return 'debug';\n  //     case EnvironmentType.Production:\n  //       return 'warning';\n  //   }\n  // }\n\n  // private getFormatters() {\n  //   return {\n  //     console: winston.format.combine(\n  //       winston.format.timestamp({ format: 'hh:mm:ss' }),\n  //       winston.format.colorize({ all: true }),\n  //       winston.format.printf(event => {\n  //         return `[${event.timestamp} - ${this.environment.id}] ${event.level}: ${event.message}`;\n  //       }),\n  //     ),\n  //   };\n  // }\n  // private getEnvironmentTransports({\n  //   cloudwatchConfig,\n  // }: {\n  //   cloudwatchConfig?: CloudWatchConfig;\n  // }) {\n  //   // const fileTransport = new winston.transports.File({ filename: 'combined.log' });\n  //   // const consoleTransport = new winston.transports.Console();\n\n  //   switch (this.environment.type) {\n  //     case EnvironmentType.Development:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.NonProduction:\n  //     // return [consoleTransport];\n  //     case EnvironmentType.Production:\n  //       if (cloudwatchConfig) {\n  //         const cloudWatchTransport = getCloudwatchTransport(cloudwatchConfig);\n\n  //         return [cloudWatchTransport];\n  //       }\n\n  //       return [];\n  //   }\n  // }\n}\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "import { Image } from '../..';\n\nexport type Activity = {\n  readonly who?: {\n    readonly image?: Image;\n    readonly name?: string;\n    readonly to?: string;\n  };\n  readonly what?: {\n    readonly image?: Image;\n    readonly label?: string;\n    readonly name?: Activities;\n    readonly to?: string;\n  };\n  readonly when?: string;\n  readonly where?: string;\n  readonly why?: string;\n  readonly how?: string;\n};\n\nexport enum Activities {\n  Comment = 'comment',\n  Create = 'create',\n  Delete = 'delete',\n  Edit = 'edit',\n  Invoice = 'invoice',\n  Message = 'message',\n  PageView = 'pageView',\n  Paid = 'paid',\n  Payment = 'payment',\n  Purchase = 'purchase',\n  Referral = 'referral',\n  Renewal = 'renewal',\n  Signup = 'signup',\n  Subscription = 'subscription',\n  Upgrade = 'upgrade',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum Analytics {\n  Business = 'business',\n  Engineering = 'engineering',\n  Exception = 'exception',\n  LogMessage = 'log-message',\n  Marketing = 'marketing',\n  PageLeave = 'page-leave',\n  PageView = 'page-view',\n  Product = 'product',\n  QualityManagement = 'quality-management',\n  UserAccess = 'user-access',\n  UserLogin = 'user-login',\n  UserLogout = 'user-logout',\n  UserSignup = 'user-signup',\n  UserPreferencesChanged = 'user-preferences-changed',\n  WebsiteVisit = 'website-visit',\n}\n\nexport type AnalyticsEvent<T = {}> = {\n  created: DateTime;\n  data?: Record<string, unknown>;\n  id?: string;\n  message?: string;\n  name: Analytics;\n} & T;\n", "import { UserAccessDevice } from '../../user/access';\nimport { Analytics, AnalyticsEvent } from '..';\n\nexport enum PageLeaveMethod {\n  CloseTab = 'close-tab',\n  ExternalLink = 'external-link',\n  NavigateAway = 'navigate-away',\n  Unknown = 'unknown',\n}\n\nexport type PageViewEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    referrer_url?: string;\n  };\n  description: 'Occurs when a person views a page in a Website or application.';\n  id: string;\n  name: Analytics.PageView;\n}>;\n\nexport type PageLeaveEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    leave_method: PageLeaveMethod;\n  };\n  description: 'Occurs when a person leaves a page.';\n  id: string;\n  name: Analytics.PageLeave;\n}>;\n\nexport type WebsiteVisitEvent = AnalyticsEvent<{\n  device: UserAccessDevice;\n  description: 'Occurs when a person a website.';\n  id: string;\n  name: Analytics.WebsiteVisit;\n}>;\n", "import { DateTime } from 'luxon';\n\nimport { Project } from '../../project';\nimport { Application } from '..';\nimport { Environment } from '../environment';\nimport { PipelineWorkflow } from '../pipeline/workflow';\n\nexport enum DeploymentTarget {\n  Ecs = 'Ecs',\n}\n\nexport enum DeploymentStatus {\n  Finished = 'Finished',\n  Queued = 'Queued',\n  Running = 'Running',\n  Started = 'Started',\n}\n\nexport type Deployment = {\n  id: string;\n  status: DeploymentStatus;\n  target: DeploymentTarget;\n  ApplicationId: Application['id'];\n  EnvironmentId: Environment['id'];\n  CreatedDate: DateTime;\n  PipelineWorkflowId: PipelineWorkflow['id'];\n  ProjectId: Project['id'];\n};\n", "export enum DeviceType {\n  Mobile = 'mobile',\n  TV = 'tv',\n  Watch = 'watch',\n  Web = 'web',\n}\n", "export enum EnvironmentType {\n  Development = 'Development',\n  NonProduction = 'NonProduction',\n  Production = 'Production',\n}\n\nexport type Environment = {\n  id: string;\n  type: EnvironmentType;\n  name: string;\n  description: string;\n  public: boolean;\n};\n", "export enum OnboardingStatus {\n  Completed = 'completed',\n  Started = 'started',\n  Uncompleted = 'uncompleted',\n}\n\nexport type OnboardingStep = {\n  description: string;\n  id: string;\n  guide_id: OnboardingGuide;\n  name: string;\n};\n\nexport type OnboardingGuide = {\n  id: string;\n  name: string;\n  description: string;\n  steps: OnboardingStep['id'][];\n};\n", "import { Project } from '../../project';\n\nexport enum PipelineType {\n  Build = 'Build',\n  Deployment = 'Deployment',\n  Test = 'Test',\n}\n\nexport type Pipeline = {\n  id: string;\n  name: string;\n  type: PipelineType;\n  ProjectId: Project['id'];\n};\n", "import { Project } from '../../project';\nimport { Application } from '../index';\nimport { Pipeline } from './index';\n\nexport enum PipelineWorkflowStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport enum PipelineStepStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport type PipelineStepOutputLine = {\n  id: string;\n  text: string;\n  PipelineStepOutputId: PipelineStepOutput['id'];\n};\n\nexport type PipelineStepOutput = {\n  id: string;\n  PipeWorkflowStepId: PipelineWorkflowStep['id'];\n};\n\nexport type PipelineWorkflowStep = {\n  enabled: boolean;\n  id: string;\n  status: PipelineStepStatus;\n  PipeWorkflowId: PipelineWorkflow['id'];\n};\n\nexport type PipelineWorkflow = {\n  description: string;\n  enabled: boolean;\n  id: string;\n  name: string;\n  ActivePipelineId: Pipeline['id'];\n  ApplicationId: Application['id'];\n  ProjectId: Project['id'];\n};\n", "import React from 'react';\n\nexport enum PageRole {\n  ForgotPassword = 'forgot_password',\n  Index = 'index',\n  Login = 'login',\n  PageNotFound = '404',\n  Signup = 'signup',\n  VerifyCode = 'verify_code',\n}\n\nexport type PageRoute = {\n  loginRequired?: boolean;\n  path?: string;\n  component: React.ElementType;\n  role?: PageRole;\n};\n", "export enum AlertLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n", "import { ComponentType } from 'react';\n\nexport enum ModalType {\n  Details = 'details',\n  Dialog = 'dialog',\n}\n\nexport type Modal = {\n  component?: ComponentType<any>;\n  id: string;\n  icon?: string;\n  title?: string;\n  type: ModalType;\n  closeable?: boolean;\n};\n", "export enum NotificationType {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport type Notification<T = {}> = {\n  color?: string;\n  id: number;\n  icon?: string;\n  message: string;\n  timed: boolean;\n  type?: NotificationType;\n  seconds: number;\n} & T;\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { Person } from '../../../people/person';\n\nexport enum DataPointMetric {\n  AccountBalance = 'AccountBalance',\n  UserAssets = 'UserAssets',\n  UserCreditCardDebt = 'UserCreditCardDebt',\n  UserCreditLimit = 'UserCreditLimit',\n  UserCreditUtilization = 'UserCreditUtilization',\n  UserDebt = 'UserDebt',\n  UserInvestments = 'UserInvestments',\n  UserRetirement = 'UserRetirement',\n  UserSavings = 'UserSavings',\n}\n\nexport type DataPoint = {\n  id: string;\n  date: Date;\n  currency_code?: CurrencyCode;\n  metric: DataPointMetric;\n  value: number;\n  person_id: Person['id'];\n};\n", "export enum DefaultValue {\n  DateTime = 'date_time',\n  True = 'true',\n  False = 'false',\n  UniqueId = 'unique_id',\n}\n", "import { DateTime } from 'luxon';\n\nimport { ModelField } from './field';\nimport { Relationship } from './relationship';\n\nexport enum ModelType {\n  DomainModel = 'domain_entity',\n  GenericModel = 'generic_entity',\n}\n\nexport type ModelProps<T = {}> = {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n} & T;\n\nexport class Model implements ModelProps {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n\n  constructor(props: ModelProps) {\n    const { created, description, fields, name, id, relationships, updated } =\n      props;\n\n    this.created = created;\n    this.description = description;\n    this.fields = fields;\n    this.id = id;\n    this.name = name;\n    this.relationships = relationships;\n    this.updated = updated;\n  }\n}\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { CountryCode } from '../../../i18n/locale/country';\nimport { ISO8601String } from '../../../i18n/date';\nimport { LanguageCode } from '../../../i18n/language';\nimport { TimezoneRegions } from '../../../i18n/time/region';\n\nexport type MenuItem = {\n  label: string;\n  value: string | number | boolean;\n};\n\nexport type AirportCode = string;\nexport type BankIDCode = string;\nexport type BitcoinAddress = string;\nexport type Boolean = boolean;\nexport type City = string;\nexport type Color = string;\nexport type CreditCard = string;\nexport type CurrencyAmount = number;\nexport type DataURI = string;\nexport type Date = ISO8601String;\nexport type DateRange = ISO8601String[];\nexport type DateTime = ISO8601String;\nexport type DayOfMonth = string;\nexport type DomainName = string;\nexport type EmailAddress = string;\nexport type EthereumAddress = string;\nexport type EAN = string;\nexport type EIN = string;\nexport type Float = number;\nexport type GeographicCoordinate = number;\nexport type GeographicCoordinates = number[];\nexport type GitRepositoryURL = string;\nexport type HSLColor = string;\nexport type HexColor = string;\nexport type Hexadecimal = string;\nexport type IBAN = string;\nexport type IMEI = number;\nexport type IPAddress = string;\nexport type IPAddressRange = string[];\nexport type ISBN = string;\nexport type ISIN = string;\nexport type ISMN = string;\nexport type ISSN = string;\nexport type ISO8601 = string;\nexport type ISO31661Alpha2 = string;\nexport type ISO31661Alpha3 = string;\nexport type ISO4217 = CurrencyCode;\nexport type Image = {\n  description?: string;\n  format?: string;\n  path?: string;\n  url?: string;\n};\nexport type Integer = number;\nexport type JSONObject = Record<string, unknown>;\nexport type LicensePlateNumber = string;\nexport type LongText = string;\nexport type MD5 = string;\nexport type MACAddress = string;\nexport type MagnetURI = string;\nexport type Markdown = string;\nexport type Menu = {\n  defaultValue?: MenuItem['value'];\n  items: MenuItem[];\n};\nexport type MimeType = string;\nexport type Month = string;\nexport type Number = number;\nexport type Password = string;\nexport type PassportNumber = string;\nexport type Percent = number;\nexport type PhoneNumber = string;\nexport type Port = number;\nexport type PostalCode = string;\nexport type Province = string;\nexport type RFC3339 = string;\nexport type RGBColor = string;\nexport type SemanticVersion = string;\nexport type SSN = number;\nexport type State = string;\nexport type StreetAddress = string;\nexport type String = string;\nexport type Tags = MenuItem[];\nexport type TaxIDNumber = string;\nexport type Time = string;\nexport type TimeRange = string[];\nexport type TimeOfDay = string;\nexport type Timezone = TimezoneRegions;\nexport type URL = string;\nexport type URLPath = string;\nexport type UUID = string;\nexport type VATIDNumber = string;\nexport type VerificationCode = string;\nexport type Video = {\n  description?: string;\n  format?: string;\n  url?: string;\n  path?: string;\n};\nexport type Weekday = string;\nexport type Year = number;\n\nexport type Primitive =\n  | AirportCode\n  | BankIDCode\n  | BitcoinAddress\n  | boolean\n  | City\n  | Color\n  | CountryCode\n  | CreditCard\n  | CurrencyAmount\n  | CurrencyCode\n  | DataURI\n  | Date\n  | DateRange\n  | DateTime\n  | DayOfMonth\n  | DomainName\n  | EmailAddress\n  | EthereumAddress\n  | EAN\n  | EIN\n  | Float\n  | GeographicCoordinate\n  | GeographicCoordinates\n  | GitRepositoryURL\n  | HSLColor\n  | HexColor\n  | Hexadecimal\n  | IBAN\n  | IMEI\n  | IPAddress\n  | IPAddressRange\n  | ISBN\n  | ISIN\n  | ISMN\n  | ISSN\n  | ISO8601\n  | ISO31661Alpha2\n  | ISO31661Alpha3\n  | ISO4217\n  | Image\n  | Integer\n  | JSONObject\n  | LanguageCode\n  | LicensePlateNumber\n  | LongText\n  | MD5\n  | Markdown\n  | Menu\n  | number\n  | MACAddress\n  | MagnetURI\n  | MimeType\n  | Month\n  | Password\n  | PassportNumber\n  | Percent\n  | PhoneNumber\n  | Port\n  | PostalCode\n  | Province\n  | RFC3339\n  | RGBColor\n  | SemanticVersion\n  | SSN\n  | State\n  | StreetAddress\n  | string\n  | Tags\n  | TaxIDNumber\n  | Time\n  | TimeRange\n  | TimeOfDay\n  | Timezone\n  | URL\n  | URLPath\n  | UUID\n  | VATIDNumber\n  | Video\n  | VerificationCode\n  | Weekday\n  | Year;\n\n// export enum Primitives {\n//   AirportCode = AirportCode,\n//   BankIDCode = BankIDCode,\n//   BitcoinAddress = BitcoinAddress,\n//   Boolean = Boolean,\n//   City = City,\n//   Color = Color,\n//   CountryCode = CountryCode,\n//   CreditCard = CreditCard,\n//   CurrencyAmount = CurrencyAmount,\n//   CurrencyCode =CurrencyCode,\n//   DataURI = 'data-uri',\n//   Date = 'date',\n//   DateRange = 'date-range',\n//   DateTime = 'date-time',\n//   DayOfMonth = 'day-of-month',\n//   DomainName = 'domain-name',\n//   EmailAddress = 'email-address',\n//   EthereumAddress = 'ethereum-address',\n//   EAN = 'european-article-number',\n//   EIN = 'employer-identification-number',\n//   Float = 'float',\n//   GeographicCoordinate = 'geographic-coordinate',\n//   GeographicCoordinates = 'geographic-coordinates',\n//   GitRepositoryURL = 'git-repository-url',\n//   HSLColor = 'hsl-color',\n//   HexColor = 'hex-color',\n//   Hexadecimal = 'hexadecimal',\n//   IBAN = 'international-bank-account-number',\n//   IMEI = 'international-mobile-equipment-identifier',\n//   IPAddress = 'ip-address',\n//   IPAddressRange = 'ip-address-range',\n//   ISBN = 'international-standard-book-number',\n//   ISIN = 'international-stock-number',\n//   ISMN = 'international-standard-music-number',\n//   ISSN = 'international-standard-serial-number',\n//   ISO8601 = 'iso-8601',\n//   ISO31661Alpha2 = 'iso-31661-alpha-2',\n//   ISO31661Alpha3 = 'iso-31661-alpha-3',\n//   ISO4217 = 'iso-4217',\n//   Image = 'image',\n//   Integer = 'integer',\n//   JSON = 'json',\n//   LanguageCode = 'language-code',\n//   LicensePlateNumber = 'license-plate-number',\n//   LongText = 'long-text',\n//   MD5 = 'md5',\n//   Markdown = 'markdown',\n//   Menu = 'menu',\n//   Number = 'number',\n//   MACAddress = 'mac-address',\n//   MagnetURI = 'magnet-uri',\n//   MimeType = 'mime-type',\n//   Month = 'month',\n//   Password = 'password',\n//   PassportNumber = 'passport-number',\n//   Percent = 'percent',\n//   PhoneNumber = 'phone-number',\n//   Port = 'port',\n//   PostalCode = 'postal-code',\n//   Province = 'province',\n//   RFC3339 = 'rfc-3339',\n//   RGBColor = 'rgb-color',\n//   SemanticVersion = 'semantic-version',\n//   SSN = 'social-security-number',\n//   State = 'state',\n//   StreetAddress = 'street-address',\n//   String = 'string',\n//   Tags = 'tags',\n//   TaxIDNumber = 'tax-id-number',\n//   Time = 'time',\n//   TimeOfDay = 'time-of-day',\n//   TimeRange = 'time-range',\n//   TimezoneRegion = 'timezone-region',\n//   URL = 'url',\n//   URLPath = 'url-path',\n//   UUID = 'uuid',\n//   VATIDNumber = 'value-added-tax-id-number',\n//   VerificationCode = 'verification-code',\n//   Video = 'video',\n//   Weekday = 'weekday',\n//   Year = 'year',\n// }\n\nexport enum Primitives {\n  AirportCode = 'airport-code',\n  BankIDCode = 'bank-id-code',\n  BitcoinAddress = 'bitcoin-address',\n  Boolean = 'boolean',\n  City = 'city',\n  Color = 'color',\n  CountryCode = 'country-code',\n  CreditCard = 'credit-card',\n  CurrencyAmount = 'currency-amount',\n  CurrencyCode = 'currency-code',\n  DataURI = 'data-uri',\n  Date = 'date',\n  DateRange = 'date-range',\n  DateTime = 'date-time',\n  DayOfMonth = 'day-of-month',\n  DomainName = 'domain-name',\n  EmailAddress = 'email-address',\n  EthereumAddress = 'ethereum-address',\n  EAN = 'european-article-number',\n  EIN = 'employer-identification-number',\n  Float = 'float',\n  GeographicCoordinate = 'geographic-coordinate',\n  GeographicCoordinates = 'geographic-coordinates',\n  GitRepositoryURL = 'git-repository-url',\n  HSLColor = 'hsl-color',\n  HexColor = 'hex-color',\n  Hexadecimal = 'hexadecimal',\n  IBAN = 'international-bank-account-number',\n  IMEI = 'international-mobile-equipment-identifier',\n  IPAddress = 'ip-address',\n  IPAddressRange = 'ip-address-range',\n  ISBN = 'international-standard-book-number',\n  ISIN = 'international-stock-number',\n  ISMN = 'international-standard-music-number',\n  ISSN = 'international-standard-serial-number',\n  ISO8601 = 'iso-8601',\n  ISO31661Alpha2 = 'iso-31661-alpha-2',\n  ISO31661Alpha3 = 'iso-31661-alpha-3',\n  ISO4217 = 'iso-4217',\n  Image = 'image',\n  Integer = 'integer',\n  JSON = 'json',\n  LanguageCode = 'language-code',\n  LicensePlateNumber = 'license-plate-number',\n  LongText = 'long-text',\n  MD5 = 'md5',\n  Markdown = 'markdown',\n  Menu = 'menu',\n  Number = 'number',\n  MACAddress = 'mac-address',\n  MagnetURI = 'magnet-uri',\n  MimeType = 'mime-type',\n  Month = 'month',\n  Password = 'password',\n  PassportNumber = 'passport-number',\n  Percent = 'percent',\n  PhoneNumber = 'phone-number',\n  Port = 'port',\n  PostalCode = 'postal-code',\n  Province = 'province',\n  RFC3339 = 'rfc-3339',\n  RGBColor = 'rgb-color',\n  SemanticVersion = 'semantic-version',\n  SSN = 'social-security-number',\n  State = 'state',\n  StreetAddress = 'street-address',\n  String = 'string',\n  Tags = 'tags',\n  TaxIDNumber = 'tax-id-number',\n  Time = 'time',\n  TimeOfDay = 'time-of-day',\n  TimeRange = 'time-range',\n  TimezoneRegion = 'timezone-region',\n  URL = 'url',\n  URLPath = 'url-path',\n  UUID = 'uuid',\n  VATIDNumber = 'value-added-tax-id-number',\n  VerificationCode = 'verification-code',\n  Video = 'video',\n  Weekday = 'weekday',\n  Year = 'year',\n}\n", "export enum Severity {\n  Critical = 'Critical',\n  Error = 'Error',\n  Fatal = 'Fatal',\n  Warning = 'Warning',\n}\n", "export enum Condition {\n  Contains = 'contains',\n  HasCharacterCount = 'has-character-count',\n  HasNumberCount = 'has-number-count',\n  HasLetterCount = 'has-letter-count',\n  HasLowercaseCount = 'has-lowercase-count',\n  HasSpacesCount = 'has-spaces-count',\n  HasSymbolCount = 'has-symbol-count',\n  HasUppercaseCount = 'has-uppercase-count',\n  IsAfter = 'is-after',\n  IsAfterOrEqual = 'is-after-or-equal',\n  IsAirport = 'is-airport',\n  IsAlpha = 'is-alpha',\n  IsAlphanumeric = 'is-alphanumeric',\n  IsAlgorithmHash = 'is-algorithm-hash',\n  IsAscii = 'is-ascii',\n  IsBase64 = 'is-base-64',\n  IsBefore = 'is-before',\n  IsBeforeOrAfter = 'is-before-or-after',\n  IsBeforeOrEqual = 'is-before-or-equal',\n  IsBetween = 'is-between',\n  IsBIC = 'is-bic',\n  IsBitcoinAddress = 'is-bitcoin-address',\n  IsBoolean = 'is-boolean',\n  IsColor = 'is-color',\n  IsComplexEnough = 'is-complex-enough',\n  IsCountry = 'is-country',\n  IsCreditCard = 'is-credit-card',\n  IsCurrency = 'is-currency',\n  IsDataURI = 'is-data-uri',\n  IsDate = 'is-date',\n  IsDateRange = 'is-date-range',\n  IsDateTime = 'is-date-time',\n  IsDayOfMonth = 'is-day-of-month',\n  IsDecimal = 'is-decimal',\n  IsDivisibleBy = 'is-divisible-by',\n  IsDomainName = 'is-domain-name',\n  IsEmailAddress = 'is-email-address',\n  IsEthereumAddress = 'is-ethereum-address',\n  IsEAN = 'is-ean',\n  IsEIN = 'is-ein',\n  IsEqual = 'is-equal',\n  IsEvenNumber = 'is-even-number',\n  IsFloat = 'is-float',\n  IsIBAN = 'is-iban',\n  IsGreaterThan = 'greater-than',\n  IsGreaterThanOrEqual = 'greater-than-or-equal',\n  IsHSLColor = 'is-hsl-color',\n  IsHexColor = 'is-hex-color',\n  IsHexadecimal = 'is-hexadecimal',\n  IsIdentityCardCode = 'is-identity-card-code',\n  IsIMEI = 'is-imei',\n  IsInIPAddressRange = 'is-in-ip-address-range',\n  IsInList = 'is-in-list',\n  IsInTheLast = 'is-in-the-last',\n  IsInteger = 'is-integer',\n  IsIPAddress = 'is-ip-address',\n  IsIPAddressRange = 'is-ip-address-range',\n  IsISBN = 'is-isbn',\n  IsISIN = 'is-isin',\n  IsISMN = 'is-ismn',\n  IsISRC = 'is-isrc',\n  IsISSN = 'is-issn',\n  IsISO4217 = 'is-iso-4217',\n  IsISO8601 = 'is-iso-8601',\n  IsISO31661Alpha2 = 'is-iso-31661-alpha-2',\n  IsISO31661Alpha3 = 'is-iso-31661-alpha-3',\n  IsJSON = 'is-json',\n  IsLanguage = 'is-language',\n  IsLatitude = 'is-latitude',\n  IsLongitude = 'is-longitude',\n  IsLengthEqual = 'is-length-equal',\n  IsLengthGreaterThan = 'is-length-greater-than',\n  IsLengthGreaterThanOrEqual = 'is-length-great-than-or-equal',\n  IsLengthLessThan = 'is-length-less-than',\n  IsLengthLessThanOrEqual = 'is-length-less-than-or-equal',\n  IsLessThan = 'less-than',\n  IsLessThanOrEqual = 'less-than-or-equal',\n  IsLicensePlateNumber = 'is-license-plate-number',\n  IsLowercase = 'is-lowercase',\n  IsOctal = 'is-octal',\n  IsMACAddress = 'is-mac-address',\n  IsMD5 = 'is-md5',\n  IsMagnetURI = 'is-magnet-uri',\n  IsMarkdown = 'is-markdown',\n  IsMimeType = 'is-mime-type',\n  IsMonth = 'is-month',\n  IsNegativeNumber = 'is-negative-number',\n  IsNotDate = 'is-not-date',\n  IsNotEqual = 'is-not-equal',\n  IsNotInIPAddressRange = 'is-not-in-ip-address-range',\n  IsNotInList = 'is-not-in-list',\n  IsNotNull = 'is-not-null',\n  IsNotRegexMatch = 'is-not-regex-match',\n  IsNotToday = 'is-not-today',\n  IsNumber = 'is-number',\n  IsNumeric = 'is-numeric',\n  IsOddNumber = 'is-odd-number',\n  IsPassportNumber = 'is-passport-number',\n  IsPhoneNumber = 'is-phone-number',\n  IsPort = 'is-port',\n  IsPositiveNumber = 'is-positive-number',\n  IsPostalCode = 'is-postal-code',\n  IsProvince = 'is-province',\n  IsRGBColor = 'is-rgb-color',\n  IsRegexMatch = 'is-regex-match',\n  IsRequired = 'is-required',\n  IsSemanticVersion = 'is-semantic-version',\n  IsSlug = 'is-slug',\n  IsSSN = 'is-ssn',\n  IsState = 'is-state',\n  IsStreetAddress = 'is-street-address',\n  IsString = 'is-string',\n  IsStrongPassword = 'is-strong-password',\n  IsTags = 'is-tags',\n  IsTaxIDNumber = 'is-tax-id-number',\n  IsThisMonth = 'is-this-month',\n  IsThisQuarter = 'is-this-quarter',\n  IsThisWeek = 'is-this-week',\n  IsThisWeekend = 'is-this-weekend',\n  IsThisYear = 'is-this-year',\n  IsTime = 'is-time',\n  IsTimeOfDay = 'is-time-of-day',\n  IsTimeRange = 'is-time-range',\n  IsToday = 'is-today',\n  IsURL = 'is-url',\n  IsUUID = 'is-uuid',\n  IsUppercase = 'is-uppercase',\n  IsUsernameAvailable = 'is-username-available',\n  IsValidStreetAddress = 'is-valid-street-address',\n  IsVATIDNumber = 'is-vat-id-number',\n  IsWeekday = 'is-weekday',\n  IsWeekend = 'is-weekend',\n  IsYear = 'is-year',\n}\n\nexport enum AuthenticationCondition {\n  IsAuthenticated = 'is-authenticated',\n  IsNotAuthenticated = 'is-not-authenticated',\n  IsUsernameAvailable = 'is-username-available',\n  PasswordMismatch = 'password-mismatch',\n}\n\nexport type RuleCondition = {\n  condition: Condition | AuthenticationCondition;\n  description: string;\n  name: string;\n  subject: string;\n  value: any;\n};\n", "import { Condition } from '../../index';\n\nexport enum ColorCondition {\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsNotNull = Condition.IsNotNull,\n  IsRGBColor = Condition.IsRGBColor,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum AlgorithmHashCondition {\n  IsAlgorithmHash = Condition.IsAlgorithmHash,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SemanticVersionCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsString = Condition.IsString,\n}\n\nexport enum UUIDCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsUUID = Condition.IsUUID,\n}\n\nexport enum MD5Condition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMD5 = Condition.IsMD5,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum BooleanCondition {\n  IsBoolean = Condition.IsBoolean,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DateCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DateRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsDateRange = Condition.IsDateRange,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum DateTimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DayOfMonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDayOfMonth = Condition.IsDayOfMonth,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsToday = Condition.IsToday,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum MonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMonth = Condition.IsMonth,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisMonth = Condition.IsThisMonth,\n}\n\nexport enum TimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTime = Condition.IsTime,\n}\n\nexport enum TimeRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsTime = Condition.IsTime,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum TimeOfDayCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeOfDay = Condition.IsTimeOfDay,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum WeekdayCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum YearCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisYear = Condition.IsThisYear,\n  IsYear = Condition.IsYear,\n}\n", "import { Condition } from '../index';\n\nexport enum HexadecimalCondition {\n  IsEqual = Condition.IsEqual,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum JSONCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MarkdownCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsMarkdown = Condition.IsMarkdown,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../../index';\n\nexport enum CurrencyCondition {\n  IsBetween = Condition.IsBetween,\n  IsCurrency = Condition.IsCurrency,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsISO8601 = Condition.IsISO8601,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n}\n\nexport enum BitcoinAddressCondition {\n  IsBitcoinAddress = Condition.IsBitcoinAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum EthereumAddressCondition {\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum LanguageCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsLanguage = Condition.IsLanguage,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum CityCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum CountryCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsCountry = Condition.IsCountry,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum LatitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum LongitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum PostalCodeCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsPostalCode = Condition.IsPostalCode,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum ProvinceCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsProvince = Condition.IsProvince,\n  IsString = Condition.IsString,\n}\n\nexport enum StateCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsState = Condition.IsState,\n  IsString = Condition.IsString,\n}\n\nexport enum StreetAddressCondition {\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n\n  IsString = Condition.IsString,\n  IsStreetAddress = Condition.IsStreetAddress,\n}\n", "import { Condition } from '../index';\n\nexport enum MenuCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum TagsCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DataURICondition {\n  Contains = Condition.Contains,\n  IsDataURI = Condition.IsDataURI,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum DomainNameCondition {\n  Contains = Condition.Contains,\n  IsDomainName = Condition.IsDomainName,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum EmailCondition {\n  Contains = Condition.Contains,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressRangeCondition {\n  IsEqual = Condition.IsEqual,\n  IsIPAddressRange = Condition.IsIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum PortCondition {\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MACAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MagnetURICondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MimeTypeCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMimeType = Condition.IsMimeType,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SlugCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsSlug = Condition.IsSlug,\n}\n\nexport enum URLCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsURL = Condition.IsURL,\n}\n", "import { Condition } from '../index';\n\nexport enum NumberCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInt = Condition.IsInteger,\n  IsISBN = Condition.IsISBN,\n  IsISMN = Condition.IsISMN,\n  IsISSN = Condition.IsISSN,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNumber = Condition.IsNumber,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n  IsPostalCode = Condition.IsPostalCode,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSSN = Condition.IsSSN,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsUUID = Condition.IsUUID,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n\nexport enum FloatCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum IntegerCondition {\n  IsEqual = Condition.IsEqual,\n  IsInteger = Condition.IsInteger,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n", "import { Condition } from '../index';\n\nexport enum CreditCardCondition {\n  IsCreditCard = Condition.IsCreditCard,\n  IsEqual = Condition.IsEqual,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum EmailAddressCondition {\n  isEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum LicensePlateNumber {\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\nexport enum PassportNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PasswordCondition {\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsInList = Condition.IsInList,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsStrongPassword = Condition.IsStrongPassword,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PhoneNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum SocialSecurityNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsSSN = Condition.IsSSN,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n", "import { Condition } from '../../../index';\n\nexport enum AirportCondition {\n  IsAirport = Condition.IsAirport,\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\n/**\n * Bank Identification Code\n *\n * @remarks\n * BIC means Bank Identification Code, or Bank Identifier Code.\n * It is an 8 to 11-character code that is used to identify a\n * specific bank when you make an international transaction.\n * */\nexport enum BICCondition {\n  Contains = Condition.Contains,\n  IsBIC = Condition.IsBIC,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * European Article Number\n *\n * @remarks\n * The International Article Number (also known as European\n * Article Number or EAN) is a standard describing a barcode\n * symbology and numbering system used in global trade to identify\n * a specific retail product type, in a specific packaging\n * configuration, from a specific manufacturer.\n *\n * The most commonly used EAN standard is the thirteen-digit EAN-13\n * */\nexport enum EANCondition {\n  Contains = Condition.Contains,\n  IsEAN = Condition.IsEAN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Employer Identification Number\n *\n * @remarks\n *\n * The Employer Identification Number (EIN), also known as the Federal\n * Employer Identification Number (FEIN) or the Federal Tax Identification\n * Number, is a unique nine-digit number assigned by the Internal Revenue\n * Service (IRS) to business entities operating in the United States for the\n * purposes of identification.\n */\nexport enum EINCondition {\n  Contains = Condition.Contains,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Bank Account Number\n *\n * @remarks\n *\n * An IBAN, or international bank account number, is a standard\n * international numbering system developed to identify an overseas\n * bank account. The number starts with a two-digit country code, then\n * two numbers, followed by several more alphanumeric characters.\n */\nexport enum IBANCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Book Number\n *\n * @remarks\n *\n * ISBN is the acronym for International Standard Book Number. This\n * 10 or 13-digit number identifies a specific book, an edition of a\n * book, or a book-like product (such as an audiobook). Since 1970 each\n * published book has a unique ISBN. In 2007, assigned ISBNs changed\n * from 10 digits to 13.\n */\nexport enum ISBNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISBN = Condition.IsISBN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Securities Identification Number\n *\n * @remarks\n * An ISIN is a 12-digit alphanumeric code that uniquely identifies a\n * specific security. The numbers are allocated by a country's respective\n * national numbering agency (NNA). An ISIN is not the same as the ticker\n * symbol, which identifies the stock at the exchange level.\n */\nexport enum ISINCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISIN = Condition.IsISIN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Music Number\n *\n * @remarks\n * The International Standard Music Number or ISMN (ISO 10957) is a\n * thirteen-character alphanumeric identifier for printed music developed\n * by ISO.\n */\nexport enum ISMNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISMN = Condition.IsISMN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Serial Number\n *\n * @remarks\n * An International Standard Serial Number (ISSN) is an eight-digit\n * serial number used to uniquely identify a serial publication,\n * such as a magazine. The ISSN is especially helpful in distinguishing\n * between serials with the same title.\n */\nexport enum ISSNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISSN = Condition.IsISSN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Tax Identification Number\n *\n * @remarks\n * A Tax Identification Number (TIN) is a nine-digit number used as a\n * tracking number by the Internal Revenue Service (IRS)\n */\nexport enum TaxIDNumberCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n}\n\n/**\n * Value Added Tax (VAT) Registration Number\n *\n * @remarks\n * A VAT registration number is a nine-digit number used to identify\n * a business or person in the European Union.\n */\nexport enum VATCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n", "import { Condition } from '../index';\n\n// TODO: Example the number of conditions a string can support\nexport enum StringCondition {\n  Contains = Condition.Contains,\n  HasNumberCount = Condition.HasNumberCount,\n  HasLowercaseCount = Condition.HasLowercaseCount,\n  HasLetterCount = Condition.HasLetterCount,\n  HasSpacesCount = Condition.HasSpacesCount,\n  HasSymbolCount = Condition.HasSymbolCount,\n  HasUppercaseCount = Condition.HasUppercaseCount,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsAscii = Condition.IsAscii,\n  IsBase64 = Condition.IsBase64,\n  IsColor = Condition.IsColor,\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsCreditCard = Condition.IsCreditCard,\n  IsDataURI = Condition.IsDataURI,\n  IsDomainName = Condition.IsDomainName,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsIdentityCardCode = Condition.IsIdentityCardCode,\n  IsIMEI = Condition.IsIMEI,\n  IsInList = Condition.IsInList,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsISBN = Condition.IsISBN,\n  IsISIN = Condition.IsISIN,\n  IsISMN = Condition.IsISMN,\n  IsISRC = Condition.IsISRC,\n  IsISSN = Condition.IsISSN,\n  IsLanguage = Condition.IsLanguage,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsLowercase = Condition.IsLowercase,\n  IsOctal = Condition.IsOctal,\n  IsMACAddress = Condition.IsMACAddress,\n  IsMD5 = Condition.IsMD5,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsMarkdown = Condition.IsMarkdown,\n  IsMimeType = Condition.IsMimeType,\n  IsMonth = Condition.IsMonth,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPostalCode = Condition.IsPostalCode,\n  IsProvince = Condition.IsProvince,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSlug = Condition.IsSlug,\n  IsSSN = Condition.IsSSN,\n  IsState = Condition.IsState,\n  IsStreetAddress = Condition.IsStreetAddress,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsURL = Condition.IsURL,\n  IsUUID = Condition.IsUUID,\n  IsUppercase = Condition.IsUppercase,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n  IsYear = Condition.IsYear,\n}\n\nexport enum LongTextCondition {\n  Contains = Condition.Contains,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsInList = Condition.IsInList,\n  IsMarkdown = Condition.IsMarkdown,\n  IsNotInList = Condition.IsNotInList,\n  IsNumeric = Condition.IsNumeric,\n  IsLowercase = Condition.IsLowercase,\n  IsString = Condition.IsString,\n  IsUppercase = Condition.IsUppercase,\n}\n", "import { Action } from './action';\nimport { Condition } from './condition/index';\n\nexport type Allowed = 'allowed';\nexport type Blocked = 'blocked';\n\nexport enum Privilege {\n  Allowed,\n  Blocked,\n}\n\nexport type Create = Privilege;\nexport type Delete = Privilege;\nexport type Edit = Privilege;\nexport type View = Privilege;\n\nexport type Rule<T = {}> = {\n  actions?: Action[];\n  conditions: Condition[];\n  description: string;\n  name: string;\n} & T;\n", "export enum FormValidationProblem {\n  InvalidCharacters = 'invalid-characters',\n  InvalidPattern = 'invalid-pattern',\n  NotComplexEnough = 'not-complex-enough',\n  NotUnique = 'not-unique',\n  NotValidEmail = 'not-valid-email',\n  TooLong = 'too-long',\n  TooShort = 'too-short',\n  Required = 'required',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum TaskStatus {\n  'Canceled' = 'Canceled',\n  'Completed' = 'Completed',\n  'Created' = 'Created',\n  'Faulted' = 'Faulted',\n  'Queued' = 'Queued',\n  'Running' = 'Running',\n  'Waiting' = 'Waiting',\n}\n\nexport type Task = {\n  created?: DateTime;\n  data: Record<string, string> | Map<string, string>;\n  name: string;\n  id?: string;\n  status?: TaskStatus;\n};\n", "import { CommunicationMedium } from '../../../communications/medium';\n\n/**\n * @enum AuthenticationStatus\n * @property Archived - User is no longer active.\n * @property Compromised - User is disabled due to a potential security threat.\n * @property Confirmed - User has been confirmed.\n * @property ForcePasswordChange - The user is confirmed and the user can sign in\n * using a temporary password, but on first sign-in, the user must change his\n * or her password to a new value before doing anything else.\n * @property ResetRequired - User is confirmed, but the user must request a\n * code and reset his or her password before he or she can sign in.\n * @property Unconfirmed - User has been created but not confirmed.\n * @property Unknown - User status is not known.\n */\nexport enum UserVerificationStatus {\n  Archived = 'ARCHIVED',\n  Compromised = 'COMPROMISED',\n  Confirmed = 'CONFIRMED',\n  ForcePasswordChange = 'FORCE_CHANGE_PASSWORD',\n  ResetRequired = 'RESET_REQUIRED',\n  Unconfirmed = 'UNCONFIRMED',\n  Unknown = 'UNKNOWN',\n}\n\nexport enum UserAuthenticationVerificationType {\n  Code = 'code',\n  Link = 'link',\n}\n\nexport type UserVerificationDetails = {\n  status: UserVerificationStatus;\n  delivery: {\n    medium: CommunicationMedium.Email;\n    destination: string;\n  };\n};\n", "export enum UserRole {\n  Owner = 'Owner',\n  Admin = 'Admin',\n  User = 'User',\n  Visitor = 'Visitor',\n}\n", "export enum PaymentIntentStatus {\n  RequiresPaymentMethod = 'requires_payment_method',\n  RequiresConfirmation = 'requires_confirmation',\n  RequiresAction = 'requires_action',\n  Processing = 'processing',\n  RequiresCapture = 'requires_capture',\n  Canceled = 'canceled',\n  Succeeded = 'succeeded',\n}\n\nexport type PaymentMethod = {\n  id: string;\n  stripe_id: string;\n  brand: string;\n  country: string;\n  last_four_digits: string;\n  exp_month: number;\n  exp_year: number;\n  three_d_secure_usage_supported: boolean;\n};\n", "import { Person } from '../../../people/person';\nimport { PaymentMethod } from '../payment-method';\nimport { Product } from '../product/index';\n\nexport enum SubscriptionStatus {\n  Incomplete = 'incomplete',\n  IncompleteExpired = 'incomplete_expired',\n  Trialing = 'trialing',\n  Active = 'active',\n  PastDue = 'past_due',\n  Canceled = 'canceled',\n  Unpaid = 'unpaid',\n}\n\nexport enum SubscriptionPlanDuration {\n  Monthly = 'monthly',\n  Quarterly = 'quarterly',\n  Yearly = 'yearly',\n  Lifetime = 'lifetime',\n}\n\nexport type Subscription = {\n  active: boolean;\n  end_date: Date;\n  canceled: boolean;\n  renewal_date: Date;\n  id: string;\n  product_id: Product['id'];\n  plan_duration: SubscriptionPlanDuration;\n  trial_membership_active: boolean;\n  trial_membership_end_date: Date;\n  status: SubscriptionStatus;\n  payment_method_id: PaymentMethod['id'];\n  person_id: Person['id'];\n};\n", "import { ISO8601String } from \"../i18n/date\";\nimport { Person } from '../people/person'\n\nexport enum ChatMessageStatus {\n  Delivered = \"delivered\",\n  Read = \"read\",\n  Sending = \"sending\",\n  Sent = \"sent\",\n}\n\n\n\nexport enum ChatMessageType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Text = \"text\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageAttachmentType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageReactionType {\n  Angry = \"angry\",\n  Laugh = \"laugh\",\n  Like = \"like\",\n  Love = \"love\",\n  Sad = \"sad\",\n  Wow = \"wow\",\n  Wink = \"wink\",\n  Yay = \"yay\",\n}\n\n\nexport type ChatMessage = {\n  // The message attachments.\n  attachments?: {\n    // The attachment type.\n    type: ChatMessageAttachmentType;\n\n    // The attachment URL.\n    url: string;\n  }[];\n\n  // The message text.\n  body: string;\n\n  // The time the message was sent.\n  date: ISO8601String;\n\n  // Unique identifier for the message.\n  id?: string;\n\n  // The message reactions.\n  reactions?: {\n    // The reaction type.\n    type: ChatMessageReactionType;\n  }[];\n\n  recipients?: Person[];\n\n\n  // The message status.\n  status?: ChatMessageStatus;\n\n  // Subject of the message.\n  subject?: string;\n \n  // The user who sent the message.\n  sender?: {\n    avatar?: string;\n    id: string;\n    name: string;\n  };\n\n\n  \n  // The type of message.\n  type?: ChatMessageType;\n};\n\n\n", "export enum CommunicationMedium {\n  Email = 'email',\n  PhoneNumber = 'phone_number',\n}\n", "/*\n  This is a decent start, but I should make the log level TSDoc's more clear\n  of the intention and expected result from using each level.\n*/\nexport enum LogLevel {\n  /**\n   * Analytics (Business/Web) related events.\n   */\n  Analytics = 'analytics',\n  /**\n   * Exception that needs urgent review by engineers.\n   */\n  Critical = 'critical',\n  /**\n   * Logging used by developers to temporarily debug an issue.\n   */\n  Debug = 'debug',\n  /**\n   * A runtime exception that does not require immediate attention.\n   */\n  Exception = 'exception',\n  /**\n   * An HTTP request/response event. Default is 'info' level.\n   */\n  Http = 'http',\n  /**\n   * Used for logging general information regarding application processes.\n   */\n  Info = 'info',\n  /**\n   * Used to warn about possible issues.\n   */\n  Warning = 'warning',\n}\n", "// import { ExceptionObject } from '@srclaunch/exceptions';\n\nexport type HttpRequestHost = string;\nexport type HttpRequestResource = string;\nexport type HttpRequestBody = Record<string, unknown> | string | unknown | null;\n\nexport enum HttpRequestMethod {\n  Delete = 'delete',\n  Get = 'get',\n  Head = 'head',\n  Patch = 'patch',\n  Post = 'post',\n  Put = 'put',\n}\n\nexport type HttpRequestHeaders = Record<string, string>;\n\nexport type HttpResponseBody<T> = T & (Record<string, unknown> | unknown);\n\nexport type HttpResponseHeaders = Record<string, string>;\n\nexport enum HttpResponseCode {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  MULTI_STATUS = 207,\n  ALREADY_REPORTED = 208,\n  IM_USED = 226,\n  MULTIPLE_CHOICES = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  USE_PROXY = 305,\n  SWITCH_PROXY = 306,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED_REQUEST = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  LOCKED = 423,\n  FAILED_DEPENDENCY = 424,\n  TOO_EARLY = 425,\n  UPGRADE_REQUIRED = 426,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n  VARIANT_ALSO_NEGOTIATES = 506,\n  INSUFFICIENT_STORAGE = 507,\n  LOOP_DETECTED = 508,\n  BANDWIDTH_LIMIT_EXCEEDED = 509,\n  NOT_EXTENDED = 510,\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n\nexport type HttpRequest = {\n  readonly body?: HttpRequestBody;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly response?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpRequestHeaders;\n  readonly host?: HttpRequestHost;\n  readonly method: HttpRequestMethod;\n  readonly resource: HttpRequestResource;\n};\n\nexport type HttpResponse<T = Record<string, unknown>> = {\n  readonly body?: HttpResponseBody<T>;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly request?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpResponseHeaders;\n  readonly status?: {\n    readonly code: HttpResponseCode;\n  };\n};\n", "export enum Platform {\n  DesktopApplication = 'desktop-application',\n  MobileApplication = 'mobile-application',\n  Node = 'node',\n  WebApplication = 'web-application',\n}\n", "import { TimezoneRegions } from '../time/region';\nimport { TimezoneOffset } from '../time/timezone';\nimport { Timezones } from '../time/timezones';\nimport { CurrencyCode } from './../currency/index';\nimport { LocaleCode } from '.';\n\nexport enum CountryCode {\n  Afghanistan = 'AF',\n  Albania = 'AL',\n  Algeria = 'DZ',\n  AmericanSamoa = 'AS',\n  Andorra = 'AD',\n  Angola = 'AO',\n  Anguilla = 'AI',\n  Antarctica = 'AQ',\n  AntiguaAndBarbuda = 'AG',\n  Argentina = 'AR',\n  Armenia = 'AM',\n  Aruba = 'AW',\n  Australia = 'AU',\n  Austria = 'AT',\n  Azerbaijan = 'AZ',\n  Bahamas = 'BS',\n  Bahrain = 'BH',\n  Bangladesh = 'BD',\n  Barbados = 'BB',\n  Belarus = 'BY',\n  Belgium = 'BE',\n  Belize = 'BZ',\n  Benin = 'BJ',\n  Bermuda = 'BM',\n  Bhutan = 'BT',\n  Bolivia = 'BO',\n  BosniaAndHerzegovina = 'BA',\n  Botswana = 'BW',\n  BouvetIsland = 'BV',\n  Brazil = 'BR',\n  BritishIndianOceanTerritory = 'IO',\n  Brunei = 'BN',\n  Bulgaria = 'BG',\n  BurkinaFaso = 'BF',\n  Burundi = 'BI',\n  Cambodia = 'KH',\n  Cameroon = 'CM',\n  Canada = 'CA',\n  CapeVerde = 'CV',\n  CaymanIslands = 'KY',\n  CentralAfricanRepublic = 'CF',\n  Chad = 'TD',\n  Chile = 'CL',\n  China = 'CN',\n  ChristmasIsland = 'CX',\n  CocosKeelingIslands = 'CC',\n  Colombia = 'CO',\n  Comoros = 'KM',\n  Congo = 'CG',\n  CongoTheDemocraticRepublicOfThe = 'CD',\n  CookIslands = 'CK',\n  CostaRica = 'CR',\n  CoteDIvoire = 'CI',\n  Croatia = 'HR',\n  Cuba = 'CU',\n  Cyprus = 'CY',\n  CzechRepublic = 'CZ',\n  Denmark = 'DK',\n  Djibouti = 'DJ',\n  Dominica = 'DM',\n  DominicanRepublic = 'DO',\n  Ecuador = 'EC',\n  Egypt = 'EG',\n  ElSalvador = 'SV',\n  EquatorialGuinea = 'GQ',\n  Eritrea = 'ER',\n  Estonia = 'EE',\n  Ethiopia = 'ET',\n  FalklandIslands = 'FK',\n  FaroeIslands = 'FO',\n  Fiji = 'FJ',\n  Finland = 'FI',\n  France = 'FR',\n  FrenchGuiana = 'GF',\n  FrenchPolynesia = 'PF',\n  FrenchSouthernTerritories = 'TF',\n  Gabon = 'GA',\n  Gambia = 'GM',\n  Georgia = 'GE',\n  Germany = 'DE',\n  Ghana = 'GH',\n  Gibraltar = 'GI',\n  Greece = 'GR',\n  Greenland = 'GL',\n  Grenada = 'GD',\n  Guadeloupe = 'GP',\n  Guam = 'GU',\n  Guatemala = 'GT',\n  Guernsey = 'GG',\n  Guinea = 'GN',\n  GuineaBissau = 'GW',\n  Guyana = 'GY',\n  Haiti = 'HT',\n  HeardIslandMcdonaldIslands = 'HM',\n  HolySeeVaticanCityState = 'VA',\n  Honduras = 'HN',\n  HongKong = 'HK',\n  Hungary = 'HU',\n  Iceland = 'IS',\n  India = 'IN',\n  Indonesia = 'ID',\n  Iran = 'IR',\n  Iraq = 'IQ',\n  Ireland = 'IE',\n  IsleOfMan = 'IM',\n  Israel = 'IL',\n  Italy = 'IT',\n  Jamaica = 'JM',\n  Japan = 'JP',\n  Jersey = 'JE',\n  Jordan = 'JO',\n  Kazakhstan = 'KZ',\n  Kenya = 'KE',\n  Kiribati = 'KI',\n  Kuwait = 'KW',\n  Kyrgyzstan = 'KG',\n  Laos = 'LA',\n  Latvia = 'LV',\n  Lebanon = 'LB',\n  Lesotho = 'LS',\n  Liberia = 'LR',\n  Libya = 'LY',\n  Liechtenstein = 'LI',\n  Lithuania = 'LT',\n  Luxembourg = 'LU',\n  Macau = 'MO',\n  Madagascar = 'MG',\n  Malawi = 'MW',\n  Malaysia = 'MY',\n  Maldives = 'MV',\n  Mali = 'ML',\n  Malta = 'MT',\n  MarshallIslands = 'MH',\n  Martinique = 'MQ',\n  Mauritania = 'MR',\n  Mauritius = 'MU',\n  Mayotte = 'YT',\n  Mexico = 'MX',\n  MicronesiaFederatedStatesOf = 'FM',\n  Moldova = 'MD',\n  Monaco = 'MC',\n  Mongolia = 'MN',\n  Montenegro = 'ME',\n  Montserrat = 'MS',\n  Morocco = 'MA',\n  Mozambique = 'MZ',\n  Myanmar = 'MM',\n  Namibia = 'NA',\n  Nauru = 'NR',\n  Nepal = 'NP',\n  Netherlands = 'NL',\n  NetherlandsAntilles = 'AN',\n  NewCaledonia = 'NC',\n  NewZealand = 'NZ',\n  NorthKorea = 'KP',\n  Nicaragua = 'NI',\n  Niger = 'NE',\n  Nigeria = 'NG',\n  Niue = 'NU',\n  NorfolkIsland = 'NF',\n  NorthMacedonia = 'MK',\n  NorthernMarianaIslands = 'MP',\n  Norway = 'NO',\n  Oman = 'OM',\n  Pakistan = 'PK',\n  Palau = 'PW',\n  PalestinianTerritoryOccupied = 'PS',\n  Panama = 'PA',\n  PapuaNewGuinea = 'PG',\n  Paraguay = 'PY',\n  Peru = 'PE',\n  Philippines = 'PH',\n  Pitcairn = 'PN',\n  Poland = 'PL',\n  Portugal = 'PT',\n  PuertoRico = 'PR',\n  Qatar = 'QA',\n  Reunion = 'RE',\n  Romania = 'RO',\n  RussianFederation = 'RU',\n  Rwanda = 'RW',\n  SaintBarthelemy = 'BL',\n  SaintHelena = 'SH',\n  SaintKittsAndNevis = 'KN',\n  SaintLucia = 'LC',\n  SaintMartin = 'MF',\n  SaintPierreAndMiquelon = 'PM',\n  SaintVincentAndTheGrenadines = 'VC',\n  Samoa = 'WS',\n  SanMarino = 'SM',\n  SaoTomeAndPrincipe = 'ST',\n  SaudiArabia = 'SA',\n  Senegal = 'SN',\n  Serbia = 'RS',\n  SerbiaAndMontenegro = 'CS',\n  Seychelles = 'SC',\n  SierraLeone = 'SL',\n  Singapore = 'SG',\n  Slovakia = 'SK',\n  Slovenia = 'SI',\n  SolomonIslands = 'SB',\n  Somalia = 'SO',\n  SouthAfrica = 'ZA',\n  SouthGeorgiaAndTheSouthSandwichIslands = 'GS',\n  SouthKorea = 'KR',\n  Spain = 'ES',\n  SriLanka = 'LK',\n  Sudan = 'SD',\n  Suriname = 'SR',\n  SvalbardAndJanMayen = 'SJ',\n  Swaziland = 'SZ',\n  Sweden = 'SE',\n  Switzerland = 'CH',\n  Syria = 'SY',\n  Taiwan = 'TW',\n  Tajikistan = 'TJ',\n  Tanzania = 'TZ',\n  Thailand = 'TH',\n  TimorLeste = 'TL',\n  Togo = 'TG',\n  Tokelau = 'TK',\n  Tonga = 'TO',\n  TrinidadAndTobago = 'TT',\n  Tunisia = 'TN',\n  Turkey = 'TR',\n  Turkmenistan = 'TM',\n  TurksAndCaicosIslands = 'TC',\n  Tuvalu = 'TV',\n  Uganda = 'UG',\n  Ukraine = 'UA',\n  UnitedArabEmirates = 'AE',\n  UnitedKingdom = 'GB',\n  UnitedStates = 'US',\n  UnitedStatesMinorOutlyingIslands = 'UM',\n  Uruguay = 'UY',\n  Uzbekistan = 'UZ',\n  Vanuatu = 'VU',\n  Venezuela = 'VE',\n  Vietnam = 'VN',\n  VirginIslandsBritish = 'VG',\n  VirginIslandsUS = 'VI',\n  WallisAndFutuna = 'WF',\n  WesternSahara = 'EH',\n  Yemen = 'YE',\n  Zambia = 'ZM',\n  Zimbabwe = 'ZW',\n}\n\nexport type CountrySubdivision = {\n  // code: CountrySubdivisionCode;\n  name: string;\n  capital: string;\n  population: number;\n};\n\nexport type Country = {\n  i18n: {\n    calling_codes: number[];\n    currencies: CurrencyCode[];\n    languages: LocaleCode[];\n    tz: {\n      offsets: TimezoneOffset[];\n      regions: TimezoneRegions[];\n      timezones: Timezones[];\n    };\n  };\n  id: CountryCode;\n  info: {\n    flag: {\n      emoji: string;\n      emoji_unicode: string;\n      svg: string;\n    };\n    tld: string[];\n  };\n  iso: {\n    alpha2: CountryCode;\n    alpha3: string;\n    numeric: string;\n  };\n  name: {\n    alt_spellings: string[];\n    demonym: string;\n    native: {\n      endonym: string;\n    };\n    official: string;\n    short: string;\n    translations: {\n      [lang: string]: string;\n    };\n  };\n  statistics?: {\n    demographics: {\n      age: {\n        distribution: { age: string; percentage: number }[];\n        median_age: number;\n      };\n      population: {\n        largest_city: string;\n        total: number;\n      };\n    };\n    geography: {\n      area: number;\n      region: string;\n      sub_region: string;\n    };\n    government: {\n      capital: string;\n      type: string;\n    };\n  };\n};\n", "import { CountryCode } from '../locale/country.js';\n\n/**\n * ISO-4217 Currency Codes\n */\nexport enum CurrencyCode {\n  AfghanistanAfghani = 'AFN',\n  AlbaniaLek = 'ALL',\n  ArmeniaDram = 'AMD',\n  AlgeriaDinar = 'DZD',\n  AmericanSamoaTala = 'WST',\n  AngolaKwanza = 'AOA',\n  ArgentinaPeso = 'ARS',\n  AustraliaDollar = 'AUD',\n  ArubaFlorin = 'AWG',\n  AzerbaijanNewManat = 'AZN',\n  BosniaAndHerzegovinaConvertibleMark = 'BAM',\n  BahrainDinar = 'BHD',\n  BarbadosDollar = 'BBD',\n  BangladeshTaka = 'BDT',\n  BelgiumFranc = 'BGN',\n  BermudaDollar = 'BMD',\n  BruneiDollar = 'BND',\n  BoliviaBoliviano = 'BOB',\n  BrazilReal = 'BRL',\n  BahamasDollar = 'BSD',\n  BhutanNgultrum = 'BTN',\n  BotswanaPula = 'BWP',\n  BelarusRuble = 'BYN',\n  BelizeDollar = 'BZD',\n  BulgariaLev = 'BGN',\n  BurundiFranc = 'BIF',\n  BritishPound = 'GBP',\n  CanadaDollar = 'CAD',\n  CambodiaRiel = 'KHR',\n  ComorosFranc = 'KMF',\n  CaymanIslandsDollar = 'KYD',\n  ChilePeso = 'CLP',\n  ChinaYuan = 'CNY',\n  ColombiaPeso = 'COP',\n  CostaRicaColon = 'CRC',\n  CroatiaKuna = 'HRK',\n  CubaConvertiblePeso = 'CUC',\n  CubaPeso = 'CUP',\n  CapeVerdeEscudo = 'CVE',\n  CyprusPound = 'CYP',\n  CzechRepublicKoruna = 'CZK',\n  DjiboutiFranc = 'DJF',\n  DenmarkKrone = 'DKK',\n  DominicaDollar = 'XCD',\n  DominicanRepublicPeso = 'DOP',\n  EastCaribbeanDollar = 'XCD',\n  EgyptPound = 'EGP',\n  ElSalvadorColon = 'SVC',\n  EquatorialGuineaEkwele = 'GQE',\n  EritreaNakfa = 'ERN',\n  EstoniaKroon = 'EEK',\n  EthiopiaBirr = 'ETB',\n  Euro = 'EUR',\n  FijiDollar = 'FJD',\n  FalklandIslandsPound = 'FKP',\n  GambiaDalasi = 'GMD',\n  GabonFranc = 'GMD',\n  GeorgiaLari = 'GEL',\n  GhanaCedi = 'GHS',\n  GibraltarPound = 'GIP',\n  GuatemalaQuetzal = 'GTQ',\n  GuernseyPound = 'GGP',\n  GuineaBissauPeso = 'GWP',\n  GuyanaDollar = 'GYD',\n  HongKongDollar = 'HKD',\n  HondurasLempira = 'HNL',\n  HaitiGourde = 'HTG',\n  HungaryForint = 'HUF',\n  IndonesiaRupiah = 'IDR',\n  IsleOfManPound = 'IMP',\n  IsraelNewShekel = 'ILS',\n  IndiaRupee = 'INR',\n  IraqDinar = 'IQD',\n  IranRial = 'IRR',\n  IcelandKrona = 'ISK',\n  JamaicaDollar = 'JMD',\n  JapanYen = 'JPY',\n  JerseyPound = 'JEP',\n  JordanDinar = 'JOD',\n  KazakhstanTenge = 'KZT',\n  KenyaShilling = 'KES',\n  KyrgyzstanSom = 'KGS',\n  NorthKoreaWon = 'KPW',\n  SouthKoreaWon = 'KRW',\n  KuwaitDinar = 'KWD',\n  LaosKip = 'LAK',\n  LebanonPound = 'LBP',\n  LiberiaDollar = 'LRD',\n  LesothoLoti = 'LSL',\n  LibyanDinar = 'LYD',\n  LithuaniaLitas = 'LTL',\n  LatviaLats = 'LVL',\n  LibyaDinar = 'LYD',\n  MacauPataca = 'MOP',\n  MaldivesRufiyaa = 'MVR',\n  MalawiKwacha = 'MWK',\n  MaltaLira = 'MTL',\n  MauritiusRupee = 'MUR',\n  MongoliaTughrik = 'MNT',\n  MoroccoDirham = 'MAD',\n  MoldovaLeu = 'MDL',\n  MozambiqueMetical = 'MZN',\n  MadagascarAriary = 'MGA',\n  MacedoniaDenar = 'MKD',\n  MexicoPeso = 'MXN',\n  MalaysiaRinggit = 'MYR',\n  MyanmarKyat = 'MMK',\n  MicronesiaFederatedStatesDollar = 'USD',\n  NicaraguaCordoba = 'NIO',\n  NamibiaDollar = 'NAD',\n  NetherlandsAntillesGuilder = 'ANG',\n  NewCaledoniaFranc = 'XPF',\n  NigeriaNaira = 'NGN',\n  NicaraguaCordobaOro = 'NIO',\n  NigerCFAFranc = 'XOF',\n  NorwayKrone = 'NOK',\n  NepalRupee = 'NPR',\n  NewZealandDollar = 'NZD',\n  OmanRial = 'OMR',\n  PanamaBalboa = 'PAB',\n  PeruNuevoSol = 'PEN',\n  PapuaNewGuineaKina = 'PGK',\n  PhilippinesPeso = 'PHP',\n  PakistanRupee = 'PKR',\n  PeruNuevo = 'PEN',\n  PolandZloty = 'PLN',\n  ParaguayGuarani = 'PYG',\n  QatarRial = 'QAR',\n  RomaniaNewLeu = 'RON',\n  SerbiaDinar = 'RSD',\n  SriLankaRupee = 'LKR',\n  RussiaRuble = 'RUB',\n  RwandaFranc = 'RWF',\n  SaudiArabiaRiyal = 'SAR',\n  SlovakiaKoruna = 'SKK',\n  SloveniaTolar = 'SIT',\n  SolomonIslandsDollar = 'SBD',\n  SeychellesRupee = 'SCR',\n  SudanPound = 'SDG',\n  SwedenKrona = 'SEK',\n  SingaporeDollar = 'SGD',\n  SaintHelenaPound = 'SHP',\n  SierraLeoneLeone = 'SLL',\n  SomaliaShilling = 'SOS',\n  SurinameDollar = 'SRD',\n  SintMaartenPound = 'SXD',\n  SyriaPound = 'SYP',\n  SwazilandLilangeni = 'SZL',\n  SwitzerlandFranc = 'CHF',\n  ThailandBaht = 'THB',\n  TajikistanSomoni = 'TJS',\n  TurkmenistanManat = 'TMT',\n  TunisiaDinar = 'TND',\n  TongaPaanga = 'TOP',\n  TurkeyLira = 'TRY',\n  TrinidadAndTobagoDollar = 'TTD',\n  TaiwanNewDollar = 'TWD',\n  TanzaniaShilling = 'TZS',\n  UnitedArabEmiratesDirham = 'AED',\n  UkraineHryvnia = 'UAH',\n  UgandaShilling = 'UGX',\n  UnitedKingdomPound = 'GBP',\n  UnitedStatesDollar = 'USD',\n  UruguayPeso = 'UYU',\n  UzbekistanSom = 'UZS',\n  VenezuelaBolivar = 'VEF',\n  VietnamDong = 'VND',\n  VanuatuVatu = 'VUV',\n  SamoaTala = 'WST',\n  YemenRial = 'YER',\n  SouthAfricaRand = 'ZAR',\n  ZambiaKwacha = 'ZMW',\n  ZimbabweDollar = 'ZWL',\n}\n\nexport type Currency = {\n  code: CurrencyCode;\n  countries: CountryCode[];\n  symbol: string;\n  decimal_digits: number;\n  rounding: number;\n  name: string;\n  symbol_native: string;\n  decimal_separator: string;\n  thousands_separator: string;\n  positive_sign: string;\n  negative_sign: string;\n  symbol_placement: string;\n};\n\nexport const Currencies: Record<string, Currency> = {\n  AfghanistanAfghani: {\n    code: CurrencyCode.AfghanistanAfghani,\n    countries: [CountryCode.Afghanistan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Afghan Afghani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u060B',\n    symbol_native: '\u060B',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AlbaniaLek: {\n    code: CurrencyCode.AlbaniaLek,\n    countries: [CountryCode.Albania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Albanian Lek',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lek',\n    symbol_native: 'Lek',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  AlgeriaDinar: {\n    code: CurrencyCode.AlgeriaDinar,\n    countries: [CountryCode.Algeria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Algerian Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062C',\n    symbol_native: '\u062F.\u062C',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArgentinaPeso: {\n    code: CurrencyCode.ArgentinaPeso,\n    countries: [CountryCode.Argentina],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Argentine Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArmeniaDram: {\n    code: CurrencyCode.ArmeniaDram,\n    countries: [CountryCode.Armenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Armenian Dram',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0564\u0580.',\n    symbol_native: '\u0564\u0580.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ArubaFlorin: {\n    code: CurrencyCode.ArubaFlorin,\n    countries: [CountryCode.Aruba],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Aruban Florin',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AustraliaDollar: {\n    code: CurrencyCode.AustraliaDollar,\n    countries: [CountryCode.Australia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Australian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AzerbaijanManat: {\n    code: CurrencyCode.AzerbaijanNewManat,\n    countries: [CountryCode.Azerbaijan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Azerbaijani Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043C\u0430\u043D',\n    symbol_native: '\u043C\u0430\u043D',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BahrainDinar: {\n    code: CurrencyCode.BahrainDinar,\n    countries: [CountryCode.Bahrain],\n    decimal_digits: 3,\n    decimal_separator: '.',\n    name: 'Bahraini Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '.\u062F.\u0628',\n    symbol_native: '.\u062F.\u0628',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BangladeshTaka: {\n    code: CurrencyCode.BangladeshTaka,\n    countries: [CountryCode.Bangladesh],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bangladeshi Taka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u09F3',\n    symbol_native: '\u09F3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BarbadosDollar: {\n    code: CurrencyCode.BarbadosDollar,\n    countries: [CountryCode.Barbados],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Barbadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BelarusRuble: {\n    code: CurrencyCode.BelarusRuble,\n    countries: [CountryCode.Belarus],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belarusian Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BelizeDollar: {\n    code: CurrencyCode.BelizeDollar,\n    countries: [CountryCode.Belize],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belize Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'BZ$',\n    symbol_native: 'BZ$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BermudaDollar: {\n    code: CurrencyCode.BermudaDollar,\n    countries: [CountryCode.Bermuda],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bermudian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BoliviaBoliviano: {\n    code: CurrencyCode.BoliviaBoliviano,\n    countries: [CountryCode.Bolivia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bolivian Boliviano',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$b',\n    symbol_native: '$b',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BosniaAndHerzegovinaConvertibleMarka: {\n    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,\n    countries: [CountryCode.BosniaAndHerzegovina],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Bosnia and Herzegovina Convertible Marka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KM',\n    symbol_native: 'KM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BotswanaPula: {\n    code: CurrencyCode.BotswanaPula,\n    countries: [CountryCode.Botswana],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Botswana Pula',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'P',\n    symbol_native: 'P',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BrazilReal: {\n    code: CurrencyCode.BrazilReal,\n    countries: [CountryCode.Brazil],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Brazilian Real',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R$',\n    symbol_native: 'R$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BruneiDollar: {\n    code: CurrencyCode.BruneiDollar,\n    countries: [CountryCode.Brunei],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Brunei Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BulgariaLev: {\n    code: CurrencyCode.BulgariaLev,\n    countries: [CountryCode.Bulgaria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bulgarian Lev',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043B\u0432',\n    symbol_native: '\u043B\u0432',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BurundiFranc: {\n    code: CurrencyCode.BurundiFranc,\n    countries: [CountryCode.Burundi],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Burundian Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'FBu',\n    symbol_native: 'FBu',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CambodiaRiel: {\n    code: CurrencyCode.CambodiaRiel,\n    countries: [CountryCode.Cambodia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cambodian Riel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u17DB',\n    symbol_native: '\u17DB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CanadaDollar: {\n    code: CurrencyCode.CanadaDollar,\n    countries: [CountryCode.Canada],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Canadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CapeVerdeEscudo: {\n    code: CurrencyCode.CapeVerdeEscudo,\n    countries: [CountryCode.CapeVerde],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cape Verde Escudo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Esc',\n    symbol_native: 'Esc',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CaymanIslandsDollar: {\n    code: CurrencyCode.CaymanIslandsDollar,\n    countries: [CountryCode.CaymanIslands],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cayman Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChilePeso: {\n    code: CurrencyCode.ChilePeso,\n    countries: [CountryCode.Chile],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Chilean Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChinaYuanRenminbi: {\n    code: CurrencyCode.ChinaYuan,\n    countries: [CountryCode.China],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Chinese Yuan',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\u00A5',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ColombiaPeso: {\n    code: CurrencyCode.ColombiaPeso,\n    countries: [CountryCode.Colombia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Colombian Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ComorosFranc: {\n    code: CurrencyCode.ComorosFranc,\n    countries: [CountryCode.Comoros],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Comoros Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CF',\n    symbol_native: 'CF',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CostaRicaColon: {\n    code: CurrencyCode.CostaRicaColon,\n    countries: [CountryCode.CostaRica],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Costa Rican Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CroatiaKuna: {\n    code: CurrencyCode.CroatiaKuna,\n    countries: [CountryCode.Croatia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Croatian Kuna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kn',\n    symbol_native: 'kn',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaConvertiblePeso: {\n    code: CurrencyCode.CubaConvertiblePeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Convertible Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaPeso: {\n    code: CurrencyCode.CubaPeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CyprusPound: {\n    code: CurrencyCode.CyprusPound,\n    countries: [CountryCode.Cyprus],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cyprus Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CzechRepublicKoruna: {\n    code: CurrencyCode.CzechRepublicKoruna,\n    countries: [CountryCode.CzechRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Czech Republic Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K\u010D',\n    symbol_native: 'K\u010D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DenmarkKrone: {\n    code: CurrencyCode.DenmarkKrone,\n    countries: [CountryCode.Denmark],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Denmark Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DjiboutiFranc: {\n    code: CurrencyCode.DjiboutiFranc,\n    countries: [CountryCode.Djibouti],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Djibouti Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Fdj',\n    symbol_native: 'Fdj',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  DominicanRepublicPeso: {\n    code: CurrencyCode.DominicanRepublicPeso,\n    countries: [CountryCode.DominicanRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Dominican Republic Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RD$',\n    symbol_native: 'RD$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EastCaribbeanDollar: {\n    code: CurrencyCode.EastCaribbeanDollar,\n    countries: [\n      CountryCode.AntiguaAndBarbuda,\n      CountryCode.Dominica,\n      CountryCode.Grenada,\n      CountryCode.SaintKittsAndNevis,\n      CountryCode.SaintLucia,\n      CountryCode.SaintVincentAndTheGrenadines,\n    ],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'East Caribbean Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EgyptPound: {\n    code: CurrencyCode.EgyptPound,\n    countries: [CountryCode.Egypt],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Egypt Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ElSalvadorColon: {\n    code: CurrencyCode.ElSalvadorColon,\n    countries: [CountryCode.ElSalvador],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'El Salvador Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EquatorialGuineaEkwele: {\n    code: CurrencyCode.EquatorialGuineaEkwele,\n    countries: [CountryCode.EquatorialGuinea],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'GQE',\n    symbol_native: 'GQE',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EritreaNakfa: {\n    code: CurrencyCode.EritreaNakfa,\n    countries: [CountryCode.Eritrea],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Eritrea Nakfa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Nfk',\n    symbol_native: 'Nfk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EstoniaKroon: {\n    code: CurrencyCode.EstoniaKroon,\n    countries: [CountryCode.Estonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Estonia Kroon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EthiopiaBirr: {\n    code: CurrencyCode.EthiopiaBirr,\n    countries: [CountryCode.Ethiopia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ethiopia Birr',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  Euro: {\n    code: CurrencyCode.Euro,\n    countries: [\n      CountryCode.Andorra,\n      CountryCode.Austria,\n      CountryCode.Belgium,\n      CountryCode.Cyprus,\n      CountryCode.Estonia,\n      CountryCode.Finland,\n      CountryCode.France,\n      CountryCode.Germany,\n      CountryCode.Greece,\n      CountryCode.Ireland,\n      CountryCode.Italy,\n      CountryCode.Latvia,\n      CountryCode.Lithuania,\n      CountryCode.Luxembourg,\n      CountryCode.Malta,\n      CountryCode.Monaco,\n      CountryCode.Netherlands,\n      CountryCode.Portugal,\n      CountryCode.Spain,\n      CountryCode.Sweden,\n      CountryCode.UnitedKingdom,\n    ],\n\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Euro',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AC',\n    symbol_native: '\u20AC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FalklandIslandsPound: {\n    code: CurrencyCode.FalklandIslandsPound,\n    countries: [CountryCode.FalklandIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FijiDollar: {\n    code: CurrencyCode.FijiDollar,\n    countries: [CountryCode.Fiji],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Fiji Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GambiaDalasi: {\n    code: CurrencyCode.GambiaDalasi,\n    countries: [CountryCode.Gambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gambia Dalasi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'D',\n    symbol_native: 'D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GeorgiaLari: {\n    code: CurrencyCode.GeorgiaLari,\n    countries: [CountryCode.Georgia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Georgia Lari',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BE',\n    symbol_native: '\u20BE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GhanaCedi: {\n    code: CurrencyCode.GhanaCedi,\n    countries: [CountryCode.Ghana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ghana Cedi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GibraltarPound: {\n    code: CurrencyCode.GibraltarPound,\n    countries: [CountryCode.Gibraltar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gibraltar Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuatemalaQuetzal: {\n    code: CurrencyCode.GuatemalaQuetzal,\n    countries: [CountryCode.Guatemala],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guatemala Quetzal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Q',\n    symbol_native: 'Q',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuernseyPound: {\n    code: CurrencyCode.GuernseyPound,\n    countries: [CountryCode.Guernsey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guernsey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuineaBissauPeso: {\n    code: CurrencyCode.GuineaBissauPeso,\n    countries: [CountryCode.GuineaBissau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guinea-Bissau Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuyanaDollar: {\n    code: CurrencyCode.GuyanaDollar,\n    countries: [CountryCode.Guyana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guyana Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HaitiGourde: {\n    code: CurrencyCode.HaitiGourde,\n    countries: [CountryCode.Haiti],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Haiti Gourde',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'G',\n    symbol_native: 'G',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HondurasLempira: {\n    code: CurrencyCode.HondurasLempira,\n    countries: [CountryCode.Honduras],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Honduras Lempira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HongKongDollar: {\n    code: CurrencyCode.HongKongDollar,\n    countries: [CountryCode.HongKong],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hong Kong Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HungaryForint: {\n    code: CurrencyCode.HungaryForint,\n    countries: [CountryCode.Hungary],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hungary Forint',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ft',\n    symbol_native: 'Ft',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IcelandKrona: {\n    code: CurrencyCode.IcelandKrona,\n    countries: [CountryCode.Iceland],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iceland Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndianRupee: {\n    code: CurrencyCode.IndiaRupee,\n    countries: [CountryCode.India, CountryCode.Bhutan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Indian Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B9',\n    symbol_native: '\u20B9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndonesiaRupiah: {\n    code: CurrencyCode.IndonesiaRupiah,\n    countries: [CountryCode.Indonesia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Indonesia Rupiah',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rp',\n    symbol_native: 'Rp',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IranRial: {\n    code: CurrencyCode.IranRial,\n    countries: [CountryCode.Iran],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iran Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsleOfManPound: {\n    code: CurrencyCode.IsleOfManPound,\n    countries: [CountryCode.IsleOfMan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Isle of Man Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsraeliShekel: {\n    code: CurrencyCode.IsraelNewShekel,\n    countries: [CountryCode.Israel],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Israeli Shekel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AA',\n    symbol_native: '\u20AA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JamaicaDollar: {\n    code: CurrencyCode.JamaicaDollar,\n    countries: [CountryCode.Jamaica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jamaica Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'J$',\n    symbol_native: 'J$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JapanYen: {\n    code: CurrencyCode.JapanYen,\n    countries: [CountryCode.Japan],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Japan Yen',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\uFFE5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JerseyPound: {\n    code: CurrencyCode.JerseyPound,\n    countries: [CountryCode.Jersey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jersey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JordanDinar: {\n    code: CurrencyCode.JordanDinar,\n    countries: [CountryCode.Jordan],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Jordan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'JD',\n    symbol_native: 'JD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KazakhstanTenge: {\n    code: CurrencyCode.KazakhstanTenge,\n    countries: [CountryCode.Kazakhstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kazakhstan Tenge',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B8',\n    symbol_native: '\u20B8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KenyaShilling: {\n    code: CurrencyCode.KenyaShilling,\n    countries: [CountryCode.Kenya],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kenya Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KSh',\n    symbol_native: 'KSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KuwaitDinar: {\n    code: CurrencyCode.KuwaitDinar,\n    countries: [CountryCode.Kuwait],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Kuwait Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KD',\n    symbol_native: 'KD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KyrgyzstanSom: {\n    code: CurrencyCode.KyrgyzstanSom,\n    countries: [CountryCode.Kyrgyzstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kyrgyzstan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KGS',\n    symbol_native: 'KGS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LaosKip: {\n    code: CurrencyCode.LaosKip,\n    countries: [CountryCode.Laos],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Laos Kip',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AD',\n    symbol_native: '\u20AD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LatviaLats: {\n    code: CurrencyCode.LatviaLats,\n    countries: [CountryCode.Latvia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Latvia Lat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ls',\n    symbol_native: 'Ls',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LebanonPound: {\n    code: CurrencyCode.LebanonPound,\n    countries: [CountryCode.Lebanon],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Lebanon Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LesothoLoti: {\n    code: CurrencyCode.LesothoLoti,\n    countries: [CountryCode.Lesotho],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lesotho Loti',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'M',\n    symbol_native: 'M',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LiberiaDollar: {\n    code: CurrencyCode.LiberiaDollar,\n    countries: [CountryCode.Liberia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Liberia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LibyanDinar: {\n    code: CurrencyCode.LibyanDinar,\n    countries: [CountryCode.Libya],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Libyan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'LD',\n    symbol_native: 'LD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LithuaniaLitas: {\n    code: CurrencyCode.LithuaniaLitas,\n    countries: [CountryCode.Lithuania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lithuania Litas',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lt',\n    symbol_native: 'Lt',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacauPataca: {\n    code: CurrencyCode.MacauPataca,\n    countries: [CountryCode.Macau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macau Pataca',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MOP$',\n    symbol_native: 'MOP$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacedoniaDenar: {\n    code: CurrencyCode.MacedoniaDenar,\n    countries: [CountryCode.NorthMacedonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macedonia Denar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0434\u0435\u043D',\n    symbol_native: '\u0434\u0435\u043D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MadagascarAriary: {\n    code: CurrencyCode.MadagascarAriary,\n    countries: [CountryCode.Madagascar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Madagascar Ariary',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ar',\n    symbol_native: 'Ar',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalawiKwacha: {\n    code: CurrencyCode.MalawiKwacha,\n    countries: [CountryCode.Malawi],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malawi Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MK',\n    symbol_native: 'MK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalaysiaRinggit: {\n    code: CurrencyCode.MalaysiaRinggit,\n    countries: [CountryCode.Malaysia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malaysia Ringgit',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RM',\n    symbol_native: 'RM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaldivesRufiyaa: {\n    code: CurrencyCode.MaldivesRufiyaa,\n    countries: [CountryCode.Maldives],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Maldives Rufiyaa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rf',\n    symbol_native: 'Rf',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaltaLira: {\n    code: CurrencyCode.MaltaLira,\n    countries: [CountryCode.Malta],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malta Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lm',\n    symbol_native: 'Lm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MauritiusRupee: {\n    code: CurrencyCode.MauritiusRupee,\n    countries: [CountryCode.Mauritius],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mauritius Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MexicoPeso: {\n    code: CurrencyCode.MexicoPeso,\n    countries: [CountryCode.Mexico],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mexico Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoldovaLeu: {\n    code: CurrencyCode.MoldovaLeu,\n    countries: [CountryCode.Moldova],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Moldova Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MongoliaTughrik: {\n    code: CurrencyCode.MongoliaTughrik,\n    countries: [CountryCode.Mongolia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mongolia Tughrik',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AE',\n    symbol_native: '\u20AE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoroccoDirham: {\n    code: CurrencyCode.MoroccoDirham,\n    countries: [CountryCode.Morocco],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Morocco Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'DH',\n    symbol_native: 'DH',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MozambiqueMetical: {\n    code: CurrencyCode.MozambiqueMetical,\n    countries: [CountryCode.Mozambique],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mozambique Metical',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MT',\n    symbol_native: 'MT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MyanmarKyat: {\n    code: CurrencyCode.MyanmarKyat,\n    countries: [CountryCode.Myanmar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Myanmar Kyat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K',\n    symbol_native: 'K',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NamibiaDollar: {\n    code: CurrencyCode.NamibiaDollar,\n    countries: [CountryCode.Namibia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Namibia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NepalRupee: {\n    code: CurrencyCode.NepalRupee,\n    countries: [CountryCode.Nepal],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nepal Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NetherlandsAntillesGuilder: {\n    code: CurrencyCode.NetherlandsAntillesGuilder,\n    countries: [CountryCode.NetherlandsAntilles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Netherlands Antilles Guilder',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewCaledoniaFranc: {\n    code: CurrencyCode.NewCaledoniaFranc,\n    countries: [CountryCode.NewCaledonia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'New Caledonia Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A3',\n    symbol_native: '\u20A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewZealandDollar: {\n    code: CurrencyCode.NewZealandDollar,\n    countries: [CountryCode.NewZealand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'New Zealand Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NicaraguaCordoba: {\n    code: CurrencyCode.NicaraguaCordoba,\n    countries: [CountryCode.Nicaragua],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nicaragua Cordoba',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'C$',\n    symbol_native: 'C$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigerCFAFranc: {\n    code: CurrencyCode.NigerCFAFranc,\n    countries: [CountryCode.Niger],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Niger CFA Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CFA',\n    symbol_native: 'CFA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigeriaNaira: {\n    code: CurrencyCode.NigeriaNaira,\n    countries: [CountryCode.Nigeria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nigeria Naira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A6',\n    symbol_native: '\u20A6',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorthKoreaWon: {\n    code: CurrencyCode.NorthKoreaWon,\n    countries: [CountryCode.NorthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'North Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorwayKrone: {\n    code: CurrencyCode.NorwayKrone,\n    countries: [CountryCode.Norway],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Norway Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  OmanRial: {\n    code: CurrencyCode.OmanRial,\n    countries: [CountryCode.Oman],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Oman Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PakistanRupee: {\n    code: CurrencyCode.PakistanRupee,\n    countries: [CountryCode.Pakistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Pakistan Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PanamaBalboa: {\n    code: CurrencyCode.PanamaBalboa,\n    countries: [CountryCode.Panama],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Panama Balboa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'B/.',\n    symbol_native: 'B/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ParaguayGuarani: {\n    code: CurrencyCode.ParaguayGuarani,\n    countries: [CountryCode.Paraguay],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Paraguay Guarani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Gs',\n    symbol_native: 'Gs',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PeruvianNuevo: {\n    code: CurrencyCode.PeruNuevo,\n    countries: [CountryCode.Peru],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Peruvian Nuevo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S/.',\n    symbol_native: 'S/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PhilippinesPeso: {\n    code: CurrencyCode.PhilippinesPeso,\n    countries: [CountryCode.Philippines],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Philippines Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B1',\n    symbol_native: '\u20B1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PolandZloty: {\n    code: CurrencyCode.PolandZloty,\n    countries: [CountryCode.Poland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Poland Zloty',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'z\u0142',\n    symbol_native: 'z\u0142',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  QatarRial: {\n    code: CurrencyCode.QatarRial,\n    countries: [CountryCode.Qatar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Qatar Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RomaniaNewLeu: {\n    code: CurrencyCode.RomaniaNewLeu,\n    countries: [CountryCode.Romania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Romania New Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'lei',\n    symbol_native: 'lei',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RussiaRuble: {\n    code: CurrencyCode.RussiaRuble,\n    countries: [CountryCode.RussianFederation],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Russia Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BD',\n    symbol_native: '\u20BD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RwandaFranc: {\n    code: CurrencyCode.RwandaFranc,\n    countries: [CountryCode.Rwanda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Rwanda Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RF',\n    symbol_native: 'RF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SaudiArabiaRiyal: {\n    code: CurrencyCode.SaudiArabiaRiyal,\n    countries: [CountryCode.SaudiArabia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Saudi Arabia Riyal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SerbiaDinar: {\n    code: CurrencyCode.SerbiaDinar,\n    countries: [CountryCode.Serbia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Serbia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0414\u0438\u043D.',\n    symbol_native: '\u0414\u0438\u043D.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SeychellesRupee: {\n    code: CurrencyCode.SeychellesRupee,\n    countries: [CountryCode.Seychelles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Seychelles Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SingaporeDollar: {\n    code: CurrencyCode.SingaporeDollar,\n    countries: [CountryCode.Singapore],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Singapore Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SlovakiaKoruna: {\n    code: CurrencyCode.SlovakiaKoruna,\n    countries: [CountryCode.Slovakia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovakia Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Sk',\n    symbol_native: 'Sk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SloveniaTolar: {\n    code: CurrencyCode.SloveniaTolar,\n    countries: [CountryCode.Slovenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovenia Tolar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'SIT',\n    symbol_native: 'SIT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SolomonIslandsDollar: {\n    code: CurrencyCode.SolomonIslandsDollar,\n    countries: [CountryCode.SolomonIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Solomon Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SomaliaShilling: {\n    code: CurrencyCode.SomaliaShilling,\n    countries: [CountryCode.Somalia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Somalia Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S',\n    symbol_native: 'S',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthAfricaRand: {\n    code: CurrencyCode.SouthAfricaRand,\n    countries: [CountryCode.SouthAfrica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'South Africa Rand',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R',\n    symbol_native: 'R',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthKoreaWon: {\n    code: CurrencyCode.SouthKoreaWon,\n    countries: [CountryCode.SouthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'South Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SriLankaRupee: {\n    code: CurrencyCode.SriLankaRupee,\n    countries: [CountryCode.SriLanka],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sri Lanka Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SudanPound: {\n    code: CurrencyCode.SudanPound,\n    countries: [CountryCode.Sudan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sudan Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SurinameDollar: {\n    code: CurrencyCode.SurinameDollar,\n    countries: [CountryCode.Suriname],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Suriname Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwazilandLilangeni: {\n    code: CurrencyCode.SwazilandLilangeni,\n    countries: [CountryCode.Swaziland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Swaziland Lilangeni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'E',\n    symbol_native: 'E',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwedenKrona: {\n    code: CurrencyCode.SwedenKrona,\n    countries: [CountryCode.Sweden],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sweden Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwitzerlandFranc: {\n    code: CurrencyCode.SwitzerlandFranc,\n    countries: [CountryCode.Switzerland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Switzerland Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CHF',\n    symbol_native: 'CHF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SyriaPound: {\n    code: CurrencyCode.SyriaPound,\n    countries: [CountryCode.Syria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Syria Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TaiwanNewDollar: {\n    code: CurrencyCode.TaiwanNewDollar,\n    countries: [CountryCode.Taiwan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Taiwan New Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'NT$',\n    symbol_native: 'NT$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TajikistanSomoni: {\n    code: CurrencyCode.TajikistanSomoni,\n    countries: [CountryCode.Tajikistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tajikistan Somoni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TJS',\n    symbol_native: 'TJS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TanzaniaShilling: {\n    code: CurrencyCode.TanzaniaShilling,\n    countries: [CountryCode.Tanzania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tanzania Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TSh',\n    symbol_native: 'TSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ThailandBaht: {\n    code: CurrencyCode.ThailandBaht,\n    countries: [CountryCode.Thailand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Thailand Baht',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0E3F',\n    symbol_native: '\u0E3F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TunisiaDinar: {\n    code: CurrencyCode.TunisiaDinar,\n    countries: [CountryCode.Tunisia],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Tunisia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062A',\n    symbol_native: '\u062F.\u062A',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkeyLira: {\n    code: CurrencyCode.TurkeyLira,\n    countries: [CountryCode.Turkey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkey Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BA',\n    symbol_native: '\u20BA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkmenistanManat: {\n    code: CurrencyCode.TurkmenistanManat,\n    countries: [CountryCode.Turkmenistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkmenistan Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'm',\n    symbol_native: 'm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UgandaShilling: {\n    code: CurrencyCode.UgandaShilling,\n    countries: [CountryCode.Uganda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Uganda Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'USh',\n    symbol_native: 'USh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UkraineHryvnia: {\n    code: CurrencyCode.UkraineHryvnia,\n    countries: [CountryCode.Ukraine],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ukraine Hryvnia',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B4',\n    symbol_native: '\u20B4',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedArabEmiratesDirham: {\n    code: CurrencyCode.UnitedArabEmiratesDirham,\n    countries: [CountryCode.UnitedArabEmirates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Arab Emirates Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u0625',\n    symbol_native: '\u062F.\u0625',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedKingdomPound: {\n    code: CurrencyCode.UnitedKingdomPound,\n    countries: [CountryCode.UnitedKingdom],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Kingdom Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedStatesDollar: {\n    code: CurrencyCode.UnitedStatesDollar,\n    countries: [CountryCode.UnitedStates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United States Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UruguayPeso: {\n    code: CurrencyCode.UruguayPeso,\n    countries: [CountryCode.Uruguay],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uruguay Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$U',\n    symbol_native: '$U',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UzbekistanSom: {\n    code: CurrencyCode.UzbekistanSom,\n    countries: [CountryCode.Uzbekistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uzbekistan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'UZS',\n    symbol_native: 'UZS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VanuatuVatu: {\n    code: CurrencyCode.VanuatuVatu,\n    countries: [CountryCode.Vanuatu],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vanuatu Vatu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'VT',\n    symbol_native: 'VT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VenezuelaBolivar: {\n    code: CurrencyCode.VenezuelaBolivar,\n    countries: [CountryCode.Venezuela],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Venezuela Bolivar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Bs. F',\n    symbol_native: 'Bs. F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VietnamDong: {\n    code: CurrencyCode.VietnamDong,\n    countries: [CountryCode.Vietnam],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vietnam Dong',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  YemenRial: {\n    code: CurrencyCode.YemenRial,\n    countries: [CountryCode.Yemen],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Yemen Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZambiaKwacha: {\n    code: CurrencyCode.ZambiaKwacha,\n    countries: [CountryCode.Zambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zambia Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'ZK',\n    symbol_native: 'ZK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZimbabweDollar: {\n    code: CurrencyCode.ZimbabweDollar,\n    countries: [CountryCode.Zimbabwe],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zimbabwe Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n};\n\nexport enum CryptoCurrency {\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  Litecoin = 'LTC',\n  Ripple = 'XRP',\n  Dash = 'DASH',\n  Zcash = 'ZEC',\n  Dogecoin = 'DOGE',\n  Monero = 'XMR',\n  BitcoinCash = 'BCH',\n  EOS = 'EOS',\n  Binance = 'BNB',\n  Stellar = 'XLM',\n  Cardano = 'ADA',\n  IOTA = 'IOTA',\n  Tezos = 'XTZ',\n  NEO = 'NEO',\n  TRON = 'TRX',\n  EOSClassic = 'EOSC',\n  Ontology = 'ONT',\n  VeChain = 'VEN',\n  QTUM = 'QTUM',\n  Lisk = 'LSK',\n  Waves = 'WAVES',\n  OmiseGO = 'OMG',\n  Zilliqa = 'ZIL',\n  BitcoinGold = 'BTG',\n  Decred = 'DCR',\n  Stratis = 'STRAT',\n  Populous = 'PPT',\n  Augur = 'REP',\n  Golem = 'GNT',\n  Siacoin = 'SC',\n  BasicAttentionToken = 'BAT',\n  ZCoin = 'XZC',\n  StratisHedged = 'SNT',\n  VeChainHedged = 'VEN',\n  PowerLedger = 'POWR',\n  WavesHedged = 'WAVE',\n  ZilliqaHedged = 'ZRX',\n  BitcoinDiamond = 'BCD',\n  DigiByte = 'DGB',\n  DigiByteHedged = 'DGB',\n  Bytecoin = 'BCN',\n  BytecoinHedged = 'BCN',\n}\n", "export enum LanguageCode {\n  Afrikaans = 'af',\n  Albanian = 'sq',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Armenian = 'hy',\n  Azerbaijani = 'az',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  Belarusian = 'be',\n  Bengali = 'bn',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  Bihari = 'bh',\n  Bislama = 'bi',\n  Bosnian = 'bs',\n  Breten = 'br',\n  Bulgarian = 'bg',\n  Burmese = 'my',\n  Cantonese = 'yue',\n  Catalan = 'ca',\n  Chinese = 'zh',\n  Chuvash = 'cv',\n  Corsican = 'co',\n  Croatian = 'hr',\n  Czech = 'cs',\n  Danish = 'da',\n  Dari = 'prs',\n  Divehi = 'dv',\n  Dutch = 'nl',\n  English = 'en',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  Faroese = 'fo',\n  Farsi = 'fa',\n  Filipino = 'fil',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Galician = 'gl',\n  Georgian = 'ka',\n  German = 'de',\n  Greek = 'el',\n  Greenlandic = 'kl',\n  Gujarati = 'gu',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  Hebrew = 'he',\n  Hindi = 'hi',\n  Hungarian = 'hu',\n  Icelandic = 'is',\n  Igbo = 'ig',\n  Indonesian = 'id',\n  Irish = 'ga',\n  Italian = 'it',\n  Japanese = 'ja',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Komi = 'kv',\n  Konkani = 'kok',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Lao = 'lo',\n  Latin = 'la',\n  Latvian = 'lv',\n  Lithuanian = 'lt',\n  Luxembourgish = 'lb',\n  Ossetian = 'os',\n  Macedonian = 'mk',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  Malayalam = 'ml',\n  Maltese = 'mt',\n  Maori = 'mi',\n  Marathi = 'mr',\n  Mari = 'mhr',\n  Mongolian = 'mn',\n  Montenegrin = 'me',\n  Nepali = 'ne',\n  NorthernSotho = 'nso',\n  Norwegian = 'no',\n  NorwegianBokmal = 'nb',\n  NorwegianNynorsk = 'nn',\n  Oriya = 'or',\n  Pashto = 'ps',\n  Persian = 'fa',\n  Polish = 'pl',\n  Portuguese = 'pt',\n  Punjabi = 'pa',\n  Quechua = 'qu',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Sakha = 'sah',\n  Sami = 'se',\n  Samoan = 'sm',\n  Sanskrit = 'sa',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianCyrillic = 'sr-Cyrl',\n  Sesotho = 'st',\n  Shona = 'sn',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Somali = 'so',\n  Spanish = 'es',\n  Sudanese = 'su',\n  Sutu = 'sx',\n  Swahili = 'sw',\n  Swedish = 'sv',\n  Syriac = 'syr',\n  Tagalog = 'tl',\n  Tajik = 'tg',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  Tatar = 'tt',\n  Telugu = 'te',\n  Thai = 'th',\n  Tibetan = 'bo',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  Turkish = 'tr',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Welsh = 'cy',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  Zulu = 'zu',\n}\n\nexport type Language = {\n  code: LanguageCode;\n  name: string;\n  native_name: string;\n};\n", "import { LanguageCode } from '../language';\nimport { CountryCode } from './country';\n\n/**\n * Locale code in form of `[language]-[region]-[variant]`\n *\n * @example\n * ```\n * const localeCode: Locale.EnglishUnitedStates = 'en-US'\n * ```\n *\n */\nexport enum LocaleCode {\n  Afrikaans = 'af',\n  AfrikaansSouthAfrica = 'af-ZA',\n  Albanian = 'sq',\n  AlbanianAlbania = 'sq-AL',\n  Amharic = 'am',\n  AmharicEthiopia = 'am-ET',\n  Arabic = 'ar',\n  ArabicAlgeria = 'ar-DZ',\n  ArabicBahrain = 'ar-BH',\n  ArabicEgypt = 'ar-EG',\n  ArabicIraq = 'ar-IQ',\n  ArabicJordan = 'ar-JO',\n  ArabicKuwait = 'ar-KW',\n  ArabicLebanon = 'ar-LB',\n  ArabicLibya = 'ar-LY',\n  ArabicMorocco = 'ar-MA',\n  ArabicOman = 'ar-OM',\n  ArabicQatar = 'ar-QA',\n  ArabicSaudiArabia = 'ar-SA',\n  ArabicSyria = 'ar-SY',\n  ArabicTunisia = 'ar-TN',\n  ArabicUnitedArabEmirates = 'ar-AE',\n  ArabicYemen = 'ar-YE',\n  Armenian = 'hy',\n  ArmenianArmenia = 'hy-AM',\n  Azerbaijani = 'az',\n  AzerbaijaniAzerbaijan = 'az-AZ',\n  AzerbaijaniCyrillicAzerbaijan = 'az-Cyrl-AZ',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  BasqueSpain = 'eu-ES',\n  Belarusian = 'be',\n  BelarusianBelarus = 'be-BY',\n  Bengali = 'bn',\n  BengaliBangladesh = 'bn-BD',\n  BengaliIndia = 'bn-IN',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  BhutaniBhutan = 'dz-BT',\n  Bosnian = 'bs',\n  BosnianBosniaAndHerzegovina = 'bs-BA',\n  Breton = 'br',\n  Bulgarian = 'bg',\n  BulgarianBosniaAndHerzegovina = 'bg-BG',\n  BulgarianBulgaria = 'bg-BG',\n  Burmese = 'my',\n  BurmeseMyanmar = 'my-MM',\n  Cantonese = 'yue',\n  CantoneseHongKong = 'yue-HK',\n  Catalan = 'ca',\n  CatalanSpain = 'ca-ES',\n  Chechen = 'ce',\n  Cherokee = 'chr',\n  Chinese = 'zh',\n  ChineseSimplified = 'zh-Hans',\n  ChineseSimplifiedChina = 'zh-Hans-CN',\n  ChineseSimplifiedHongKong = 'zh-Hans-HK',\n  ChineseSimplifiedMacau = 'zh-Hans-MO',\n  ChineseSimplifiedSingapore = 'zh-Hans-SG',\n  ChineseTraditional = 'zh-Hant',\n  ChineseTraditionalHongKong = 'zh-Hant-HK',\n  ChineseTraditionalMacau = 'zh-Hant-MO',\n  ChineseTraditionalSingapore = 'zh-Hant-SG',\n  ChineseTraditionalTaiwan = 'zh-Hant-TW',\n  Chuvash = 'cv',\n  CorsicanFrance = 'co-FR',\n  Croatian = 'hr',\n  CroatianBosniaAndHerzegovina = 'hr-BA',\n  CroatianCroatia = 'hr-HR',\n  Czech = 'cs',\n  CzechCzechRepublic = 'cs-CZ',\n  Danish = 'da',\n  DanishDenmark = 'da-DK',\n  Dari = 'prs',\n  DariAfghanistan = 'prs-AF',\n  Divehi = 'dv',\n  DivehiMaldives = 'dv-MV',\n  Dutch = 'nl',\n  DutchBelgium = 'nl-BE',\n  DutchNetherlands = 'nl-NL',\n  English = 'en',\n  EnglishAustralia = 'en-AU',\n  EnglishBelgium = 'en-BE',\n  EnglishBelize = 'en-BZ',\n  EnglishCanada = 'en-CA',\n  EnglishCaribbean = 'en-029',\n  EnglishIreland = 'en-IE',\n  EnglishJamaica = 'en-JM',\n  EnglishNewZealand = 'en-NZ',\n  EnglishPhilippines = 'en-PH',\n  EnglishSingapore = 'en-SG',\n  EnglishSouthAfrica = 'en-ZA',\n  EnglishTrinidadAndTobago = 'en-TT',\n  EnglishUnitedKingdom = 'en-GB',\n  EnglishUnitedStates = 'en-US',\n  EnglishZimbabwe = 'en-ZW',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  EstonianEstonia = 'et-EE',\n  Faroese = 'fo',\n  FaroeseFaroeIslands = 'fo-FO',\n  Farsi = 'fa',\n  FarsiIran = 'fa-IR',\n  Filipino = 'fil',\n  FilipinoPhilippines = 'fil-PH',\n  Finnish = 'fi',\n  FinnishFinland = 'fi-FI',\n  French = 'fr',\n  FrenchBelgium = 'fr-BE',\n  FrenchCanada = 'fr-CA',\n  FrenchFrance = 'fr-FR',\n  FrenchLuxembourg = 'fr-LU',\n  FrenchMonaco = 'fr-MC',\n  FrenchReunion = 'fr-RE',\n  FrenchSwitzerland = 'fr-CH',\n  Frisian = 'fy',\n  FrisianNetherlands = 'fy-NL',\n  Galician = 'gl',\n  GalicianSpain = 'gl-ES',\n  Georgian = 'ka',\n  GeorgianGeorgia = 'ka-GE',\n  German = 'de',\n  GermanAustria = 'de-AT',\n  GermanBelgium = 'de-BE',\n  GermanGermany = 'de-DE',\n  GermanLiechtenstein = 'de-LI',\n  GermanLuxembourg = 'de-LU',\n  GermanSwitzerland = 'de-CH',\n  Greenlandic = 'kl',\n  GreenlandicGreenland = 'kl-GL',\n  Greek = 'el',\n  GreekGreece = 'el-GR',\n  Gujarati = 'gu',\n  GujaratiIndia = 'gu-IN',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  HausaGhana = 'ha-GH',\n  HausaNiger = 'ha-NE',\n  HausaNigeria = 'ha-NG',\n  Hebrew = 'he',\n  HebrewIsrael = 'he-IL',\n  Hindi = 'hi',\n  HindiIndia = 'hi-IN',\n  Hungarian = 'hu',\n  HungarianHungary = 'hu-HU',\n  Icelandic = 'is',\n  IcelandicIceland = 'is-IS',\n  Igbo = 'ig',\n  IgboNigeria = 'ig-NG',\n  Indonesian = 'id',\n  IndonesianIndonesia = 'id-ID',\n  Irish = 'ga',\n  IrishIreland = 'ga-IE',\n  Italian = 'it',\n  ItalianItaly = 'it-IT',\n  ItalianSwitzerland = 'it-CH',\n  Japanese = 'ja',\n  JapaneseJapan = 'ja-JP',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  KannadaIndia = 'kn-IN',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  KazakhKazakhstan = 'kk-KZ',\n  Khmer = 'km',\n  KhmerCambodia = 'km-KH',\n  KinyarwandaRwanda = 'rw-RW',\n  Komi = 'kv',\n  Konkani = 'kok',\n  KonkaniIndia = 'kok-IN',\n  Korean = 'ko',\n  KoreanSouthKorea = 'ko-KR',\n  Kurdish = 'ku',\n  KurdishIraq = 'ku-IQ',\n  KurdishTurkey = 'ku-TR',\n  Kyrgyz = 'ky',\n  KyrgyzKyrgyzstan = 'ky-KG',\n  Lao = 'lo',\n  LaoLaos = 'lo-LA',\n  Latin = 'la',\n  Latvian = 'lv',\n  LatvianLatvia = 'lv-LV',\n  Lithuanian = 'lt',\n  LithuanianLithuania = 'lt-LT',\n  Luxembourgish = 'lb',\n  LuxembourgishBelgium = 'lb-LU',\n  LuxembourgishLuxembourg = 'lb-LU',\n  Macedonian = 'mk',\n  MacedonianNorthMacedonia = 'mk-MK',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  MalayBrunei = 'ms-BN',\n  MalayIndia = 'ms-IN',\n  MalayMalaysia = 'ms-MY',\n  MalaySingapore = 'ms-SG',\n  Malayalam = 'ml',\n  MalayalamIndia = 'ml-IN',\n  Maltese = 'mt',\n  MalteseMalta = 'mt-MT',\n  Maori = 'mi',\n  MaoriNewZealand = 'mi-NZ',\n  Marathi = 'mr',\n  MarathiIndia = 'mr-IN',\n  Mari = 'chm',\n  Mongolian = 'mn',\n  MongolianMongolia = 'mn-MN',\n  Montenegrin = 'me',\n  MontenegrinMontenegro = 'me-ME',\n  Nepali = 'ne',\n  NepaliNepal = 'ne-NP',\n  NorthernSotho = 'ns',\n  NorthernSothoSouthAfrica = 'ns-ZA',\n  Norwegian = 'nb',\n  NorwegianBokmalNorway = 'nb-NO',\n  NorwegianNynorskNorway = 'nn-NO',\n  Oriya = 'or',\n  OriyaIndia = 'or-IN',\n  Ossetian = 'os',\n  Pashto = 'ps',\n  PashtoAfghanistan = 'ps-AF',\n  Persian = 'fa',\n  PersianIran = 'fa-IR',\n  Polish = 'pl',\n  PolishPoland = 'pl-PL',\n  Portuguese = 'pt',\n  PortugueseBrazil = 'pt-BR',\n  PortuguesePortugal = 'pt-PT',\n  Punjabi = 'pa',\n  PunjabiIndia = 'pa-IN',\n  PunjabiPakistan = 'pa-PK',\n  Quechua = 'qu',\n  QuechuaBolivia = 'qu-BO',\n  QuechuaEcuador = 'qu-EC',\n  QuechuaPeru = 'qu-PE',\n  Romanian = 'ro',\n  RomanianRomania = 'ro-RO',\n  Russian = 'ru',\n  RussianKazakhstan = 'ru-KZ',\n  RussianKyrgyzstan = 'ru-KG',\n  RussianRussia = 'ru-RU',\n  RussianUkraine = 'ru-UA',\n  Sakha = 'sah',\n  Sanskrit = 'sa',\n  SanskritIndia = 'sa-IN',\n  Sami = 'se',\n  SamiNorway = 'se-NO',\n  SamiSweden = 'se-SE',\n  SamiFinland = 'se-FI',\n  Samoan = 'sm',\n  SamoanSamoa = 'sm-WS',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianBosniaAndHerzegovina = 'sr-BA',\n  SerbianSerbiaAndMontenegro = 'sr-SP',\n  SerbianCyrillic = 'sr-SP-Cyrl',\n  SerbianCyrillicBosniaAndHerzegovina = 'sr-Cyrl-BA',\n  SerbianCyrillicSerbiaAndMontenegro = 'sr-Cyrl-SP',\n  Sesotho = 'st',\n  SesothoSouthAfrica = 'st-ZA',\n  Shona = 'sn',\n  ShonaZimbabwe = 'sn-ZW',\n  Sindhi = 'sd',\n  SindhiPakistan = 'sd-PK',\n  Sinhala = 'si',\n  SinhalaSriLanka = 'si-LK',\n  Slovak = 'sk',\n  SlovakSlovakia = 'sk-SK',\n  Slovenian = 'sl',\n  SlovenianSlovenia = 'sl-SI',\n  Somali = 'so',\n  SomaliSomalia = 'so-SO',\n  Spanish = 'es',\n  SpanishArgentina = 'es-AR',\n  SpanishBolivia = 'es-BO',\n  SpanishChile = 'es-CL',\n  SpanishColombia = 'es-CO',\n  SpanishCostaRica = 'es-CR',\n  SpanishCuba = 'es-CU',\n  SpanishDominicanRepublic = 'es-DO',\n  SpanishEcuador = 'es-EC',\n  SpanishEquatorialGuinea = 'es-GQ',\n  SpanishElSalvador = 'es-SV',\n  SpanishGuatemala = 'es-GT',\n  SpanishHonduras = 'es-HN',\n  SpanishMexico = 'es-MX',\n  SpanishNicaragua = 'es-NI',\n  SpanishPanama = 'es-PA',\n  SpanishParaguay = 'es-PY',\n  SpanishPeru = 'es-PE',\n  SpanishPuertoRico = 'es-PR',\n  SpanishSpain = 'es-ES',\n  SpanishUnitedStates = 'es-US',\n  SpanishUruguay = 'es-UY',\n  SpanishVenezuela = 'es-VE',\n  Sudanese = 'su',\n  Sutu = 'st',\n  SutuSouthAfrica = 'st-ZA',\n  Swahili = 'sw',\n  SwahiliKenya = 'sw-KE',\n  Swedish = 'sv',\n  SwedishFinland = 'sv-FI',\n  SwedishSweden = 'sv-SE',\n  Syriac = 'syr',\n  SyriacSyria = 'syr-SY',\n  Tajik = 'tg',\n  TajikTajikistan = 'tg-TJ',\n  Tagalog = 'tl',\n  TagalogPhilippines = 'tl-PH',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  TamilIndia = 'ta-IN',\n  Tatar = 'tt',\n  Telugu = 'te',\n  TeluguIndia = 'te-IN',\n  Thai = 'th',\n  ThaiThailand = 'th-TH',\n  Tibetan = 'bo',\n  TibetanBhutan = 'bo-BT',\n  TibetanChina = 'bo-CN',\n  TibetanIndia = 'bo-IN',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  TswanaSouthAfrica = 'tn-ZA',\n  Turkish = 'tr',\n  TurkishTurkey = 'tr-TR',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  UkrainianUkraine = 'uk-UA',\n  Urdu = 'ur',\n  UrduAfghanistan = 'ur-AF',\n  UrduIndia = 'ur-IN',\n  UrduPakistan = 'ur-PK',\n  Uzbek = 'uz',\n  UzbekCyrillic = 'uz-Cyrl-UZ',\n  UzbekLatin = 'uz-Latn-UZ',\n  UzbekUzbekistan = 'uz-UZ',\n  Vietnamese = 'vi',\n  VietnameseVietnam = 'vi-VN',\n  Welsh = 'cy',\n  WelshUnitedKingdom = 'cy-GB',\n  Xhosa = 'xh',\n  XhosaSouthAfrica = 'xh-ZA',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  YorubaNigeria = 'yo-NG',\n  ZhuyinMandarinChina = 'yue-Hant-CN',\n  Zulu = 'zu',\n  ZuluSouthAfrica = 'zu-ZA',\n}\n\nexport type Locale = {\n  country?: {\n    code: CountryCode;\n    name: string;\n    native: string;\n  };\n  id: LocaleCode;\n  language: {\n    code: LanguageCode;\n    name: string;\n    native: string;\n  };\n  name: string;\n  native_name: string;\n  rtl: boolean;\n};\n", "import { TimezoneOffset } from './timezone';\nimport { Timezones } from './timezones';\n\nexport enum TimezoneRegions {\n  AfricaAbidjan = 'Africa/Abidjan',\n  AfricaAccra = 'Africa/Accra',\n  AfricaAddisAbaba = 'Africa/Addis_Ababa',\n  AfricaAlgiers = 'Africa/Algiers',\n  AfricaAsmara = 'Africa/Asmara',\n  AfricaBamako = 'Africa/Bamako',\n  AfricaBangui = 'Africa/Bangui',\n  AfricaBanjul = 'Africa/Banjul',\n  AfricaBissau = 'Africa/Bissau',\n  AfricaBlantyre = 'Africa/Blantyre',\n  AfricaBrazzaville = 'Africa/Brazzaville',\n  AfricaBujumbura = 'Africa/Bujumbura',\n  AfricaCairo = 'Africa/Cairo',\n  AfricaCasablanca = 'Africa/Casablanca',\n  AfricaCeuta = 'Africa/Ceuta',\n  AfricaConakry = 'Africa/Conakry',\n  AfricaDakar = 'Africa/Dakar',\n  AfricaDarEsSalaam = 'Africa/Dar_es_Salaam',\n  AfricaDjibouti = 'Africa/Djibouti',\n  AfricaDouala = 'Africa/Douala',\n  AfricaElAaiun = 'Africa/El_Aaiun',\n  AfricaFreetown = 'Africa/Freetown',\n  AfricaGaborone = 'Africa/Gaborone',\n  AfricaHarare = 'Africa/Harare',\n  AfricaJohannesburg = 'Africa/Johannesburg',\n  AfricaJuba = 'Africa/Juba',\n  AfricaKampala = 'Africa/Kampala',\n  AfricaKhartoum = 'Africa/Khartoum',\n  AfricaKigali = 'Africa/Kigali',\n  AfricaKinshasa = 'Africa/Kinshasa',\n  AfricaLagos = 'Africa/Lagos',\n  AfricaLibreville = 'Africa/Libreville',\n  AfricaLome = 'Africa/Lome',\n  AfricaLuanda = 'Africa/Luanda',\n  AfricaLubumbashi = 'Africa/Lubumbashi',\n  AfricaLusaka = 'Africa/Lusaka',\n  AfricaMalabo = 'Africa/Malabo',\n  AfricaMaputo = 'Africa/Maputo',\n  AfricaMaseru = 'Africa/Maseru',\n  AfricaMbabane = 'Africa/Mbabane',\n  AfricaMogadishu = 'Africa/Mogadishu',\n  AfricaMonrovia = 'Africa/Monrovia',\n  AfricaNairobi = 'Africa/Nairobi',\n  AfricaNdjamena = 'Africa/Ndjamena',\n  AfricaNiamey = 'Africa/Niamey',\n  AfricaNouakchott = 'Africa/Nouakchott',\n  AfricaOuagadougou = 'Africa/Ouagadougou',\n  AfricaPortoNovo = 'Africa/Porto-Novo',\n  AfricaSaoTome = 'Africa/Sao_Tome',\n  AfricaTripoli = 'Africa/Tripoli',\n  AfricaTunis = 'Africa/Tunis',\n  AfricaWindhoek = 'Africa/Windhoek',\n  AmericaAdak = 'America/Adak',\n  AmericaAnchorage = 'America/Anchorage',\n  AmericaAnguilla = 'America/Anguilla',\n  AmericaAntigua = 'America/Antigua',\n  AmericaAraguaina = 'America/Araguaina',\n  AmericaArgentinaBuenosAires = 'America/Argentina/Buenos_Aires',\n  AmericaArgentinaCatamarca = 'America/Argentina/Catamarca',\n  AmericaArgentinaCordoba = 'America/Argentina/Cordoba',\n  AmericaArgentinaJujuy = 'America/Argentina/Jujuy',\n  AmericaArgentinaLaRioja = 'America/Argentina/La_Rioja',\n  AmericaArgentinaMendoza = 'America/Argentina/Mendoza',\n  AmericaArgentinaRioGallegos = 'America/Argentina/Rio_Gallegos',\n  AmericaArgentinaSalta = 'America/Argentina/Salta',\n  AmericaArgentinaSanJuan = 'America/Argentina/San_Juan',\n  AmericaArgentinaSanLuis = 'America/Argentina/San_Luis',\n  AmericaArgentinaTucuman = 'America/Argentina/Tucuman',\n  AmericaArgentinaUshuaia = 'America/Argentina/Ushuaia',\n  AmericaAruba = 'America/Aruba',\n  AmericaAsuncion = 'America/Asuncion',\n  AmericaAtikokan = 'America/Atikokan',\n  AmericaAtka = 'America/Atka',\n  AmericaBahia = 'America/Bahia',\n  AmericaBahiaBanderas = 'America/Bahia_Banderas',\n  AmericaBarbados = 'America/Barbados',\n  AmericaBelem = 'America/Belem',\n  AmericaBelize = 'America/Belize',\n  AmericaBlancSablon = 'America/Blanc-Sablon',\n  AmericaBoaVista = 'America/Boa_Vista',\n  AmericaBogota = 'America/Bogota',\n  AmericaBoise = 'America/Boise',\n  AmericaCambridgeBay = 'America/Cambridge_Bay',\n  AmericaCampoGrande = 'America/Campo_Grande',\n  AmericaCancun = 'America/Cancun',\n  AmericaCaracas = 'America/Caracas',\n  AmericaCayenne = 'America/Cayenne',\n  AmericaCayman = 'America/Cayman',\n  AmericaChicago = 'America/Chicago',\n  AmericaChihuahua = 'America/Chihuahua',\n  AmericaCoralHarbour = 'America/Coral_Harbour',\n  AmericaCordoba = 'America/Cordoba',\n  AmericaCostaRica = 'America/Costa_Rica',\n  AmericaCreston = 'America/Creston',\n  AmericaCuiaba = 'America/Cuiaba',\n  AmericaCuracao = 'America/Curacao',\n  AmericaDanmarkshavn = 'America/Danmarkshavn',\n  AmericaDawson = 'America/Dawson',\n  AmericaDawsonCreek = 'America/Dawson_Creek',\n  AmericaDenver = 'America/Denver',\n  AmericaDetroit = 'America/Detroit',\n  AmericaDominica = 'America/Dominica',\n  AmericaEdmonton = 'America/Edmonton',\n  AmericaEirunepe = 'America/Eirunepe',\n  AmericaElSalvador = 'America/El_Salvador',\n  AmericaFortaleza = 'America/Fortaleza',\n  AmericaGlaceBay = 'America/Glace_Bay',\n  AmericaGodthab = 'America/Godthab',\n  AmericaGooseBay = 'America/Goose_Bay',\n  AmericaGrandTurk = 'America/Grand_Turk',\n  AmericaGrenada = 'America/Grenada',\n  AmericaGuadeloupe = 'America/Guadeloupe',\n  AmericaGuatemala = 'America/Guatemala',\n  AmericaGuayaquil = 'America/Guayaquil',\n  AmericaGuyana = 'America/Guyana',\n  AmericaHalifax = 'America/Halifax',\n  AmericaHavana = 'America/Havana',\n  AmericaHermosillo = 'America/Hermosillo',\n  AmericaIndianaIndianapolis = 'America/Indiana/Indianapolis',\n  AmericaIndianaKnox = 'America/Indiana/Knox',\n  AmericaIndianaMarengo = 'America/Indiana/Marengo',\n  AmericaIndianaPetersburg = 'America/Indiana/Petersburg',\n  AmericaIndianaTellCity = 'America/Indiana/Tell_City',\n  AmericaIndianaVevay = 'America/Indiana/Vevay',\n  AmericaIndianaVincennes = 'America/Indiana/Vincennes',\n  AmericaIndianaWinamac = 'America/Indiana/Winamac',\n  AmericaInuvik = 'America/Inuvik',\n  AmericaIqaluit = 'America/Iqaluit',\n  AmericaJamaica = 'America/Jamaica',\n  AmericaJuneau = 'America/Juneau',\n  AmericaKentuckyLouisville = 'America/Kentucky/Louisville',\n  AmericaKentuckyMonticello = 'America/Kentucky/Monticello',\n  AmericaKralendijk = 'America/Kralendijk',\n  AmericaLaPaz = 'America/La_Paz',\n  AmericaLima = 'America/Lima',\n  AmericaLosAngeles = 'America/Los_Angeles',\n  AmericaLouisville = 'America/Louisville',\n  AmericaLowerPrinces = 'America/Lower_Princes',\n  AmericaMaceio = 'America/Maceio',\n  AmericaManagua = 'America/Managua',\n  AmericaManaus = 'America/Manaus',\n  AmericaMarigot = 'America/Marigot',\n  AmericaMartinique = 'America/Martinique',\n  AmericaMatamoros = 'America/Matamoros',\n  AmericaMazatlan = 'America/Mazatlan',\n  AmericaMenominee = 'America/Menominee',\n  AmericaMerida = 'America/Merida',\n  AmericaMetlakatla = 'America/Metlakatla',\n  AmericaMexicoCity = 'America/Mexico_City',\n  AmericaMiquelon = 'America/Miquelon',\n  AmericaMoncton = 'America/Moncton',\n  AmericaMonterrey = 'America/Monterrey',\n  AmericaMontevideo = 'America/Montevideo',\n  AmericaMontserrat = 'America/Montserrat',\n  AmericaMontreal = 'America/Montreal',\n  AmericaNassau = 'America/Nassau',\n  AmericaNewYork = 'America/New_York',\n  AmericaNipigon = 'America/Nipigon',\n  AmericaNome = 'America/Nome',\n  AmericaNoronha = 'America/Noronha',\n  AmericaNorthDakotaBeulah = 'America/North_Dakota/Beulah',\n  AmericaNorthDakotaCenter = 'America/North_Dakota/Center',\n  AmericaNorthDakotaNewSalem = 'America/North_Dakota/New_Salem',\n  AmericaOjinaga = 'America/Ojinaga',\n  AmericaPanama = 'America/Panama',\n  AmericaPangnirtung = 'America/Pangnirtung',\n  AmericaParamaribo = 'America/Paramaribo',\n  AmericaPhoenix = 'America/Phoenix',\n  AmericaPortAuPrince = 'America/Port-au-Prince',\n  AmericaPortOfSpain = 'America/Port_of_Spain',\n  AmericaPortoVelho = 'America/Porto_Velho',\n  AmericaPuertoRico = 'America/Puerto_Rico',\n  AmericaRainyRiver = 'America/Rainy_River',\n  AmericaRankinInlet = 'America/Rankin_Inlet',\n  AmericaRecife = 'America/Recife',\n  AmericaRegina = 'America/Regina',\n  AmericaResolute = 'America/Resolute',\n  AmericaRioBranco = 'America/Rio_Branco',\n  AmericaSantaIsabel = 'America/Santa_Isabel',\n  AmericaSantarem = 'America/Santarem',\n  AmericaSantiago = 'America/Santiago',\n  AmericaSantoDomingo = 'America/Santo_Domingo',\n  AmericaSaoPaulo = 'America/Sao_Paulo',\n  AmericaScoresbysund = 'America/Scoresbysund',\n  AmericaShiprock = 'America/Shiprock',\n  AmericaSitka = 'America/Sitka',\n  AmericaStBarthelemy = 'America/St_Barthelemy',\n  AmericaStJohns = 'America/St_Johns',\n  AmericaStKitts = 'America/St_Kitts',\n  AmericaStLucia = 'America/St_Lucia',\n  AmericaStThomas = 'America/St_Thomas',\n  AmericaStVincent = 'America/St_Vincent',\n  AmericaSwiftCurrent = 'America/Swift_Current',\n  AmericaTegucigalpa = 'America/Tegucigalpa',\n  AmericaThule = 'America/Thule',\n  AmericaThunderBay = 'America/Thunder_Bay',\n  AmericaTijuana = 'America/Tijuana',\n  AmericaToronto = 'America/Toronto',\n  AmericaTortola = 'America/Tortola',\n  AmericaVancouver = 'America/Vancouver',\n  AmericaWhitehorse = 'America/Whitehorse',\n  AmericaWinnipeg = 'America/Winnipeg',\n  AmericaYakutat = 'America/Yakutat',\n  AmericaYellowknife = 'America/Yellowknife',\n  AntarcticaCasey = 'Antarctica/Casey',\n  AntarcticaDavis = 'Antarctica/Davis',\n  AntarcticaDumontDUrville = 'Antarctica/DumontDUrville',\n  AntarcticaMacquarie = 'Antarctica/Macquarie',\n  AntarcticaMawson = 'Antarctica/Mawson',\n  AntarcticaMcMurdo = 'Antarctica/McMurdo',\n  AntarcticaPalmer = 'Antarctica/Palmer',\n  AntarcticaRothera = 'Antarctica/Rothera',\n  AntarcticaSyowa = 'Antarctica/Syowa',\n  AntarcticaTroll = 'Antarctica/Troll',\n  AntarcticaVostok = 'Antarctica/Vostok',\n  ArcticLongyearbyen = 'Arctic/Longyearbyen',\n  AsiaAden = 'Asia/Aden',\n  AsiaAlmaty = 'Asia/Almaty',\n  AsiaAmman = 'Asia/Amman',\n  AsiaAnadyr = 'Asia/Anadyr',\n  AsiaAqtau = 'Asia/Aqtau',\n  AsiaAqtobe = 'Asia/Aqtobe',\n  AsiaAshgabat = 'Asia/Ashgabat',\n  AsiaBaghdad = 'Asia/Baghdad',\n  AsiaBahrain = 'Asia/Bahrain',\n  AsiaBaku = 'Asia/Baku',\n  AsiaBangkok = 'Asia/Bangkok',\n  AsiaBarnaul = 'Asia/Barnaul',\n  AsiaBeirut = 'Asia/Beirut',\n  AsiaBishkek = 'Asia/Bishkek',\n  AsiaBrunei = 'Asia/Brunei',\n  AsiaChita = 'Asia/Chita',\n  AsiaChoibalsan = 'Asia/Choibalsan',\n  AsiaColombo = 'Asia/Colombo',\n  AsiaDamascus = 'Asia/Damascus',\n  AsiaDhaka = 'Asia/Dhaka',\n  AsiaDili = 'Asia/Dili',\n  AsiaDubai = 'Asia/Dubai',\n  AsiaDushanbe = 'Asia/Dushanbe',\n  AsiaFamagusta = 'Asia/Famagusta',\n  AsiaGaza = 'Asia/Gaza',\n  AsiaHebron = 'Asia/Hebron',\n  AsiaHoChiMinh = 'Asia/Ho_Chi_Minh',\n  AsiaHongKong = 'Asia/Hong_Kong',\n  AsiaHovd = 'Asia/Hovd',\n  AsiaIrkutsk = 'Asia/Irkutsk',\n  AsiaJakarta = 'Asia/Jakarta',\n  AsiaJayapura = 'Asia/Jayapura',\n  AsiaJerusalem = 'Asia/Jerusalem',\n  AsiaKabul = 'Asia/Kabul',\n  AsiaKamchatka = 'Asia/Kamchatka',\n  AsiaKarachi = 'Asia/Karachi',\n  AsiaKathmandu = 'Asia/Kathmandu',\n  AsiaKhandyga = 'Asia/Khandyga',\n  AsiaKolkata = 'Asia/Kolkata',\n  AsiaKrasnoyarsk = 'Asia/Krasnoyarsk',\n  AsiaKualaLumpur = 'Asia/Kuala_Lumpur',\n  AsiaKuching = 'Asia/Kuching',\n  AsiaKuwait = 'Asia/Kuwait',\n  AsiaMacau = 'Asia/Macau',\n  AsiaMagadan = 'Asia/Magadan',\n  AsiaMakassar = 'Asia/Makassar',\n  AsiaManila = 'Asia/Manila',\n  AsiaMuscat = 'Asia/Muscat',\n  AsiaNicosia = 'Asia/Nicosia',\n  AsiaNovokuznetsk = 'Asia/Novokuznetsk',\n  AsiaNovosibirsk = 'Asia/Novosibirsk',\n  AsiaOmsk = 'Asia/Omsk',\n  AsiaOral = 'Asia/Oral',\n  AsiaPhnomPenh = 'Asia/Phnom_Penh',\n  AsiaPontianak = 'Asia/Pontianak',\n  AsiaPyongyang = 'Asia/Pyongyang',\n  AsiaQatar = 'Asia/Qatar',\n  AsiaQyzylorda = 'Asia/Qyzylorda',\n  AsiaRangoon = 'Asia/Rangoon',\n  AsiaRiyadh = 'Asia/Riyadh',\n  AsiaSakhalin = 'Asia/Sakhalin',\n  AsiaSamarkand = 'Asia/Samarkand',\n  AsiaSeoul = 'Asia/Seoul',\n  AsiaShanghai = 'Asia/Shanghai',\n  AsiaSingapore = 'Asia/Singapore',\n  AsiaSrednekolymsk = 'Asia/Srednekolymsk',\n  AsiaTaipei = 'Asia/Taipei',\n  AsiaTashkent = 'Asia/Tashkent',\n  AsiaTbilisi = 'Asia/Tbilisi',\n  AsiaTehran = 'Asia/Tehran',\n  AsiaThimphu = 'Asia/Thimphu',\n  AsiaTokyo = 'Asia/Tokyo',\n  AsiaTomsk = 'Asia/Tomsk',\n  AsiaUlaanbaatar = 'Asia/Ulaanbaatar',\n  AsiaUrumqi = 'Asia/Urumqi',\n  AsiaUstNera = 'Asia/Ust-Nera',\n  AsiaVientiane = 'Asia/Vientiane',\n  AsiaVladivostok = 'Asia/Vladivostok',\n  AsiaYakutsk = 'Asia/Yakutsk',\n  AsiaYekaterinburg = 'Asia/Yekaterinburg',\n  AsiaYerevan = 'Asia/Yerevan',\n  AtlanticAzores = 'Atlantic/Azores',\n  AtlanticBermuda = 'Atlantic/Bermuda',\n  AtlanticCanary = 'Atlantic/Canary',\n  AtlanticCapeVerde = 'Atlantic/Cape_Verde',\n  AtlanticFaroe = 'Atlantic/Faroe',\n  AtlanticMadeira = 'Atlantic/Madeira',\n  AtlanticReykjavik = 'Atlantic/Reykjavik',\n  AtlanticSouthGeorgia = 'Atlantic/South_Georgia',\n  AtlanticStHelena = 'Atlantic/St_Helena',\n  AtlanticStanley = 'Atlantic/Stanley',\n  AustraliaAdelaide = 'Australia/Adelaide',\n  AustraliaBrisbane = 'Australia/Brisbane',\n  AustraliaBrokenHill = 'Australia/Broken_Hill',\n  AustraliaCanberra = 'Australia/Canberra',\n  AustraliaCurrie = 'Australia/Currie',\n  AustraliaDarwin = 'Australia/Darwin',\n  AustraliaEucla = 'Australia/Eucla',\n  AustraliaHobart = 'Australia/Hobart',\n  AustraliaLindeman = 'Australia/Lindeman',\n  AustraliaLordHowe = 'Australia/Lord_Howe',\n  AustraliaMelbourne = 'Australia/Melbourne',\n  AustraliaPerth = 'Australia/Perth',\n  AustraliaSydney = 'Australia/Sydney',\n  EuropeAmsterdam = 'Europe/Amsterdam',\n  EuropeAndorra = 'Europe/Andorra',\n  EuropeAthens = 'Europe/Athens',\n  EuropeBelgrade = 'Europe/Belgrade',\n  EuropeBerlin = 'Europe/Berlin',\n  EuropeBratislava = 'Europe/Bratislava',\n  EuropeBrussels = 'Europe/Brussels',\n  EuropeBucharest = 'Europe/Bucharest',\n  EuropeBudapest = 'Europe/Budapest',\n  EuropeBusingen = 'Europe/Busingen',\n  EuropeChisinau = 'Europe/Chisinau',\n  EuropeCopenhagen = 'Europe/Copenhagen',\n  EuropeDublin = 'Europe/Dublin',\n  EuropeGibraltar = 'Europe/Gibraltar',\n  EuropeGuernsey = 'Europe/Guernsey',\n  EuropeHelsinki = 'Europe/Helsinki',\n  EuropeIsleOfMan = 'Europe/Isle_of_Man',\n  EuropeIstanbul = 'Europe/Istanbul',\n  EuropeJersey = 'Europe/Jersey',\n  EuropeKaliningrad = 'Europe/Kaliningrad',\n  EuropeKiev = 'Europe/Kiev',\n  EuropeKirov = 'Europe/Kirov',\n  EuropeLisbon = 'Europe/Lisbon',\n  EuropeLjubljana = 'Europe/Ljubljana',\n  EuropeLondon = 'Europe/London',\n  EuropeLuxembourg = 'Europe/Luxembourg',\n  EuropeMadrid = 'Europe/Madrid',\n  EuropeMalta = 'Europe/Malta',\n  EuropeMariehamn = 'Europe/Mariehamn',\n  EuropeMinsk = 'Europe/Minsk',\n  EuropeMonaco = 'Europe/Monaco',\n  EuropeMoscow = 'Europe/Moscow',\n  EuropeOslo = 'Europe/Oslo',\n  EuropeParis = 'Europe/Paris',\n  EuropePodgorica = 'Europe/Podgorica',\n  EuropePrague = 'Europe/Prague',\n  EuropeRiga = 'Europe/Riga',\n  EuropeRome = 'Europe/Rome',\n  EuropeSamara = 'Europe/Samara',\n  EuropeSanMarino = 'Europe/San_Marino',\n  EuropeSarajevo = 'Europe/Sarajevo',\n  EuropeSimferopol = 'Europe/Simferopol',\n  EuropeSkopje = 'Europe/Skopje',\n  EuropeSofia = 'Europe/Sofia',\n  EuropeStockholm = 'Europe/Stockholm',\n  EuropeTallinn = 'Europe/Tallinn',\n  EuropeTirane = 'Europe/Tirane',\n  EuropeUzhgorod = 'Europe/Uzhgorod',\n  EuropeVaduz = 'Europe/Vaduz',\n  EuropeVatican = 'Europe/Vatican',\n  EuropeVienna = 'Europe/Vienna',\n  EuropeVilnius = 'Europe/Vilnius',\n  EuropeVolgograd = 'Europe/Volgograd',\n  EuropeWarsaw = 'Europe/Warsaw',\n  EuropeZagreb = 'Europe/Zagreb',\n  EuropeZaporozhye = 'Europe/Zaporozhye',\n  EuropeZurich = 'Europe/Zurich',\n  GMT = 'GMT',\n  IndianAntananarivo = 'Indian/Antananarivo',\n  IndianChagos = 'Indian/Chagos',\n  IndianChristmas = 'Indian/Christmas',\n  IndianCocos = 'Indian/Cocos',\n  IndianComoro = 'Indian/Comoro',\n  IndianKerguelen = 'Indian/Kerguelen',\n  IndianMahe = 'Indian/Mahe',\n  IndianMaldives = 'Indian/Maldives',\n  IndianMauritius = 'Indian/Mauritius',\n  IndianMayotte = 'Indian/Mayotte',\n  IndianReunion = 'Indian/Reunion',\n  PacificApia = 'Pacific/Apia',\n  PacificAuckland = 'Pacific/Auckland',\n  PacificBougainville = 'Pacific/Bougainville',\n  PacificChatham = 'Pacific/Chatham',\n  PacificChuuk = 'Pacific/Chuuk',\n  PacificEaster = 'Pacific/Easter',\n  PacificEfate = 'Pacific/Efate',\n  PacificEnderbury = 'Pacific/Enderbury',\n  PacificFakaofo = 'Pacific/Fakaofo',\n  PacificFiji = 'Pacific/Fiji',\n  PacificFunafuti = 'Pacific/Funafuti',\n  PacificGalapagos = 'Pacific/Galapagos',\n  PacificGambier = 'Pacific/Gambier',\n  PacificGuadalcanal = 'Pacific/Guadalcanal',\n  PacificGuam = 'Pacific/Guam',\n  PacificHonolulu = 'Pacific/Honolulu',\n  PacificJohnston = 'Pacific/Johnston',\n  PacificKiritimati = 'Pacific/Kiritimati',\n  PacificKosrae = 'Pacific/Kosrae',\n  PacificKwajalein = 'Pacific/Kwajalein',\n  PacificMajuro = 'Pacific/Majuro',\n  PacificMarquesas = 'Pacific/Marquesas',\n  PacificMidway = 'Pacific/Midway',\n  PacificNauru = 'Pacific/Nauru',\n  PacificNiue = 'Pacific/Niue',\n  PacificNorfolk = 'Pacific/Norfolk',\n  PacificNoumea = 'Pacific/Noumea',\n  PacificPagoPago = 'Pacific/Pago_Pago',\n  PacificPalau = 'Pacific/Palau',\n  PacificPitcairn = 'Pacific/Pitcairn',\n  PacificPohnpei = 'Pacific/Pohnpei',\n  PacificPonape = 'Pacific/Ponape',\n  PacificPortMoresby = 'Pacific/Port_Moresby',\n  PacificRarotonga = 'Pacific/Rarotonga',\n  PacificSaipan = 'Pacific/Saipan',\n  PacificSamoa = 'Pacific/Samoa',\n  PacificTahiti = 'Pacific/Tahiti',\n  PacificTarawa = 'Pacific/Tarawa',\n  PacificTongatapu = 'Pacific/Tongatapu',\n  PacificTruk = 'Pacific/Truk',\n  PacificWake = 'Pacific/Wake',\n  PacificWallis = 'Pacific/Wallis',\n  PacificYap = 'Pacific/Yap',\n  // USAlaska = 'US/Alaska',\n  // USAleutian = 'US/Aleutian',\n  // USArizona = 'US/Arizona',\n  // USCentral = 'US/Central',\n  // USCentralStandard = 'US/Central Standard',\n  // USCentralDaylight = 'US/Central Daylight',\n  // USEastern = 'US/Eastern',\n  // USEasternStandard = 'US/Eastern Standard',\n  // USEasternDaylight = 'US/Eastern Daylight',\n  // USHawaii = 'US/Hawaii',\n  // USMountain = 'US/Mountain',\n  // USMountainStandard = 'US/Mountain Standard',\n  // USMountainDaylight = 'US/Mountain Daylight',\n  // USPacific = 'US/Pacific',\n  // USPacificStandard = 'US/Pacific Standard',\n  // USPacificDaylight = 'US/Pacific Daylight',\n  // USPacificIsland = 'US/Pacific-Island',\n}\n\nexport type TimezoneRegion = {\n  id: TimezoneRegions;\n  name: string;\n  offset: TimezoneOffset;\n  timezone: Timezones;\n};\n", "import { Timezones } from './timezones';\n\nexport enum TimezoneOffset {\n  UTC_MINUS_12 = 'UTC-12',\n  UTC_MINUS_11_30 = 'UTC-11:30',\n  UTC_MINUS_11 = 'UTC-11',\n  UTC_MINUS_10_30 = 'UTC-10:30',\n  UTC_MINUS_10 = 'UTC-10',\n  UTC_MINUS_9_30 = 'UTC-9:30',\n  UTC_MINUS_9 = 'UTC-09',\n  UTC_MINUS_8_45 = 'UTC-8:45',\n  UTC_MINUS_8 = 'UTC-08',\n  UTC_MINUS_7 = 'UTC-07',\n  UTC_MINUS_6_30 = 'UTC-6:30',\n  UTC_MINUS_6 = 'UTC-06',\n  UTC_MINUS_5_45 = 'UTC-5:45',\n  UTC_MINUS_5_30 = 'UTC-5:30',\n  UTC_MINUS_5 = 'UTC-05',\n  UTC_MINUS_4_30 = 'UTC-4:30',\n  UTC_MINUS_4 = 'UTC-04',\n  UTC_MINUS_3_30 = 'UTC-3:30',\n  UTC_MINUS_3 = 'UTC-03',\n  UTC_MINUS_2_30 = 'UTC-2:30',\n  UTC_MINUS_2 = 'UTC-02',\n  UTC_MINUS_1 = 'UTC-01',\n  UTC_0 = 'UTC+00',\n  UTC_PLUS_1 = 'UTC+01',\n  UTC_PLUS_2 = 'UTC+02',\n  UTC_PLUS_3 = 'UTC+03',\n  UTC_PLUS_3_30 = 'UTC+3:30',\n  UTC_PLUS_4 = 'UTC+04',\n  UTC_PLUS_4_30 = 'UTC+4:30',\n  UTC_PLUS_5 = 'UTC+05',\n  UTC_PLUS_5_30 = 'UTC+5:30',\n  UTC_PLUS_5_45 = 'UTC+5:45',\n  UTC_PLUS_6 = 'UTC+06',\n  UTC_PLUS_6_30 = 'UTC+6:30',\n  UTC_PLUS_7 = 'UTC+07',\n  UTC_PLUS_8 = 'UTC+08',\n  UTC_PLUS_8_45 = 'UTC+8:45',\n  UTC_PLUS_9 = 'UTC+09',\n  UTC_PLUS_9_30 = 'UTC+9:30',\n  UTC_PLUS_10 = 'UTC+10',\n  UTC_PLUS_10_30 = 'UTC+10:30',\n  UTC_PLUS_11 = 'UTC+11',\n  UTC_PLUS_11_30 = 'UTC+11:30',\n  UTC_PLUS_12 = 'UTC+12',\n  UTC_PLUS_12_45 = 'UTC+12:45',\n  UTC_PLUS_13 = 'UTC+13',\n  UTC_PLUS_13_45 = 'UTC+13:45',\n  UTC_PLUS_14 = 'UTC+14',\n}\n\nexport type TimezoneDetails = {\n  dst: {\n    is: boolean;\n    uses: boolean;\n  };\n  id: Timezones;\n  name: string;\n  offset: TimezoneOffset;\n};\n", "import { TimezoneOffset } from './timezone.js';\nimport { TimezoneDetails } from './timezone';\n\nexport enum Timezones {\n  AcreTime = 'ACT',\n  AfghanistanTime = 'AFT',\n  AIXCentralEuropeanTime = 'DFT',\n  AlaskaDaylightTime = 'AKDT',\n  AlaskaStandardTime = 'AKST',\n  AlmaAtaTime = 'ALMT',\n  AmazonSummerTime = 'AMST',\n  AmazonTime = 'AMT',\n  AnadyrTime = 'ANAT',\n  AqtobeTime = 'AQTT',\n  ArabiaStandardTime = 'AST',\n  ArgentinaTime = 'ART',\n  ArmeniaTime = 'AMT',\n  ASEANCommonTime = 'ASEAN',\n  AtlanticDaylightTime = 'ADT',\n  AtlanticStandardTime = 'AST',\n  AustralianCentralDaylightSavingTime = 'ACDT',\n  AustralianCentralStandardTime = 'ACST',\n  AustralianCentralWesternStandardTime = 'ACWST',\n  AustralianEasternDaylightSavingTime = 'AEDT',\n  AustralianEasternStandardTime = 'AEST',\n  AustralianEasternTime = 'AET',\n  AustralianWesternStandardTime = 'AWST',\n  AzerbaijanTime = 'AZT',\n  AzoresStandardTime = 'AZOT',\n  AzoresSummerTime = 'AZOST',\n  BakerIslandTime = 'BIT',\n  BangladeshStandardTime = 'BST',\n  BhutanTime = 'BTT',\n  BoliviaTime = 'BOT',\n  BougainvilleStandardTime = 'BST',\n  BrasiliaSummerTime = 'BRST',\n  BrasiliaTime = 'BRT',\n  BritishIndianOceanTime = 'BIOT',\n  BritishSummerTime = 'BST',\n  BruneiTime = 'BNT',\n  CapeVerdeTime = 'CVT',\n  CentralAfricaTime = 'CAT',\n  CentralDaylightTime = 'CDT',\n  CentralEuropeanSummerTime = 'CEST',\n  CentralEuropeanTime = 'CET',\n  CentralIndonesiaTime = 'WITA',\n  CentralStandardTime = 'CST',\n  CentralTime = 'CT',\n  CentralWesternStandardTime = 'CWST',\n  ChamorroStandardTime = 'CHST',\n  ChathamDaylightTime = 'CHADT',\n  ChathamStandardTime = 'CHAST',\n  ChileStandardTime = 'CLT',\n  ChileSummerTime = 'CLST',\n  ChinaStandardTime = 'CST',\n  ChoibalsanStandardTime = 'CHOT',\n  ChoibalsanSummerTime = 'CHOST',\n  ChristmasIslandTime = 'CXT',\n  ChuukTime = 'CHUT',\n  ClipptertonIslandStandardTime = 'CIST',\n  CocosIslandsTime = 'CCT',\n  ColombiaSummerTime = 'COST',\n  ColombiaTime = 'COT',\n  CookIslandTime = 'CKT',\n  CoordinatedUniversalTime = 'UTC',\n  CubaDaylightTime = 'CDT',\n  CubaStandardTime = 'CST',\n  DavisTime = 'DAVT',\n  DumontDUrvilleTime = 'DDUT',\n  EastAfricaTime = 'EAT',\n  EasterIslandStandardTime = 'EAST',\n  EasterIslandSummerTime = 'EASST',\n  EasternCaribbeanTime = 'ECT',\n  EasternDaylightTime = 'EDT',\n  EasternEuropeanSummerTime = 'EEST',\n  EasternEuropeanTime = 'EET',\n  EasternGreenlandSummerTime = 'EGST',\n  EasternGreenlandTime = 'EGT',\n  EasternIndonesianTime = 'WIT',\n  EasternStandardTime = 'EST',\n  EasternTime = 'ET',\n  EcuadorTime = 'ECT',\n  FalklandIslandsSummerTime = 'FKST',\n  FalklandIslandsTime = 'FKT',\n  FernandoDeNoronhaTime = 'FNT',\n  FijiTime = 'FJT',\n  FrenchGuianaTime = 'GFT',\n  FrenchSouthernAndAntarcticTime = 'TFT',\n  FurtherEasternEuropeanTime = 'FET',\n  GalapagosTime = 'GALT',\n  GambierIslandTime = 'GIT',\n  GambierIslandsTime = 'GAMT',\n  GeorgiaStandardTime = 'GET',\n  GilbertIslandTime = 'GILT',\n  GreenwichMeanTime = 'GMT',\n  GulfStandardTime = 'GST',\n  GuyanaTime = 'GYT',\n  HawaiiAleutianDaylightTime = 'HDT',\n  HawaiiAleutianStandardTime = 'HST',\n  HeardAndMcDonaldIslandsTime = 'HMT',\n  HeureAvanceeDEuropeCentraleTime = 'HAEC',\n  HongKongTime = 'HKT',\n  HovdSummerTime = 'HOVST',\n  HovdTime = 'HOVT',\n  IndianOceanTime = 'IOT',\n  IndianStandardTime = 'IST',\n  IndochinaTime = 'ICT',\n  InternationalDayLineWestTime = 'IDLW',\n  IranDaylightTime = 'IRDT',\n  IranStandardTime = 'IRST',\n  IrishStandardTime = 'IST',\n  IrkutskSummerTime = 'IRKST',\n  IrkutskTime = 'IRKT',\n  IsraelDaylightTime = 'IDT',\n  IsraelStandardTime = 'IST',\n  JapanStandardTime = 'JST',\n  KaliningradTime = 'KALT',\n  KamchatkaTime = 'KAMT',\n  KoreaStandardTime = 'KST',\n  KosraeTime = 'KOST',\n  KrasnoyarskSummerTime = 'KRAST',\n  KrasnoyarskTime = 'KRAT',\n  KyrgyzstanTime = 'KGT',\n  LineIslandsTime = 'LINT',\n  KazakhstanStandardTime = 'KAST',\n  LordHoweStandardTime = 'LHST',\n  LordHoweSummerTime = 'LHST',\n  MacquarieIslandStationTime = 'MIST',\n  MagadanTime = 'MAGT',\n  MalaysiaStandardTime = 'MST',\n  MalaysiaTime = 'MYT',\n  MaldivesTime = 'MVT',\n  MarquesasIslandsTime = 'MART',\n  MarshallIslandsTime = 'MHT',\n  MauritiusTime = 'MUT',\n  MawsonStationTime = 'MAWT',\n  MiddleEuropeanSummerTime = 'MEDT',\n  MiddleEuropeanTime = 'MET',\n  MoscowTime = 'MSK',\n  MountainDaylightTime = 'MDT',\n  MountainStandardTime = 'MST',\n  MyanmarStandardTime = 'MMT',\n  NepalTime = 'NCT',\n  NauruTime = 'NRT',\n  NewCaledoniaTime = 'NCT',\n  NewZealandDaylightTime = 'NZDT',\n  NewZealandStandardTime = 'NZST',\n  NewfoundlandDaylightTime = 'NDT',\n  NewfoundlandStandardTime = 'NST',\n  NewfoundlandTime = 'NT',\n  NiueTime = 'NUT',\n  NorfolkIslandTime = 'NFT',\n  NovosibirskTime = 'NOVT',\n  OmskTime = 'OMST',\n  OralTime = 'ORAT',\n  PacificDaylightTime = 'PDT',\n  PacificStandardTime = 'PST',\n  PakistanStandardTime = 'PKT',\n  PalauTime = 'PWT',\n  PapuaNewGuineaTime = 'PGT',\n  ParaguaySummerTime = 'PYST',\n  ParaguayTime = 'PYT',\n  PeruTime = 'PET',\n  PhilippineStandardTime = 'PHST',\n  PhilippineTime = 'PHT',\n  PhoenixIslandTime = 'PHOT',\n  PitcairnTime = 'PST',\n  PohnpeiStandardTime = 'PONT',\n  ReunionTime = 'RET',\n  RotheraResearchStationTime = 'ROTT',\n  SaintPierreAndMiquelonDaylightTime = 'PMDT',\n  SaintPierreAndMiquelonStandardTime = 'PMST',\n  SakhalinIslandTime = 'SAKT',\n  SamaraTime = 'SAMT',\n  SamoaDaylightTime = 'SDT',\n  SamoaStandardTime = 'SST',\n  SeychellesTime = 'SCT',\n  ShowaStationTime = 'SYOT',\n  SingaporeStandardTime = 'SST',\n  SingaporeTime = 'SGT',\n  SolomonIslandsTime = 'SBT',\n  SouthAfricanStandardTime = 'SAST',\n  SouthGeorgiaAndTheSouthSandwichIslandsTime = 'GST',\n  SrednekolymskTime = 'SRET',\n  SriLankaStandardTime = 'SLST',\n  SurinameTime = 'SRT',\n  TahitiTime = 'TAHT',\n  TajikistanTime = 'TJT',\n  ThailandStandardTime = 'THA',\n  TimorLesteTime = 'TLT',\n  TokelauTime = 'TKT',\n  TongaTime = 'TOT',\n  TurkeyTime = 'TRT',\n  TurkmenistanTime = 'TMT',\n  TuvaluTime = 'TVT',\n  UlaanbaatarStandardTime = 'ULAT',\n  UlaanbaatarSummerTime = 'ULAST',\n  UruguayStandardTime = 'UYT',\n  UruguaySummerTime = 'UYST',\n  UzbekistanTime = 'UZT',\n  VanuatuTime = 'VUT',\n  VenezuelaStandardTime = 'VET',\n  VladivostokTime = 'VLAT',\n  VolgogradTime = 'VOLT',\n  VostokStationTime = 'VOST',\n  WakeIslandTime = 'WAKT',\n  WestAfricaSummerTime = 'WAST',\n  WestAfricaTime = 'WAT',\n  WestGreenlandSummerTime = 'WGST',\n  WestGreenlandTime = 'WGT',\n  WestKazakhstanTime = 'WKT',\n  WesternEuropeanSummerTime = 'WEDT',\n  WesternEuropeanTime = 'WET',\n  WesternIndonesianTime = 'WIT',\n  WesternStandardTime = 'WST',\n  YakutskTime = 'YAKT',\n  YekaterinburgTime = 'YEKT',\n}\n\nexport const AcreTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AcreTime,\n  name: 'Acre Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const AfghanistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AfghanistanTime,\n  name: 'Afghanistan Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const AIXCentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AIXCentralEuropeanTime,\n  name: 'AIX Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const AlaskaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AlaskaDaylightTime,\n  name: 'Alaska Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const AlaskaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlaskaStandardTime,\n  name: 'Alaska Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const AlmaAtaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlmaAtaTime,\n  name: 'Alma-Ata Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const AmazonSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonSummerTime,\n  name: 'Amazon Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AmazonTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonTime,\n  name: 'Amazon Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AnadyrTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AnadyrTime,\n  name: 'Anadyr Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const AqtobeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AqtobeTime,\n  name: 'Aqtobe Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ArabiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArabiaStandardTime,\n  name: 'Arabia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const ArgentinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArgentinaTime,\n  name: 'Argentina Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ArmeniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArmeniaTime,\n  name: 'Armenia Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AtlanticDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AtlanticDaylightTime,\n  name: 'Atlantic Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AtlanticStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AtlanticStandardTime,\n  name: 'Atlantic Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AustralianCentralDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralDaylightSavingTime,\n  name: 'Australian Central Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const AustralianCentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralStandardTime,\n  name: 'Australian Central Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const AustralianCentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralWesternStandardTime,\n  name: 'Australian Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const AustralianEasternDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternDaylightSavingTime,\n  name: 'Australian Eastern Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const AustralianEasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternStandardTime,\n  name: 'Australian Eastern Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianEasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternTime,\n  name: 'Australian Eastern Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianWesternStandardTime,\n  name: 'Australian Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const AzerbaijanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzerbaijanTime,\n  name: 'Azerbaijan Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AzoresStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzoresStandardTime,\n  name: 'Azores Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const AzoresSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AzoresSummerTime,\n  name: 'Azores Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const BakerIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BakerIslandTime,\n  name: 'Baker Island Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const BangladeshStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BangladeshStandardTime,\n  name: 'Bangladesh Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BhutanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BhutanTime,\n  name: 'Bhutan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BoliviaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BoliviaTime,\n  name: 'Bolivia Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const BougainvilleStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BougainvilleStandardTime,\n  name: 'Bougainville Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const BrasiliaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BrasiliaSummerTime,\n  name: 'Brasilia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const BrasiliaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BrasiliaTime,\n  name: 'Brasilia Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const BritishIndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BritishIndianOceanTime,\n  name: 'British Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BritishSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BritishSummerTime,\n  name: 'British Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const BruneiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BruneiTime,\n  name: 'Brunei Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CapeVerdeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CapeVerdeTime,\n  name: 'Cape Verde Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const CentralAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralAfricaTime,\n  name: 'Central Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralDaylightTime,\n  name: 'Central Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanSummerTime,\n  name: 'Central European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanTime,\n  name: 'Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const CentralIndonesiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralIndonesiaTime,\n  name: 'Central Indonesia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralStandardTime,\n  name: 'Central Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const CentralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralTime,\n  name: 'Central Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralWesternStandardTime,\n  name: 'Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const ChamorroStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChamorroStandardTime,\n  name: 'Chamorro Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ChathamDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChathamDaylightTime,\n  name: 'Chatham Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13_45,\n};\n\nexport const ChathamStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChathamStandardTime,\n  name: 'Chatham Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12_45,\n};\n\nexport const ChileStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChileStandardTime,\n  name: 'Chile Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ChileSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChileSummerTime,\n  name: 'Chile Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ChinaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChinaStandardTime,\n  name: 'China Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanStandardTime,\n  name: 'Choibalsan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanSummerTime,\n  name: 'Choibalsan Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const ChristmasIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChristmasIslandTime,\n  name: 'Christmas Island Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const ChuukTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChuukTime,\n  name: 'Chuuk Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ClipptertonIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ClipptertonIslandStandardTime,\n  name: 'Clippterton Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const CocosIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CocosIslandsTime,\n  name: 'Cocos Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const ColombiaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ColombiaSummerTime,\n  name: 'Colombia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ColombiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ColombiaTime,\n  name: 'Colombia Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CookIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CookIslandTime,\n  name: 'Cook Island Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const CoordinatedUniversalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CoordinatedUniversalTime,\n  name: 'Coordinated Universal Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const CubaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CubaDaylightTime,\n  name: 'Cuba Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const CubaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CubaStandardTime,\n  name: 'Cuba Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const DavisTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DavisTime,\n  name: 'Davis Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const DumontDUrvilleTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DumontDUrvilleTime,\n  name: \"Dumont D'Urville Time\",\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const EastAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EastAfricaTime,\n  name: 'East Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasterIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasterIslandStandardTime,\n  name: 'Easter Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const EasterIslandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasterIslandSummerTime,\n  name: 'Easter Island Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternCaribbeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternCaribbeanTime,\n  name: 'Eastern Caribbean Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternDaylightTime,\n  name: 'Eastern Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanSummerTime,\n  name: 'Eastern European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanTime,\n  name: 'Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const EasternGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandSummerTime,\n  name: 'Eastern Greenland Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const EasternGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandTime,\n  name: 'Eastern Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const EasternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternIndonesianTime,\n  name: 'Eastern Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const EasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternStandardTime,\n  name: 'Eastern Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternTime,\n  name: 'Eastern Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EcuadorTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EcuadorTime,\n  name: 'Ecuador Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const FalklandIslandsSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsSummerTime,\n  name: 'Falkland Islands Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FalklandIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsTime,\n  name: 'Falkland Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const FernandoDeNoronhaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FernandoDeNoronhaTime,\n  name: 'Fernando de Noronha Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const FijiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FijiTime,\n  name: 'Fiji Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const FrenchGuianaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchGuianaTime,\n  name: 'French Guiana Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FrenchSouthernAndAntarcticTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchSouthernAndAntarcticTime,\n  name: 'French Southern and Antarctic Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const FurtherEasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FurtherEasternEuropeanTime,\n  name: 'Further Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const GalapagosTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GalapagosTime,\n  name: 'Galapagos Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const GambierIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandTime,\n  name: 'Gambier Island Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GambierIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandsTime,\n  name: 'Gambier Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GeorgiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GeorgiaStandardTime,\n  name: 'Georgia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GilbertIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GilbertIslandTime,\n  name: 'Gilbert Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const GreenwichMeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GreenwichMeanTime,\n  name: 'Greenwich Mean Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const GulfStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GulfStandardTime,\n  name: 'Gulf Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GuyanaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GuyanaTime,\n  name: 'Guyana Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const HawaiiAleutianDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianDaylightTime,\n  name: 'Hawaii-Aleutian Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const HawaiiAleutianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianStandardTime,\n  name: 'Hawaii-Aleutian Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const HeardAndMcDonaldIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HeardAndMcDonaldIslandsTime,\n  name: 'Heard and McDonald Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const HongKongTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HongKongTime,\n  name: 'Hong Kong Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HovdSummerTime,\n  name: 'Hovd Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HovdTime,\n  name: 'Hovd Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const IndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianOceanTime,\n  name: 'Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IndianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianStandardTime,\n  name: 'Indian Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const IndochinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndochinaTime,\n  name: 'Indochina Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const InternationalDayLineWestTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.InternationalDayLineWestTime,\n  name: 'International Day Line West Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const IranDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IranDaylightTime,\n  name: 'Iran Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const IranStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IranStandardTime,\n  name: 'Iran Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3_30,\n};\n\nexport const IrishStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrishStandardTime,\n  name: 'Irish Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const IrkutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrkutskTime,\n  name: 'Irkutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const IsraelDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IsraelDaylightTime,\n  name: 'Israel Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IsraelStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IsraelStandardTime,\n  name: 'Israel Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const JapanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.JapanStandardTime,\n  name: 'Japan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KaliningradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KaliningradTime,\n  name: 'Kaliningrad Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const KamchatkaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KamchatkaTime,\n  name: 'Kamchatka Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const KoreaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KoreaStandardTime,\n  name: 'Korea Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KosraeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KosraeTime,\n  name: 'Kosrae Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const KrasnoyarskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KrasnoyarskTime,\n  name: 'Krasnoyarsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const KyrgyzstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KyrgyzstanTime,\n  name: 'Kyrgyzstan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const LineIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LineIslandsTime,\n  name: 'Line Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_14,\n};\n\nexport const LordHoweStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweStandardTime,\n  name: 'Lord Howe Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const LordHoweSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweSummerTime,\n  name: 'Lord Howe Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MacquarieIslandStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MacquarieIslandStationTime,\n  name: 'Macquarie Island Station Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MagadanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MagadanTime,\n  name: 'Magadan Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MalaysiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaStandardTime,\n  name: 'Malaysia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MalaysiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaTime,\n  name: 'Malaysia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MaldivesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MaldivesTime,\n  name: 'Maldives Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MarquesasIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarquesasIslandsTime,\n  name: 'Marquesas Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const MarshallIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarshallIslandsTime,\n  name: 'Marshall Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MauritiusTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MauritiusTime,\n  name: 'Mauritius Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const MawsonStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MawsonStationTime,\n  name: 'Mawson Station Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MiddleEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanSummerTime,\n  name: 'Middle European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const MiddleEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanTime,\n  name: 'Middle European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const MoscowTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MoscowTime,\n  name: 'Moscow Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const MountainDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainDaylightTime,\n  name: 'Mountain Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const MountainStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainStandardTime,\n  name: 'Mountain Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const MyanmarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MyanmarStandardTime,\n  name: 'Myanmar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const NepalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NepalTime,\n  name: 'Nepal Time',\n  offset: TimezoneOffset.UTC_PLUS_5_45,\n};\n\nexport const NauruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NauruTime,\n  name: 'Nauru Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewCaledoniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewCaledoniaTime,\n  name: 'New Caledonia Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NewZealandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandDaylightTime,\n  name: 'New Zealand Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const NewZealandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandStandardTime,\n  name: 'New Zealand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewfoundlandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewfoundlandDaylightTime,\n  name: 'Newfoundland Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2_30,\n};\n\nexport const NewfoundlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NewfoundlandTime,\n  name: 'Newfoundland Time',\n  offset: TimezoneOffset.UTC_MINUS_3_30,\n};\n\nexport const NiueTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NiueTime,\n  name: 'Niue Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const NorfolkIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NorfolkIslandTime,\n  name: 'Norfolk Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NovosibirskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NovosibirskTime,\n  name: 'Novosibirsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const OmskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OmskTime,\n  name: 'Omsk Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const OralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OralTime,\n  name: 'Oral Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PacificDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificDaylightTime,\n  name: 'Pacific Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const PacificStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificStandardTime,\n  name: 'Pacific Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PakistanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PakistanStandardTime,\n  name: 'Pakistan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PalauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PalauTime,\n  name: 'Palau Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const PapuaNewGuineaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PapuaNewGuineaTime,\n  name: 'Papua New Guinea Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ParaguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguaySummerTime,\n  name: 'Paraguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ParaguayTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguayTime,\n  name: 'Paraguay Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const PeruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PeruTime,\n  name: 'Peru Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const PhilippineStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineStandardTime,\n  name: 'Philippine Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhillipineTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineTime,\n  name: 'Philippine Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhoenixIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhoenixIslandTime,\n  name: 'Phoenix Island Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const PitcairnTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PitcairnTime,\n  name: 'Pitcairn Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PohnpeiStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PohnpeiStandardTime,\n  name: 'Pohnpei Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const ReunionTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ReunionTime,\n  name: 'Reunion Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const RotheraResearchStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.RotheraResearchStationTime,\n  name: 'Rothera Research Station Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SaintPierreAndMiquelonDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonDaylightTime,\n  name: 'Saint Pierre and Miquelon Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SaintPierreAndMiquelonStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonStandardTime,\n  name: 'Saint Pierre and Miquelon Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SakhalinIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SakhalinIslandTime,\n  name: 'Sakhalin Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SamaraTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamaraTime,\n  name: 'Samara Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const SamoaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaDaylightTime,\n  name: 'Samoa Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const SamoaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaStandardTime,\n  name: 'Samoa Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const SeychellesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SeychellesTime,\n  name: 'Seychelles Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const ShowaStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ShowaStationTime,\n  name: 'Showa Station Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const SingaporeStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeStandardTime,\n  name: 'Singapore Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SingaporeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeTime,\n  name: 'Singapore Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SolomonIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SolomonIslandsTime,\n  name: 'Solomon Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SouthAfricanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthAfricanStandardTime,\n  name: 'South African Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const SouthGeorgiaAndTheSouthSandwichIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,\n  name: 'South Georgia and the South Sandwich Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SrednekolymskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SrednekolymskTime,\n  name: 'Srednekolymsk Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SriLankaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SriLankaStandardTime,\n  name: 'Sri Lanka Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const SurinameTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SurinameTime,\n  name: 'Suriname Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const TahitiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TahitiTime,\n  name: 'Tahiti Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const TajikistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TajikistanTime,\n  name: 'Tajikistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ThailandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ThailandStandardTime,\n  name: 'Thailand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const TimorLesteTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TimorLesteTime,\n  name: 'Timor-Leste Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const TokelauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TokelauTime,\n  name: 'Tokelau Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TongaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TongaTime,\n  name: 'Tonga Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TurkeyTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkeyTime,\n  name: 'Turkey Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const TurkmenistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkmenistanTime,\n  name: 'Turkmenistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const TuvaluTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TuvaluTime,\n  name: 'Tuvalu Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const UlaanbaatarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarStandardTime,\n  name: 'Ulaanbaatar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const UlaanbaatarSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarSummerTime,\n  name: 'Ulaanbaatar Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const UruguayStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguayStandardTime,\n  name: 'Uruguay Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const UruguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguaySummerTime,\n  name: 'Uruguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const UzbekistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UzbekistanTime,\n  name: 'Uzbekistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const VanuatuTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VanuatuTime,\n  name: 'Vanuatu Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const VenezuelaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VenezuelaStandardTime,\n  name: 'Venezuela Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const VladivostokTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VladivostokTime,\n  name: 'Vladivostok Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const VolgogradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VolgogradTime,\n  name: 'Volgograd Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const VostokStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VostokStationTime,\n  name: 'Vostok Station Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const WakeIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WakeIslandTime,\n  name: 'Wake Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const WestAfricaSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaSummerTime,\n  name: 'West Africa Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const WestAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaTime,\n  name: 'West Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WestGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandSummerTime,\n  name: 'West Greenland Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const WestGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandTime,\n  name: 'West Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const WestKazakhstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestKazakhstanTime,\n  name: 'West Kazakhstan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const WesternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanSummerTime,\n  name: 'Western European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WesternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanTime,\n  name: 'Western European Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const WesternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternIndonesianTime,\n  name: 'Western Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const WesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternStandardTime,\n  name: 'Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const YakutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YakutskTime,\n  name: 'Yakutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const YekaterinburgTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YekaterinburgTime,\n  name: 'Yekaterinburg Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n", "export enum Region {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n  Polar = 'Polar',\n}\n\nexport enum SubRegion {\n  CentralAmerica = 'Central America',\n  EasternAsia = 'Eastern Asia',\n  EasternEurope = 'Eastern Europe',\n  EasternAfrica = 'Eastern Africa',\n  MiddleAfrica = 'Middle Africa',\n  MiddleEast = 'Middle East',\n  NorthernAfrica = 'Northern Africa',\n  NorthernAmerica = 'Northern America',\n  NorthernEurope = 'Northern Europe',\n  Polynesia = 'Polynesia',\n  SouthAmerica = 'South America',\n  SouthernAfrica = 'Southern Africa',\n  SouthernAsia = 'Southern Asia',\n  SouthernEurope = 'Southern Europe',\n  WesternAfrica = 'Western Africa',\n  WesternAsia = 'Western Asia',\n  WesternEurope = 'Western Europe',\n  WesternAustralia = 'Western Australia',\n}\n", "import { CurrencyCode } from '../currency/index.js';\nimport { LocaleCode } from '../locale/index.js';\nimport { TimezoneRegions } from '../time/region.js';\nimport { TimezoneOffset } from '../time/timezone.js';\nimport { Timezones } from '../time/timezones.js';\nimport { CountryCode } from './country.js';\nimport { Country } from './country';\nimport { Region, SubRegion } from './region.js';\n\nexport const Countries: Record<Country['name']['short'], Country> = {\n  Afghanistan: {\n    i18n: {\n      calling_codes: [93],\n      currencies: [CurrencyCode.AfghanistanAfghani],\n      languages: [\n        LocaleCode.Pashto,\n        LocaleCode.Dari,\n        LocaleCode.Turkmen,\n        LocaleCode.Uzbek,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4_30],\n        regions: [TimezoneRegions.AsiaKabul],\n        timezones: [Timezones.AfghanistanTime],\n      },\n    },\n    id: CountryCode.Afghanistan,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEB',\n        emoji_unicode: 'U+1F1E6 U+1F1EB',\n        svg: 'https://www.countryflags.io/af/flat/64.svg',\n      },\n      tld: ['.af'],\n    },\n    iso: {\n      alpha2: CountryCode.Afghanistan,\n      alpha3: 'AFG',\n      numeric: '004',\n    },\n    name: {\n      alt_spellings: ['AF', 'Af\u0121\u0101nist\u0101n'],\n      demonym: 'Afghan',\n      native: {\n        endonym: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n      },\n      official: 'Islamic Republic of Afghanistan',\n      short: 'Afghanistan',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Afghanistan',\n        [LocaleCode.Albanian]: 'Shqip\u00EBri',\n        [LocaleCode.Amharic]: '\u12A0\u134D\u130B\u1295',\n        [LocaleCode.Arabic]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Basque]: 'Afganist\u00E1n',\n        [LocaleCode.Belarusian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Bengali]: '\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8',\n        [LocaleCode.Berber]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D',\n        [LocaleCode.Bosnian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Breton]: 'Afganistan',\n        [LocaleCode.Bulgarian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Afganistan',\n        [LocaleCode.Chinese]: '\u963F\u5BCC\u6C57',\n        [LocaleCode.Croatian]: 'Afganistan',\n        [LocaleCode.Czech]: 'Afganistan',\n        [LocaleCode.Danish]: 'Afghanistan',\n        [LocaleCode.Dutch]: 'Afghanistan',\n        [LocaleCode.English]: 'Afghanistan',\n        [LocaleCode.Esperanto]: 'Afganistan',\n        [LocaleCode.Estonian]: 'Afganistan',\n        [LocaleCode.Finnish]: 'Afghanistan',\n        [LocaleCode.French]: 'Afghanistan',\n        [LocaleCode.Frisian]: 'Afghanistan',\n        [LocaleCode.Galician]: 'Afganist\u00E1n',\n        [LocaleCode.Georgian]: '\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8',\n        [LocaleCode.German]: 'Afghanistan',\n        [LocaleCode.Greenlandic]: 'Afghanistan',\n        [LocaleCode.Greek]: '\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD',\n        [LocaleCode.Gujarati]: '\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8',\n        [LocaleCode.Haitian]: 'Afghanistan',\n        [LocaleCode.Hausa]: 'Afghanistan',\n        [LocaleCode.Hebrew]: '\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF',\n        [LocaleCode.Hindi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Hungarian]: 'Afganistan',\n        [LocaleCode.Icelandic]: 'Afghanistan',\n        [LocaleCode.Igbo]: 'Afghanistan',\n        [LocaleCode.Indonesian]: 'Afghanistan',\n        [LocaleCode.Irish]: 'Afghanistan',\n        [LocaleCode.Italian]: 'Afghanistan',\n        [LocaleCode.Japanese]: '\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3',\n        [LocaleCode.Javanese]: 'Afghanistan',\n        [LocaleCode.Kannada]: '\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8',\n        [LocaleCode.Kazakh]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780',\n        [LocaleCode.Korean]: '\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4',\n        [LocaleCode.Kurdish]: 'Afghanistan',\n        [LocaleCode.Kyrgyz]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99',\n        [LocaleCode.Latin]: 'Afghanistan',\n        [LocaleCode.Latvian]: 'Afghanistan',\n        [LocaleCode.Lithuanian]: 'Afganistanas',\n        [LocaleCode.Luxembourgish]: 'Afghanistan',\n        [LocaleCode.Macedonian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Malagasy]: 'Afghanistan',\n        [LocaleCode.Malay]: 'Afghanistan',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28',\n        [LocaleCode.Maltese]: 'Afghanistan',\n        [LocaleCode.Maori]: 'Afghanistan',\n        [LocaleCode.Marathi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Mongolian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Nepali]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Norwegian]: 'Afghanistan',\n        [LocaleCode.Pashto]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Persian]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Portuguese]: 'Afghanistan',\n        [LocaleCode.Punjabi]: 'Afghanistan',\n        [LocaleCode.Romanian]: 'Afghanistan',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Russian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Samoan]: 'Afghanistan',\n        [LocaleCode.Sanskrit]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Scots]: 'Afghanistan',\n        [LocaleCode.Serbian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Sesotho]: 'Afghanistan',\n        [LocaleCode.Shona]: 'Afghanistan',\n        [LocaleCode.Sindhi]: 'Afghanistan',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Afganistan',\n        [LocaleCode.Slovenian]: 'Afganistan',\n        [LocaleCode.Somali]: 'Afghanistan',\n        [LocaleCode.Spanish]: 'Afganist\u00E1n',\n        [LocaleCode.Sudanese]: 'Afghanistan',\n        [LocaleCode.Swahili]: 'Afghanistan',\n        [LocaleCode.Swedish]: 'Afghanistan',\n        [LocaleCode.Tagalog]: 'Afghanistan',\n        [LocaleCode.Tajik]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tatar]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tamil]: '\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD',\n        [LocaleCode.Telugu]: '\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D',\n        [LocaleCode.Turkish]: 'Afganistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Urdu]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Vietnamese]: 'Afghanistan',\n        [LocaleCode.Welsh]: 'Afghanistan',\n        [LocaleCode.Xhosa]: 'Afghanistan',\n        [LocaleCode.Yiddish]: 'Afghanistan',\n        [LocaleCode.Yoruba]: 'Afghanistan',\n        [LocaleCode.Zulu]: 'Afghanistan',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Kabul',\n          total: 34100000,\n        },\n      },\n      geography: {\n        area: 652230,\n        region: Region.Asia,\n        sub_region: SubRegion.SouthernAsia,\n      },\n      government: {\n        capital: 'Kabul',\n        type: 'Islamic Emirate',\n      },\n    },\n  },\n  Albania: {\n    i18n: {\n      calling_codes: [355],\n      currencies: [CurrencyCode.AlbaniaLek],\n      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1],\n        regions: [TimezoneRegions.EuropeBrussels],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Albania,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF1',\n        emoji_unicode: 'U+1F1E6 U+1F1F1',\n        svg: 'https://www.countryflags.io/al/flat/64.svg',\n      },\n      tld: ['.al'],\n    },\n    iso: {\n      alpha2: CountryCode.Albania,\n      alpha3: 'ALB',\n      numeric: '008',\n    },\n    name: {\n      alt_spellings: ['AL', 'Shqip\u00EBri', 'Shqip\u00EBria', 'Shqipnia'],\n      demonym: 'Albanian',\n      native: {\n        endonym: 'Shqip\u00EBri',\n      },\n      official: 'Republic of Albania',\n      short: 'Albania',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Albania',\n        [LocaleCode.Albanian]: 'Albania',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1263\u1295\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Albania',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B',\n        [LocaleCode.Bosnian]: 'Albanija',\n        [LocaleCode.Breton]: 'Albania',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Alb\u00E0nia',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u5DF4\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Albanija',\n        [LocaleCode.Czech]: 'Alb\u00E1nie',\n        [LocaleCode.Danish]: 'Albanien',\n        [LocaleCode.Dutch]: 'Albani\u00EB',\n        [LocaleCode.English]: 'Albania',\n        [LocaleCode.Esperanto]: 'Albanio',\n        [LocaleCode.Estonian]: 'Albaania',\n        [LocaleCode.Finnish]: 'Albania',\n        [LocaleCode.French]: 'Albanie',\n        [LocaleCode.Frisian]: 'Albani\u00EB',\n        [LocaleCode.Galician]: 'Alb\u00E2nia',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0',\n        [LocaleCode.German]: 'Albanien',\n        [LocaleCode.Greenlandic]: 'Albania',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Albanais',\n        [LocaleCode.Hausa]: 'Albania',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alb\u00E1nia',\n        [LocaleCode.Icelandic]: 'Alb\u00FAnir',\n        [LocaleCode.Igbo]: 'Albania',\n        [LocaleCode.Indonesian]: 'Albania',\n        [LocaleCode.Irish]: 'Alb\u00E1in',\n        [LocaleCode.Italian]: 'Albania',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30D0\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Albania',\n        [LocaleCode.Kannada]: '\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uBC14\uB2C8\uC544',\n        [LocaleCode.Kurdish]: '\u0622\u0644\u0628\u0627\u0646\u06CC\u0627',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5',\n        [LocaleCode.Latin]: 'Albania',\n        [LocaleCode.Latvian]: 'Alb\u0101nija',\n        [LocaleCode.Lithuanian]: 'Albanija',\n        [LocaleCode.Luxembourgish]: 'Albani\u00EB',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Albania',\n        [LocaleCode.Malay]: 'Albania',\n        [LocaleCode.Malayalam]: '\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E',\n        [LocaleCode.Maltese]: 'Albania',\n        [LocaleCode.Maori]: 'Albania',\n        [LocaleCode.Marathi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Albania',\n        [LocaleCode.Pashto]: '\u0627\u0627\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Persian]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Polish]: 'Albania',\n        [LocaleCode.Portuguese]: 'Alb\u00E2nia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Alb\u0103n',\n        [LocaleCode.Russian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Albania',\n        [LocaleCode.Sanskrit]: 'Albani',\n        [LocaleCode.Scots]: 'Alb\u00E0inia',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Albania',\n        [LocaleCode.Shona]: 'Albania',\n        [LocaleCode.Sindhi]: 'Albania',\n        [LocaleCode.Sinhala]: '\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Alb\u00E1nsko',\n        [LocaleCode.Slovenian]: 'Albanija',\n        [LocaleCode.Somali]: 'Albania',\n        [LocaleCode.Spanish]: 'Albania',\n        [LocaleCode.Sudanese]: 'Albania',\n        [LocaleCode.Swahili]: 'Albania',\n        [LocaleCode.Swedish]: 'Albanien',\n        [LocaleCode.Tagalog]: 'Albania',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Albaniye',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0431\u0430\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Albanie',\n        [LocaleCode.Welsh]: 'Albania',\n        [LocaleCode.Xhosa]: 'Albania',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9',\n        [LocaleCode.Yoruba]: 'Albania',\n        [LocaleCode.Zulu]: 'Albania',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Tirana',\n          total: 2853000,\n        },\n      },\n      geography: {\n        area: 28748,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Tirana',\n        type: 'Republic',\n      },\n    },\n  },\n  Algeria: {\n    i18n: {\n      calling_codes: [213],\n      currencies: [CurrencyCode.AlgeriaDinar],\n      languages: [\n        LocaleCode.Arabic,\n        LocaleCode.French,\n        LocaleCode.Berber,\n        LocaleCode.Tamazight,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.AfricaAlgiers],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n\n    id: CountryCode.Algeria,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE9\uD83C\uDDFF',\n        emoji_unicode: 'U+1F1E9 U+1F1FF',\n        svg: 'https://www.countryflags.io/dz/flat/64.svg',\n      },\n      tld: ['.dz', '.\u062C\u0632\u0627\u0626\u0631'],\n    },\n    iso: {\n      alpha2: CountryCode.Algeria,\n      alpha3: 'DZA',\n      numeric: '012',\n    },\n    name: {\n      alt_spellings: ['DZ', 'Dzayer', 'Alg\u00E9rie'],\n      demonym: 'Algerian',\n      native: {\n        endonym: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n      },\n      official: \"People's Democratic Republic of Algeria\",\n      short: 'Algeria',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Algerije',\n        [LocaleCode.Albanian]: 'Algeria',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1300\u122D\u1235',\n        [LocaleCode.Arabic]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Armenian]: '\u0531\u056C\u0563\u0578\u0580\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Basque]: 'Algeria',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u099C\u09C7\u09B0',\n        [LocaleCode.Berber]: '\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Bhutani]: '\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41',\n        [LocaleCode.Bosnian]: 'Al\u017Eir',\n        [LocaleCode.Breton]: 'Algeria',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Burmese]: '\u1021\u102C\u101B\u1015\u103A',\n        [LocaleCode.Catalan]: 'Alg\u00E8ria',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u53CA\u5229\u4E9A',\n        [LocaleCode.Croatian]: 'Al\u017Eir',\n        [LocaleCode.Czech]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Danish]: 'Algeriet',\n        [LocaleCode.Dutch]: 'Algerije',\n        [LocaleCode.English]: 'Algeria',\n        [LocaleCode.Esperanto]: 'Al\u011Derio',\n        [LocaleCode.Estonian]: 'Al\u017Eira',\n        [LocaleCode.Finnish]: 'Algeria',\n        [LocaleCode.French]: 'Alg\u00E9rie',\n        [LocaleCode.Frisian]: 'Algeri\u00EB',\n        [LocaleCode.Galician]: 'Alxeria',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8',\n        [LocaleCode.German]: 'Algerien',\n        [LocaleCode.Greenlandic]: 'Algeria',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Alg\u00E9rie',\n        [LocaleCode.Hausa]: 'Algeria',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alg\u00E1r',\n        [LocaleCode.Icelandic]: 'Alg\u00FAra',\n        [LocaleCode.Igbo]: 'Algeria',\n        [LocaleCode.Indonesian]: 'Aljir',\n        [LocaleCode.Irish]: 'Alg\u00E9rie',\n        [LocaleCode.Italian]: 'Algeria',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2',\n        [LocaleCode.Javanese]: 'Aljir',\n        [LocaleCode.Kannada]: '\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uC81C\uB9AC',\n        [LocaleCode.Kurdish]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99',\n        [LocaleCode.Latin]: 'Algeria',\n        [LocaleCode.Latvian]: 'Al\u017E\u012Brija',\n        [LocaleCode.Lithuanian]: 'Al\u017Eyras',\n        [LocaleCode.Luxembourgish]: 'Algeria',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Malagasy]: 'Alg\u00E9rie',\n        [LocaleCode.Malay]: 'Aljir',\n        [LocaleCode.Malayalam]: '\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B',\n        [LocaleCode.Maltese]: 'Alg\u00E9rie',\n        [LocaleCode.Maori]: 'Algeria',\n        [LocaleCode.Marathi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Nepali]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Algeria',\n        [LocaleCode.Pashto]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Persian]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628',\n        [LocaleCode.Polish]: 'Algieria',\n        [LocaleCode.Portuguese]: 'Alg\u00E9ria',\n        [LocaleCode.Punjabi]: '\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Algeria',\n        [LocaleCode.Russian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Samoan]: 'Algeria',\n        [LocaleCode.Sanskrit]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Scots]: 'Algeria',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Sesotho]: 'Algeria',\n        [LocaleCode.Shona]: 'Algeria',\n        [LocaleCode.Sindhi]: 'Algeria',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Slovenian]: 'Al\u017Eir',\n        [LocaleCode.Somali]: 'Algeria',\n        [LocaleCode.Spanish]: 'Algeria',\n        [LocaleCode.Sudanese]: 'Aljir',\n        [LocaleCode.Swahili]: 'Aljir',\n        [LocaleCode.Swedish]: 'Algeriet',\n        [LocaleCode.Tagalog]: 'Algeria',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Tamil]: '\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Telugu]: '\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Cezayir',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Urdu]: '\u0622\u0644\u062C\u06CC\u0631',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Vietnamese]: '\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5',\n        [LocaleCode.Welsh]: 'Algeria',\n        [LocaleCode.Xhosa]: 'Algeria',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Algeria',\n        [LocaleCode.Zulu]: 'Algeria',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Oran',\n          total: 37100000,\n        },\n      },\n      geography: {\n        area: 2381740,\n        region: Region.Africa,\n        sub_region: SubRegion.NorthernAfrica,\n      },\n      government: {\n        capital: 'Algiers',\n        type: 'Republic',\n      },\n    },\n  },\n  AmericanSamoa: {\n    i18n: {\n      calling_codes: [1684],\n      currencies: [CurrencyCode.AmericanSamoaTala],\n\n      languages: [LocaleCode.English, LocaleCode.Samoan],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_11],\n        regions: [TimezoneRegions.PacificSamoa],\n        timezones: [Timezones.SamoaStandardTime],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF8',\n        emoji_unicode: 'U+1F1E6 U+1F1F8',\n        svg: 'https://www.countryflags.io/as/flat/64.svg',\n      },\n      tld: ['.as'],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: 'ASM',\n      numeric: '016',\n    },\n    name: {\n      alt_spellings: ['AS', 'Amerika S\u0101moa', 'Amelika S\u0101moa', 'S\u0101moa Amelika'],\n      demonym: 'American Samoan',\n      native: {\n        endonym: 'American Samoa',\n      },\n      official: 'American Samoa',\n      short: 'American Samoa',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Amerikaans Samoa',\n        [LocaleCode.Albanian]: 'Samoa Amerikane',\n        [LocaleCode.Amharic]: '\u1233\u121E\u12A0\u122D',\n        [LocaleCode.Arabic]: '\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Armenian]: '\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Samoa Amerikana',\n        [LocaleCode.Bashkir]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Basque]: 'Samoa Amerikana',\n        [LocaleCode.Belarusian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Bengali]: '\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Bhutani]: '\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D',\n        [LocaleCode.Bosnian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Breton]: 'Samoa Amerikan',\n        [LocaleCode.Bulgarian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C',\n        [LocaleCode.Catalan]: 'Samoa Americana',\n        [LocaleCode.Chinese]: '\u7F8E\u5C5E\u8428\u6469\u4E9A',\n        [LocaleCode.Croatian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Czech]: 'Americk\u00E1 Samoa',\n        [LocaleCode.Danish]: 'Amerikansk Samoa',\n        [LocaleCode.Dutch]: 'Amerikaans Samoa',\n        [LocaleCode.English]: 'American Samoa',\n        [LocaleCode.Esperanto]: 'Samoa Amerika',\n        [LocaleCode.Estonian]: 'Ameerika Samoa',\n        [LocaleCode.Finnish]: 'Amerikka Samoa',\n        [LocaleCode.French]: 'American Samoa',\n        [LocaleCode.Frisian]: 'Amerikaans Samoa',\n        [LocaleCode.Galician]: 'Samoa Americana',\n        [LocaleCode.Georgian]: '\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0',\n        [LocaleCode.German]: 'Amerikanisch-Samoa',\n        [LocaleCode.Greenlandic]: 'Amerikaans Samoa',\n        [LocaleCode.Greek]: '\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Amerikaans Samoa',\n        [LocaleCode.Hausa]: 'Amerikaans Samoa',\n        [LocaleCode.Hebrew]: '\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Hungarian]: 'Amerikai Szamoa',\n        [LocaleCode.Icelandic]: 'Amerikai Szamoa',\n        [LocaleCode.Igbo]: 'Ikina Amerika',\n        [LocaleCode.Indonesian]: 'Samoa Amerika',\n        [LocaleCode.Irish]: 'Samoa Amerikana',\n        [LocaleCode.Italian]: 'Samoa Americane',\n        [LocaleCode.Japanese]: '\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2',\n        [LocaleCode.Javanese]: 'Samoa Amerika',\n        [LocaleCode.Kannada]: '\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86',\n        [LocaleCode.Kazakh]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB',\n        [LocaleCode.Korean]: '\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544',\n        [LocaleCode.Kurdish]: 'Amerikaans Samoa',\n        [LocaleCode.Kyrgyz]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94',\n        [LocaleCode.Latin]: 'Samoa Amerikana',\n        [LocaleCode.Latvian]: 'Amerikas Samoa',\n        [LocaleCode.Lithuanian]: 'Amerikos Samoa',\n        [LocaleCode.Luxembourgish]: 'Amerikaans Samoa',\n        [LocaleCode.Macedonian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Malagasy]: 'Samoa Amerika',\n        [LocaleCode.Malay]: 'Amerika Samo',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06',\n        [LocaleCode.Maltese]: 'Samoa Amerika',\n        [LocaleCode.Maori]: 'Samoa Amerika',\n        [LocaleCode.Marathi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Mongolian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Nepali]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Norwegian]: 'Amerikansk Samoa',\n        [LocaleCode.Pashto]: '\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Persian]: '\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Polish]: 'Samoa Ameryka\u0144skie',\n        [LocaleCode.Portuguese]: 'Samoa Americana',\n        [LocaleCode.Punjabi]: '\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06',\n        [LocaleCode.Romanian]: 'Samoa americane',\n        [LocaleCode.Russian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Samoan]: 'Samoa Amerika',\n        [LocaleCode.Sanskrit]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Scots]: 'Amerikaans Samoa',\n        [LocaleCode.Serbian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Sesotho]: 'Amerikaans Samoa',\n        [LocaleCode.Shona]: 'Amerikaans Samoa',\n        [LocaleCode.Sindhi]: 'Amerikaans Samoa',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0',\n        [LocaleCode.Slovak]: 'Amerikaans Samoa',\n        [LocaleCode.Slovenian]: 'Amerikaans Samoa',\n        [LocaleCode.Somali]: 'Amerikaans Samoa',\n        [LocaleCode.Spanish]: 'Samoa Americana',\n        [LocaleCode.Sudanese]: 'Amerikaans Samoa',\n        [LocaleCode.Swahili]: 'Amerikaans Samoa',\n        [LocaleCode.Swedish]: 'Amerikansk Samoa',\n        [LocaleCode.Tagalog]: 'Amerikaans Samoa',\n        [LocaleCode.Tajik]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E',\n        [LocaleCode.Thai]: '\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40',\n        [LocaleCode.Turkish]: 'Amerikan Samoas\u0131',\n        [LocaleCode.Ukrainian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Vietnamese]: 'Amerikaans Samoa',\n        [LocaleCode.Welsh]: 'Amerikaans Samoa',\n        [LocaleCode.Xhosa]: 'Amerikaans Samoa',\n        [LocaleCode.Yiddish]: 'Amerikaans Samoa',\n        [LocaleCode.Yoruba]: 'Amerikaans Samoa',\n        [LocaleCode.Zulu]: 'Amerikaans Samoa',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Pago Pago',\n          total: 558000,\n        },\n      },\n      geography: {\n        area: 199,\n        region: Region.Oceania,\n        sub_region: SubRegion.Polynesia,\n      },\n      government: {\n        capital: 'Pago Pago',\n        type: 'Nonmetropolitan Territory of the US',\n      },\n    },\n  },\n  Andorra: {\n    i18n: {\n      calling_codes: [376],\n      currencies: [CurrencyCode.Euro],\n      languages: [LocaleCode.Catalan, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.EuropeAndorra],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Andorra,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF4',\n        emoji_unicode: 'U+1F1E6 U+1F1F4',\n        svg: 'https://www.countryflags.io/ad/flat/64.svg',\n      },\n      tld: ['.ad'],\n    },\n    iso: {\n      alpha2: CountryCode.Andorra,\n      alpha3: 'AND',\n      numeric: '020',\n    },\n    name: {\n      alt_spellings: ['AD', 'Principality of Andorra', \"Principat d'Andorra\"],\n      demonym: 'Andorran',\n      native: {\n        endonym: 'Andorra',\n      },\n      official: 'Principality of Andorra',\n      short: 'Andorra',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Andorra',\n        [LocaleCode.Albanian]: 'Andorra',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584',\n        [LocaleCode.Azerbaijani]: 'Andorra',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Basque]: 'Andorra',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Andora',\n        [LocaleCode.Breton]: 'Andorra',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038',\n        [LocaleCode.Catalan]: 'Andorra',\n        [LocaleCode.Chinese]: '\u5B89\u9053\u5C14',\n        [LocaleCode.Croatian]: 'Andora',\n        [LocaleCode.Czech]: 'Andorra',\n        [LocaleCode.Danish]: 'Andorra',\n        [LocaleCode.Dutch]: 'Andorra',\n        [LocaleCode.English]: 'Andorra',\n        [LocaleCode.Esperanto]: 'Andora',\n        [LocaleCode.Estonian]: 'Andorra',\n        [LocaleCode.Finnish]: 'Andorra',\n        [LocaleCode.French]: 'Andorra',\n        [LocaleCode.Frisian]: 'Andorra',\n        [LocaleCode.Galician]: 'Andorra',\n        [LocaleCode.Georgian]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.German]: 'Andorra',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B4\u03CC\u03C1\u03B1',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Hungarian]: 'Andorra',\n        [LocaleCode.Icelandic]: 'Andorra',\n        [LocaleCode.Igbo]: 'Andorra',\n        [LocaleCode.Indonesian]: 'Andorra',\n        [LocaleCode.Irish]: 'Andorra',\n        [LocaleCode.Italian]: 'Andorra',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30C9\u30E9',\n        [LocaleCode.Javanese]: 'Andorra',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6',\n        [LocaleCode.Korean]: '\uC548\uB3C4\uB77C',\n        [LocaleCode.Kurdish]: 'Andorra',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2',\n        [LocaleCode.Latin]: 'Andorra',\n        [LocaleCode.Latvian]: 'Andora',\n        [LocaleCode.Lithuanian]: 'Andora',\n        [LocaleCode.Luxembourgish]: 'Andorra',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Malagasy]: 'Andorra',\n        [LocaleCode.Malay]: 'Andorra',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D',\n        [LocaleCode.Maltese]: 'Andorra',\n        [LocaleCode.Maori]: 'Andorra',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Norwegian]: 'Andorra',\n        [LocaleCode.Pashto]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Polish]: 'Andora',\n        [LocaleCode.Portuguese]: 'Andorra',\n        [LocaleCode.Punjabi]: '\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E',\n        [LocaleCode.Romanian]: 'Andorra',\n        [LocaleCode.Russian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Samoan]: 'Andorra',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Scots]: 'Andorra',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Sesotho]: 'Andorra',\n        [LocaleCode.Shona]: 'Andorra',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DAF\u0DDA',\n        [LocaleCode.Slovak]: 'Andorra',\n        [LocaleCode.Slovenian]: 'Andora',\n        [LocaleCode.Somali]: 'Andorra',\n        [LocaleCode.Spanish]: 'Andorra',\n        [LocaleCode.Sudanese]: 'Andorra',\n        [LocaleCode.Swahili]: 'Andorra',\n        [LocaleCode.Swedish]: 'Andorra',\n        [LocaleCode.Tagalog]: 'Andorra',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Andora',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Urdu]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Vietnamese]: 'Andorra',\n        [LocaleCode.Welsh]: 'Andorra',\n        [LocaleCode.Xhosa]: 'Andorra',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Yoruba]: 'Andorra',\n        [LocaleCode.Zulu]: 'Andorra',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Andorra la Vella',\n          total: 78000,\n        },\n      },\n      geography: {\n        area: 468,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Andorra la Vella',\n        type: 'Constitutional Monarchy',\n      },\n    },\n  },\n  Angola: {\n    i18n: {\n      calling_codes: [244],\n      currencies: [CurrencyCode.AngolaKwanza],\n      languages: [\n        LocaleCode.Portuguese,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Italian,\n        LocaleCode.German,\n        LocaleCode.English,\n      ],\n      tz: {\n        offsets: [\n          TimezoneOffset.UTC_0,\n          TimezoneOffset.UTC_PLUS_1,\n          TimezoneOffset.UTC_PLUS_2,\n        ],\n        regions: [TimezoneRegions.AfricaLuanda],\n        timezones: [Timezones.WestAfricaTime],\n      },\n    },\n    id: CountryCode.Angola,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ao/flat/64.svg',\n      },\n      tld: ['.ao'],\n    },\n    iso: {\n      alpha2: CountryCode.Angola,\n      alpha3: 'AGO',\n      numeric: '024',\n    },\n    name: {\n      alt_spellings: ['AO', 'Rep\u00FAblica de Angola', '\u0281\u025Bpublika de an'],\n      demonym: 'Angolan',\n      native: {\n        endonym: 'Angola',\n      },\n      official: 'Republic of Angola',\n      short: 'Angola',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Angola',\n        [LocaleCode.Albanian]: 'Ang\u00F2la',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u130E\u120A\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561',\n        [LocaleCode.Azerbaijani]: 'Ang\u0259l',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Basque]: 'Angola',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09B2\u09BE',\n        [LocaleCode.Berber]: 'Angola',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n        [LocaleCode.Bosnian]: 'Angola',\n        [LocaleCode.Breton]: 'Angola',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angola',\n        [LocaleCode.Chinese]: '\u5B89\u54E5\u62C9',\n        [LocaleCode.Croatian]: 'Angola',\n        [LocaleCode.Czech]: 'Angola',\n        [LocaleCode.Danish]: 'Angola',\n        [LocaleCode.Dutch]: 'Angola',\n        [LocaleCode.English]: 'Angola',\n        [LocaleCode.Esperanto]: 'Angolo',\n        [LocaleCode.Estonian]: 'Angola',\n        [LocaleCode.Finnish]: 'Angola',\n        [LocaleCode.French]: 'Angola',\n        [LocaleCode.Frisian]: 'Angola',\n        [LocaleCode.Galician]: 'Angola',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0',\n        [LocaleCode.German]: 'Angola',\n        [LocaleCode.Greenlandic]: 'Angola',\n        [LocaleCode.Greek]: '\u0391\u03B3\u03BA\u03CC\u03BB\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Angola',\n        [LocaleCode.Hausa]: 'Angola',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Angola',\n        [LocaleCode.Icelandic]: 'Angola',\n        [LocaleCode.Igbo]: 'Angola',\n        [LocaleCode.Indonesian]: 'Angola',\n        [LocaleCode.Irish]: 'Angola',\n        [LocaleCode.Italian]: 'Angola',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30B4\u30E9',\n        [LocaleCode.Javanese]: 'Anggol',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F',\n        [LocaleCode.Korean]: '\uC559\uACE8\uB77C',\n        [LocaleCode.Kurdish]: 'Angola',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2',\n        [LocaleCode.Latin]: 'Angola',\n        [LocaleCode.Latvian]: 'Angola',\n        [LocaleCode.Lithuanian]: 'Angola',\n        [LocaleCode.Luxembourgish]: 'Angola',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Malagasy]: 'Angola',\n        [LocaleCode.Malay]: 'Angola',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E',\n        [LocaleCode.Maltese]: 'Angola',\n        [LocaleCode.Maori]: 'Angola',\n        [LocaleCode.Marathi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Angola',\n        [LocaleCode.Pashto]: '\u0627\u0646\u06AB\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Angola',\n        [LocaleCode.Portuguese]: 'Angola',\n        [LocaleCode.Punjabi]: '\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Angole',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Samoan]: 'Angola',\n        [LocaleCode.Sanskrit]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Scots]: 'Angola',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Sesotho]: 'Angola',\n        [LocaleCode.Shona]: 'Angola',\n        [LocaleCode.Sindhi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Angola',\n        [LocaleCode.Slovenian]: 'Angola',\n        [LocaleCode.Somali]: 'Angola',\n        [LocaleCode.Spanish]: 'Angola',\n        [LocaleCode.Sudanese]: 'Angola',\n        [LocaleCode.Swahili]: 'Angola',\n        [LocaleCode.Swedish]: 'Angola',\n        [LocaleCode.Tagalog]: 'Angola',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Angola',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: 'Angola',\n        [LocaleCode.Vietnamese]: 'Angola',\n        [LocaleCode.Xhosa]: 'Angola',\n        [LocaleCode.Welsh]: 'Angola',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Yoruba]: 'Angola',\n        [LocaleCode.Zulu]: 'Angola',\n      },\n    },\n  },\n  Anguilla: {\n    i18n: {\n      calling_codes: [1264],\n      currencies: [\n        CurrencyCode.DominicaDollar,\n        CurrencyCode.EastCaribbeanDollar,\n        CurrencyCode.Euro,\n        CurrencyCode.UnitedStatesDollar,\n        CurrencyCode.BritishPound,\n      ],\n      languages: [LocaleCode.English, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_4],\n        regions: [TimezoneRegions.AmericaAnguilla],\n        timezones: [Timezones.AtlanticStandardTime],\n      },\n    },\n    id: CountryCode.Anguilla,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ai/flat/64.svg',\n      },\n      tld: ['.ai'],\n    },\n    iso: {\n      alpha2: CountryCode.Anguilla,\n      alpha3: 'AIA',\n      numeric: '660',\n    },\n    name: {\n      alt_spellings: ['AI'],\n      demonym: 'Anguillian',\n      native: {\n        endonym: 'Anguilla',\n      },\n      official: 'Anguilla',\n      short: 'Anguilla',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Anguilla',\n        [LocaleCode.Albanian]: 'Anguilla',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1309\u120B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0531\u0576\u0563\u056B\u056C\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Basque]: 'Angila',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Angila',\n        [LocaleCode.Breton]: 'Angila',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angilla',\n        [LocaleCode.Chinese]: '\u5B89\u572D\u62C9',\n        [LocaleCode.Croatian]: 'Angila',\n        [LocaleCode.Czech]: 'Anguilla',\n        [LocaleCode.Danish]: 'Anguilla',\n        [LocaleCode.Dutch]: 'Anguilla',\n        [LocaleCode.English]: 'Anguilla',\n        [LocaleCode.Esperanto]: 'Angila',\n        [LocaleCode.Estonian]: 'Anguilla',\n        [LocaleCode.Finnish]: 'Anguilla',\n        [LocaleCode.French]: 'Anguilla',\n        [LocaleCode.Frisian]: 'Angila',\n        [LocaleCode.Galician]: 'Anguilla',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0',\n        [LocaleCode.German]: 'Anguilla',\n        [LocaleCode.Greenlandic]: 'Anguilla',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Anguilla',\n        [LocaleCode.Hausa]: 'Anguilla',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Anguilla',\n        [LocaleCode.Icelandic]: 'Anguilla',\n        [LocaleCode.Igbo]: 'Anguilla',\n        [LocaleCode.Indonesian]: 'Anguilla',\n        [LocaleCode.Irish]: 'Anguilla',\n        [LocaleCode.Italian]: 'Anguilla',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30AE\u30E9',\n        [LocaleCode.Javanese]: 'Anguilla',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798',\n        [LocaleCode.Korean]: '\uC575\uADC8\uB77C',\n        [LocaleCode.Kurdish]: 'Anguilla',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3',\n        [LocaleCode.Latin]: 'Anguilla',\n        [LocaleCode.Latvian]: 'Anguilla',\n        [LocaleCode.Lithuanian]: 'Anguilla',\n        [LocaleCode.Luxembourgish]: 'Angilla',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Malagasy]: 'Angila',\n        [LocaleCode.Malay]: 'Anguilla',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E',\n        [LocaleCode.Maltese]: 'Anguilla',\n        [LocaleCode.Maori]: 'Anguilla',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Anguilla',\n        [LocaleCode.Pashto]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Anguilla',\n        [LocaleCode.Portuguese]: 'Anguilla',\n        [LocaleCode.Punjabi]: '\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Anguilla',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Samoan]: 'Anguilla',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Scots]: 'Anguilla',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Sesotho]: 'Anguilla',\n        [LocaleCode.Shona]: 'Anguilla',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Anguilla',\n        [LocaleCode.Slovenian]: 'Anguilla',\n        [LocaleCode.Somali]: 'Anguilla',\n        [LocaleCode.Spanish]: 'Anguilla',\n        [LocaleCode.Sudanese]: 'Anguilla',\n        [LocaleCode.Swahili]: 'Anguilla',\n        [LocaleCode.Swedish]: 'Anguilla',\n        [LocaleCode.Tagalog]: 'Anguilla',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Turkish]: 'Anguilla',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Urdu]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Vietnamese]: 'Anguilla',\n        [LocaleCode.Welsh]: 'Anguilla',\n        [LocaleCode.Xhosa]: 'Anguilla',\n        [LocaleCode.Yiddish]: 'Anguilla',\n        [LocaleCode.Yoruba]: 'Anguilla',\n        [LocaleCode.Zulu]: 'Anguilla',\n      },\n    },\n  },\n  Antarctica: {\n    i18n: {\n      calling_codes: [672],\n      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],\n      languages: [\n        LocaleCode.English,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Portuguese,\n        LocaleCode.Italian,\n        LocaleCode.Dutch,\n        LocaleCode.German,\n        LocaleCode.Swedish,\n        LocaleCode.Norwegian,\n        LocaleCode.Danish,\n        LocaleCode.Finnish,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [\n          TimezoneRegions.AntarcticaCasey,\n          TimezoneRegions.AntarcticaDavis,\n          TimezoneRegions.AntarcticaMcMurdo,\n          TimezoneRegions.AntarcticaPalmer,\n          TimezoneRegions.AntarcticaRothera,\n        ],\n        timezones: [\n          Timezones.AtlanticStandardTime,\n          Timezones.CentralTime,\n          Timezones.EasternTime,\n          Timezones.AtlanticStandardTime,\n          Timezones.AzoresStandardTime,\n          Timezones.NewfoundlandStandardTime,\n        ],\n      },\n    },\n    id: CountryCode.Antarctica,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF6',\n        emoji_unicode: 'U+1F1E6 U+1F1F6',\n        svg: 'https://www.countryflags.io/aq/flat/64.svg',\n      },\n      tld: ['.aq'],\n    },\n    iso: {\n      alpha2: CountryCode.Antarctica,\n      alpha3: 'ATA',\n      numeric: '010',\n    },\n    name: {\n      alt_spellings: ['AQ'],\n      demonym: 'Antarctican',\n      native: {\n        endonym: 'Antarctica',\n      },\n      official: 'Antarctica',\n      short: 'Antarctica',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Antarctica',\n        [LocaleCode.Albanian]: 'Antarktika',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1272\u120D\u12AB\u1293',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Basque]: 'Antarktika',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0',\n        [LocaleCode.Berber]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Bosnian]: 'Antarktika',\n        [LocaleCode.Breton]: 'Antarktika',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038',\n        [LocaleCode.Catalan]: 'Ant\u00E0rtida',\n        [LocaleCode.Chinese]: '\u5357\u6781\u6D32',\n        [LocaleCode.Croatian]: 'Antarktika',\n        [LocaleCode.Czech]: 'Antarktida',\n        [LocaleCode.Danish]: 'Antarktis',\n        [LocaleCode.Dutch]: 'Antarctica',\n        [LocaleCode.English]: 'Antarctica',\n        [LocaleCode.Esperanto]: 'Antarktika',\n        [LocaleCode.Estonian]: 'Antarktika',\n        [LocaleCode.Finnish]: 'Antarktis',\n        [LocaleCode.French]: 'Antarctica',\n        [LocaleCode.Frisian]: 'Antarktis',\n        [LocaleCode.Galician]: 'Ant\u00E1rtida',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0',\n        [LocaleCode.German]: 'Antarktis',\n        [LocaleCode.Greenlandic]: 'Antarktis',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE',\n        [LocaleCode.Gujarati]: '\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0',\n        [LocaleCode.Haitian]: 'Antarctica',\n        [LocaleCode.Hausa]: 'Antarktika',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930',\n        [LocaleCode.Hungarian]: 'Antarktika',\n        [LocaleCode.Icelandic]: 'Antarktis',\n        [LocaleCode.Igbo]: 'Antarktika',\n        [LocaleCode.Indonesian]: 'Antarktika',\n        [LocaleCode.Irish]: 'Antarktika',\n        [LocaleCode.Italian]: 'Antartide',\n        [LocaleCode.Japanese]: '\u5357\u6975',\n        [LocaleCode.Javanese]: 'Antarktika',\n        [LocaleCode.Kannada]: '\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799',\n        [LocaleCode.Korean]: '\uC564\uD2F0\uCE74\uD1A0\uB2C9',\n        [LocaleCode.Kurdish]: 'Antarktika',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0',\n        [LocaleCode.Latin]: 'Antarctica',\n        [LocaleCode.Latvian]: 'Antarktika',\n        [LocaleCode.Lithuanian]: 'Antarktis',\n        [LocaleCode.Luxembourgish]: 'Antarktis',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Malagasy]: 'Antarctica',\n        [LocaleCode.Malay]: 'Antarktika',\n        [LocaleCode.Malayalam]: '\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F',\n        [LocaleCode.Maltese]: 'Antarktika',\n        [LocaleCode.Maori]: 'Antarktika',\n        [LocaleCode.Marathi]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Norwegian]: 'Antarktis',\n        [LocaleCode.Pashto]: '\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Polish]: 'Antarktyka',\n        [LocaleCode.Portuguese]: 'Ant\u00E1rtida',\n        [LocaleCode.Punjabi]: '\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E',\n        [LocaleCode.Romanian]: 'Antarctica',\n        [LocaleCode.Russian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Samoan]: 'Antarktika',\n        [LocaleCode.Sanskrit]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Scots]: 'Antarktika',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Sesotho]: 'Antarktika',\n        [LocaleCode.Shona]: 'Antarktika',\n        [LocaleCode.Sindhi]: 'Antarktika',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Antarktika',\n        [LocaleCode.Slovenian]: 'Antarktika',\n        [LocaleCode.Somali]: 'Antarktika',\n        [LocaleCode.Spanish]: 'Ant\u00E1rtida',\n        [LocaleCode.Sudanese]: 'Antarktika',\n        [LocaleCode.Swahili]: 'Antarktika',\n        [LocaleCode.Swedish]: 'Antarktis',\n        [LocaleCode.Tagalog]: 'Antarktika',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E',\n        [LocaleCode.Thai]: '\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72',\n        [LocaleCode.Turkish]: 'Antarktika',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Vietnamese]: '\u0110\u1EA5t Antarktik',\n        [LocaleCode.Welsh]: 'Antarktika',\n        [LocaleCode.Xhosa]: 'Antarktika',\n        [LocaleCode.Yiddish]: 'Antarktika',\n        [LocaleCode.Yoruba]: 'Antarktika',\n        [LocaleCode.Zulu]: 'Antarktika',\n      },\n    },\n  },\n  Armenia: {\n    i18n: {\n      calling_codes: [374],\n      currencies: [CurrencyCode.ArmeniaDram],\n      languages: [LocaleCode.Armenian],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4],\n        regions: [TimezoneRegions.AsiaJakarta],\n        timezones: [Timezones.ArmeniaTime],\n      },\n    },\n    id: CountryCode.Armenia,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF2',\n        emoji_unicode: 'U+1F1E6 U+1F1F2',\n        svg: 'https://www.countryflags.io/am/flat/64.svg',\n      },\n      tld: ['.am'],\n    },\n    iso: {\n      alpha2: CountryCode.Armenia,\n      alpha3: 'ARM',\n      numeric: '051',\n    },\n    name: {\n      alt_spellings: ['AM', 'Hayastan', 'Republic of Armenia', '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576'],\n      demonym: 'Armenian',\n      native: {\n        endonym: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n      },\n      official: 'Republic of Armenia',\n      short: 'Armenia',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Armeni\u00EB',\n        [LocaleCode.Albanian]: 'Armenia',\n        [LocaleCode.Amharic]: '\u12A0\u121B\u122D\u129B',\n        [LocaleCode.Arabic]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Arm\u00E9nia',\n        [LocaleCode.Belarusian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF',\n        [LocaleCode.Berber]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42',\n        [LocaleCode.Bosnian]: 'Armenija',\n        [LocaleCode.Breton]: 'Armeni\u00EB',\n        [LocaleCode.Bulgarian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1010\u102D\u1010\u1039',\n        [LocaleCode.Catalan]: 'Arm\u00E8nia',\n        [LocaleCode.Chinese]: '\u4E9A\u7F8E\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Armenija',\n        [LocaleCode.Czech]: 'Arm\u00E9nie',\n        [LocaleCode.Danish]: 'Armenien',\n        [LocaleCode.Dutch]: 'Armeni\u00EB',\n        [LocaleCode.English]: 'Armenia',\n        [LocaleCode.Esperanto]: 'Armenia',\n        [LocaleCode.Estonian]: 'Armeenia',\n        [LocaleCode.Finnish]: 'Armenia',\n        [LocaleCode.French]: 'Armenia',\n        [LocaleCode.Frisian]: 'Armeenia',\n        [LocaleCode.Galician]: 'Arm\u00E9nia',\n        [LocaleCode.Georgian]: '\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8',\n        [LocaleCode.German]: 'Armenien',\n        [LocaleCode.Greenlandic]: 'Armenia',\n        [LocaleCode.Greek]: '\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF',\n        [LocaleCode.Haitian]: 'Armenia',\n        [LocaleCode.Hausa]: 'Armenia',\n        [LocaleCode.Hebrew]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: '\u00D6rm\u00E9nyorsz\u00E1g',\n        [LocaleCode.Icelandic]: 'Armenia',\n        [LocaleCode.Igbo]: 'Armenia',\n        [LocaleCode.Indonesian]: 'Armenia',\n        [LocaleCode.Irish]: 'Armenia',\n        [LocaleCode.Italian]: 'Armenia',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30E1\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Armenia',\n        [LocaleCode.Kannada]: '\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8',\n        [LocaleCode.Korean]: '\uC544\uB974\uBA54\uB2C8\uC544',\n        [LocaleCode.Kurdish]: 'Armenia',\n        [LocaleCode.Kyrgyz]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2',\n        [LocaleCode.Latin]: 'Armenia',\n        [LocaleCode.Latvian]: 'Armeenia',\n        [LocaleCode.Lithuanian]: 'Arm\u0117nija',\n        [LocaleCode.Luxembourgish]: 'Armenien',\n        [LocaleCode.Macedonian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Armenia',\n        [LocaleCode.Malay]: 'Armenia',\n        [LocaleCode.Malayalam]: '\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F',\n        [LocaleCode.Maltese]: 'Armenia',\n        [LocaleCode.Maori]: 'Armenia',\n        [LocaleCode.Marathi]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Mongolian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Norwegian]: 'Armenia',\n        [LocaleCode.Pashto]: '\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627',\n        [LocaleCode.Persian]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Armenia',\n        [LocaleCode.Portuguese]: 'Armenia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40',\n        [LocaleCode.Romanian]: 'Armenia',\n        [LocaleCode.Russian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Armenia',\n        [LocaleCode.Sanskrit]: 'Armenia',\n        [LocaleCode.Scots]: 'Armenia',\n        [LocaleCode.Serbian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Armenia',\n        [LocaleCode.Shona]: 'Armenia',\n        [LocaleCode.Sindhi]: 'Armenia',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2',\n        [LocaleCode.Slovak]: 'Armenia',\n        [LocaleCode.Slovenian]: 'Armenija',\n        [LocaleCode.Somali]: 'Armenia',\n        [LocaleCode.Spanish]: 'Armenia',\n        [LocaleCode.Sudanese]: 'Armenia',\n        [LocaleCode.Swahili]: 'Armenia',\n        [LocaleCode.Swedish]: 'Armenien',\n        [LocaleCode.Tagalog]: 'Armenia',\n        [LocaleCode.Tajik]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D',\n        [LocaleCode.Turkish]: 'Ermenistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0440\u043C\u0435\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Armenia',\n        [LocaleCode.Welsh]: 'Armenia',\n        [LocaleCode.Xhosa]: 'Armenia',\n        [LocaleCode.Yiddish]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Armenia',\n        [LocaleCode.Zulu]: 'Armenia',\n      },\n    },\n  },\n\n  SomeCountry: {\n    i18n: {\n      calling_codes: [],\n      currencies: [],\n      languages: [],\n      tz: {\n        offsets: [],\n        regions: [],\n        timezones: [],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '',\n        emoji_unicode: '',\n        svg: '',\n      },\n      tld: [],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: '',\n      numeric: '',\n    },\n    name: {\n      alt_spellings: [],\n      demonym: '',\n      native: {\n        endonym: '',\n      },\n      official: '',\n      short: '',\n      translations: {\n        [LocaleCode.Afrikaans]: '',\n        [LocaleCode.Albanian]: '',\n        [LocaleCode.Amharic]: '',\n        [LocaleCode.Arabic]: '',\n        [LocaleCode.Armenian]: '',\n        [LocaleCode.Azerbaijani]: '',\n        [LocaleCode.Bashkir]: '',\n        [LocaleCode.Basque]: '',\n        [LocaleCode.Belarusian]: '',\n        [LocaleCode.Bengali]: '',\n        [LocaleCode.Berber]: '',\n        [LocaleCode.Bhutani]: '',\n        [LocaleCode.Bosnian]: '',\n        [LocaleCode.Breton]: '',\n        [LocaleCode.Bulgarian]: '',\n        [LocaleCode.Burmese]: '',\n        [LocaleCode.Catalan]: '',\n        [LocaleCode.Chinese]: '',\n        [LocaleCode.Croatian]: '',\n        [LocaleCode.Czech]: '',\n        [LocaleCode.Danish]: '',\n        [LocaleCode.Dutch]: '',\n        [LocaleCode.English]: '',\n        [LocaleCode.Esperanto]: '',\n        [LocaleCode.Estonian]: '',\n        [LocaleCode.Finnish]: '',\n        [LocaleCode.French]: '',\n        [LocaleCode.Frisian]: '',\n        [LocaleCode.Galician]: '',\n        [LocaleCode.Georgian]: '',\n        [LocaleCode.German]: '',\n        [LocaleCode.Greenlandic]: '',\n        [LocaleCode.Greek]: '',\n        [LocaleCode.Gujarati]: '',\n        [LocaleCode.Haitian]: '',\n        [LocaleCode.Hausa]: '',\n        [LocaleCode.Hebrew]: '',\n        [LocaleCode.Hindi]: '',\n        [LocaleCode.Hungarian]: '',\n        [LocaleCode.Icelandic]: '',\n        [LocaleCode.Igbo]: '',\n        [LocaleCode.Indonesian]: '',\n        [LocaleCode.Irish]: '',\n        [LocaleCode.Italian]: '',\n        [LocaleCode.Japanese]: '',\n        [LocaleCode.Javanese]: '',\n        [LocaleCode.Kannada]: '',\n        [LocaleCode.Kazakh]: '',\n        [LocaleCode.Khmer]: '',\n        [LocaleCode.Korean]: '',\n        [LocaleCode.Kurdish]: '',\n        [LocaleCode.Kyrgyz]: '',\n        [LocaleCode.Lao]: '',\n        [LocaleCode.Latin]: '',\n        [LocaleCode.Latvian]: '',\n        [LocaleCode.Lithuanian]: '',\n        [LocaleCode.Luxembourgish]: '',\n        [LocaleCode.Macedonian]: '',\n        [LocaleCode.Malagasy]: '',\n        [LocaleCode.Malay]: '',\n        [LocaleCode.Malayalam]: '',\n        [LocaleCode.Maltese]: '',\n        [LocaleCode.Maori]: '',\n        [LocaleCode.Marathi]: '',\n        [LocaleCode.Mongolian]: '',\n        [LocaleCode.Nepali]: '',\n        [LocaleCode.Norwegian]: '',\n        [LocaleCode.Pashto]: '',\n        [LocaleCode.Persian]: '',\n        [LocaleCode.Polish]: '',\n        [LocaleCode.Portuguese]: '',\n        [LocaleCode.Punjabi]: '',\n        [LocaleCode.Romanian]: '',\n        [LocaleCode.Russian]: '',\n        [LocaleCode.Samoan]: '',\n        [LocaleCode.Sanskrit]: '',\n        [LocaleCode.Scots]: '',\n        [LocaleCode.Serbian]: '',\n        [LocaleCode.Sesotho]: '',\n        [LocaleCode.Shona]: '',\n        [LocaleCode.Sindhi]: '',\n        [LocaleCode.Sinhala]: '',\n        [LocaleCode.Slovak]: '',\n        [LocaleCode.Slovenian]: '',\n        [LocaleCode.Somali]: '',\n        [LocaleCode.Spanish]: '',\n        [LocaleCode.Sudanese]: '',\n        [LocaleCode.Swahili]: '',\n        [LocaleCode.Swedish]: '',\n        [LocaleCode.Tagalog]: '',\n        [LocaleCode.Tajik]: '',\n        [LocaleCode.Tamil]: '',\n        [LocaleCode.Tatar]: '',\n        [LocaleCode.Telugu]: '',\n        [LocaleCode.Thai]: '',\n        [LocaleCode.Tibetan]: '',\n        [LocaleCode.Turkish]: '',\n        [LocaleCode.Ukrainian]: '',\n        [LocaleCode.Urdu]: '',\n        [LocaleCode.Uzbek]: '',\n        [LocaleCode.Vietnamese]: '',\n        [LocaleCode.Welsh]: '',\n        [LocaleCode.Xhosa]: '',\n        [LocaleCode.Yiddish]: '',\n        [LocaleCode.Yoruba]: '',\n        [LocaleCode.Zulu]: '',\n      },\n    },\n  },\n};\n", "import { LanguageCode } from '../language/index.js';\nimport { LocaleCode } from './index.js';\nimport { Locale } from '.';\nimport { CountryCode } from './country.js';\n\nexport const Afrikaans: Locale = {\n  id: LocaleCode.Afrikaans,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans',\n  native_name: 'Afrikaans',\n  rtl: false,\n};\n\nexport const AfrikaansSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.AfrikaansSouthAfrica,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans (South Africa)',\n  native_name: 'Afrikaans (Suid-Afrika)',\n  rtl: false,\n};\n\nexport const Albanian: Locale = {\n  id: LocaleCode.Albanian,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian',\n  native_name: 'Shqip',\n  rtl: false,\n};\n\nexport const AlbanianAlbania: Locale = {\n  country: {\n    code: CountryCode.Albania,\n    name: 'Albania',\n    native: 'Shqip\u00EBria',\n  },\n  id: LocaleCode.AlbanianAlbania,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian (Albania)',\n  native_name: 'Shqip (Shqip\u00EBria)',\n  rtl: false,\n};\n\nexport const Amharic: Locale = {\n  id: LocaleCode.Amharic,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic',\n  native_name: '\u12A0\u121B\u122D\u129B',\n  rtl: false,\n};\n\nexport const AmharicEthiopia: Locale = {\n  country: {\n    code: CountryCode.Ethiopia,\n    name: 'Ethiopia',\n    native: '\u12A2\u1275\u12EE\u1335\u12EB',\n  },\n  id: LocaleCode.AmharicEthiopia,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic (Ethiopia)',\n  native_name: '\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)',\n  rtl: false,\n};\n\nexport const Arabic: Locale = {\n  id: LocaleCode.Arabic,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  rtl: true,\n};\n\nexport const ArabicAlgeria: Locale = {\n  country: {\n    code: CountryCode.Algeria,\n    name: 'Algeria',\n    native: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n  },\n  id: LocaleCode.ArabicAlgeria,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Algeria)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)',\n  rtl: true,\n};\n\nexport const ArabicBahrain: Locale = {\n  country: {\n    code: CountryCode.Bahrain,\n    name: 'Bahrain',\n    native: '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',\n  },\n  id: LocaleCode.ArabicBahrain,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Bahrain)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)',\n  rtl: true,\n};\n\nexport const ArabicEgypt: Locale = {\n  country: {\n    code: CountryCode.Egypt,\n    name: 'Egypt',\n    native: '\u0645\u0635\u0631',\n  },\n  id: LocaleCode.ArabicEgypt,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Egypt)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)',\n  rtl: true,\n};\n\nexport const ArabicIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.ArabicIraq,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Iraq)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: true,\n};\n\nexport const ArabicJordan: Locale = {\n  country: {\n    code: CountryCode.Jordan,\n    name: 'Jordan',\n    native: '\u0627\u0644\u0623\u0631\u062F\u0646',\n  },\n  id: LocaleCode.ArabicJordan,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Jordan)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)',\n  rtl: true,\n};\n\nexport const ArabicKuwait: Locale = {\n  country: {\n    code: CountryCode.Kuwait,\n    name: 'Kuwait',\n    native: '\u0627\u0644\u0643\u0648\u064A\u062A',\n  },\n\n  id: LocaleCode.ArabicKuwait,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Kuwait)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)',\n  rtl: true,\n};\n\nexport const ArabicLebanon: Locale = {\n  country: {\n    code: CountryCode.Lebanon,\n    name: 'Lebanon',\n    native: '\u0644\u0628\u0646\u0627\u0646',\n  },\n  id: LocaleCode.ArabicLebanon,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Lebanon)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicLibya: Locale = {\n  country: {\n    code: CountryCode.Libya,\n    name: 'Libya',\n    native: '\u0644\u064A\u0628\u064A\u0627',\n  },\n  id: LocaleCode.ArabicLibya,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Libya)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)',\n  rtl: true,\n};\n\nexport const ArabicMorocco: Locale = {\n  country: {\n    code: CountryCode.Morocco,\n    name: 'Morocco',\n    native: '\u0627\u0644\u0645\u063A\u0631\u0628',\n  },\n  id: LocaleCode.ArabicMorocco,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Morocco)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)',\n  rtl: true,\n};\n\nexport const ArabicOman: Locale = {\n  country: {\n    code: CountryCode.Oman,\n    name: 'Oman',\n    native: '\u0639\u0645\u0627\u0646',\n  },\n  id: LocaleCode.ArabicOman,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Oman)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicQatar: Locale = {\n  country: {\n    code: CountryCode.Qatar,\n    name: 'Qatar',\n    native: '\u0642\u0637\u0631',\n  },\n  id: LocaleCode.ArabicQatar,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Qatar)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)',\n  rtl: true,\n};\n\nexport const ArabicSaudiArabia: Locale = {\n  country: {\n    code: CountryCode.SaudiArabia,\n    name: 'Saudi Arabia',\n    native: '\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n  },\n  id: LocaleCode.ArabicSaudiArabia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Saudi Arabia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)',\n  rtl: true,\n};\n\nexport const ArabicTunisia: Locale = {\n  country: {\n    code: CountryCode.Tunisia,\n    name: 'Tunisia',\n    native: '\u062A\u0648\u0646\u0633',\n  },\n  id: LocaleCode.ArabicTunisia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Tunisia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)',\n  rtl: true,\n};\n\nexport const ArabicUnitedArabEmirates: Locale = {\n  country: {\n    code: CountryCode.UnitedArabEmirates,\n    name: 'United Arab Emirates',\n    native: '\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n  },\n  id: LocaleCode.ArabicUnitedArabEmirates,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (United Arab Emirates)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)',\n  rtl: true,\n};\n\nexport const ArabicYemen: Locale = {\n  country: {\n    code: CountryCode.Yemen,\n    name: 'Yemen',\n    native: '\u0627\u0644\u064A\u0645\u0646',\n  },\n  id: LocaleCode.ArabicYemen,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Yemen)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)',\n  rtl: true,\n};\n\nexport const Armenian: Locale = {\n  id: LocaleCode.Armenian,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian',\n  native_name: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  rtl: false,\n};\n\nexport const ArmenianArmenia: Locale = {\n  country: { code: CountryCode.Armenia, name: 'Armenia', native: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576' },\n  id: LocaleCode.ArmenianArmenia,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian (Armenia)',\n  native_name: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)',\n  rtl: false,\n};\n\nexport const Azerbaijani = {\n  id: LocaleCode.Azerbaijani,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azeribaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri',\n  native_name: 'Az\u0259rbaycan',\n  rtl: false,\n};\n\nexport const AzerbaijaniAzerbaijan: Locale = {\n  country: {\n    code: CountryCode.Azerbaijan,\n    name: 'Azerbaijan',\n    native: 'Az\u0259rbaycan',\n  },\n  id: LocaleCode.AzerbaijaniAzerbaijan,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azerbaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri (Azerbaijan)',\n  native_name: 'Az\u0259rbaycan (Az\u0259rbaycan)',\n  rtl: false,\n};\n\nexport const Basque: Locale = {\n  id: LocaleCode.Basque,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque',\n  native_name: 'Euskara',\n  rtl: false,\n};\n\nexport const BasqueSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.BasqueSpain,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque (Spain)',\n  native_name: 'Euskara (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Belarusian: Locale = {\n  id: LocaleCode.Belarusian,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian',\n  native_name: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  rtl: false,\n};\n\nexport const BelarusianBelarus: Locale = {\n  country: {\n    code: CountryCode.Belarus,\n    name: 'Belarus',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C',\n  },\n  id: LocaleCode.BelarusianBelarus,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian (Belarus)',\n  native_name: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)',\n  rtl: false,\n};\n\nexport const Bengali: Locale = {\n  id: LocaleCode.Bengali,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  rtl: false,\n};\n\nexport const BengaliBangladesh: Locale = {\n  country: {\n    code: CountryCode.Bangladesh,\n    name: 'Bangladesh',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6',\n  },\n  id: LocaleCode.BengaliBangladesh,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali (Bangladesh)',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)',\n  rtl: false,\n};\n\nexport const Bhutani: Locale = {\n  id: LocaleCode.Bhutani,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const BhutaniBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n  },\n  id: LocaleCode.BhutaniBhutan,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)',\n  rtl: false,\n};\n\nexport const Bulgarian: Locale = {\n  id: LocaleCode.Bulgarian,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian',\n  native_name: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const BulgarianBulgaria: Locale = {\n  country: {\n    code: CountryCode.Bulgaria,\n    name: 'Bulgaria',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F',\n  },\n  id: LocaleCode.BulgarianBulgaria,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian (Bulgaria)',\n  native_name: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)',\n  rtl: false,\n};\n\nexport const Burmese: Locale = {\n  id: LocaleCode.Burmese,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese',\n  native_name: '\u1017\u1019\u102C\u1005\u102C',\n  rtl: false,\n};\n\nexport const BurmeseMyanmar: Locale = {\n  country: {\n    code: CountryCode.Myanmar,\n    name: 'Myanmar',\n    native: '\u1019\u103C\u1014\u103A\u1019\u102C',\n  },\n  id: LocaleCode.BurmeseMyanmar,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese (Myanmar)',\n  native_name: '\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)',\n  rtl: false,\n};\n\nexport const Cantonese: Locale = {\n  id: LocaleCode.Cantonese,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese',\n  native_name: '\u5EE3\u6771\u8A71',\n  rtl: false,\n};\n\nexport const CantoneseHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.CantoneseHongKong,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese (Hong Kong)',\n  native_name: '\u5EE3\u6771\u8A71 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const Catalan: Locale = {\n  id: LocaleCode.Catalan,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan',\n  native_name: 'Catal\u00E0',\n  rtl: false,\n};\n\nexport const CatalanSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.CatalanSpain,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan (Spain)',\n  native_name: 'Catal\u00E0 (Espanya)',\n  rtl: false,\n};\n\nexport const ChineseSimplified: Locale = {\n  id: LocaleCode.ChineseSimplified,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.ChineseSimplifiedChina,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/China)',\n  native_name: '\u4E2D\u6587 (\u4E2D\u56FD)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseSimplifiedHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseSimplifiedMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseSimplifiedSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const ChineseTraditional: Locale = {\n  id: LocaleCode.ChineseTraditional,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Traditional)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseTraditionalHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseTraditionalHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Hong Kong)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseTraditionalMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Macau)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseTraditionalSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Singapore)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const Croatian: Locale = {\n  id: LocaleCode.Croatian,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian',\n  native_name: 'Hrvatski',\n  rtl: false,\n};\n\nexport const CroatianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.CroatianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Bosnia and Herzegovina)',\n  native_name: 'Hrvatski (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const CroatianCroatia: Locale = {\n  country: {\n    code: CountryCode.Croatia,\n    name: 'Croatia',\n    native: 'Hrvatska',\n  },\n  id: LocaleCode.CroatianCroatia,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Croatia)',\n  native_name: 'Hrvatski (Hrvatska)',\n  rtl: false,\n};\n\nexport const Czech: Locale = {\n  id: LocaleCode.Czech,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech',\n  native_name: '\u010Ce\u0161tina',\n  rtl: false,\n};\n\nexport const CzechCzechRepublic: Locale = {\n  country: {\n    code: CountryCode.CzechRepublic,\n    name: 'Czech Republic',\n    native: '\u010Cesk\u00E1 republika',\n  },\n  id: LocaleCode.CzechCzechRepublic,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech (Czech Republic)',\n  native_name: '\u010Ce\u0161tina (\u010Cesk\u00E1 republika)',\n  rtl: false,\n};\n\nexport const Danish: Locale = {\n  id: LocaleCode.Danish,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish',\n  native_name: 'Dansk',\n  rtl: false,\n};\n\nexport const DanishDenmark: Locale = {\n  country: {\n    code: CountryCode.Denmark,\n    name: 'Denmark',\n    native: 'Danmark',\n  },\n  id: LocaleCode.DanishDenmark,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish (Denmark)',\n  native_name: 'Dansk (Danmark)',\n  rtl: false,\n};\n\nexport const Divehi: Locale = {\n  id: LocaleCode.Divehi,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  rtl: true,\n};\n\nexport const DivehiMaldives: Locale = {\n  country: {\n    code: CountryCode.Maldives,\n    name: 'Maldives',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC',\n  },\n  id: LocaleCode.DivehiMaldives,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi (Maldives)',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)',\n  rtl: true,\n};\n\nexport const Dutch: Locale = {\n  id: LocaleCode.Dutch,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch',\n  native_name: 'Nederlands',\n  rtl: false,\n};\n\nexport const DutchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.DutchBelgium,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Belgium)',\n  native_name: 'Nederlands (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const DutchNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.DutchNetherlands,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Netherlands)',\n  native_name: 'Nederlands (Nederland)',\n  rtl: false,\n};\n\nexport const English: Locale = {\n  id: LocaleCode.English,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English',\n  native_name: 'English',\n  rtl: false,\n};\n\nexport const EnglishAustralia: Locale = {\n  country: {\n    code: CountryCode.Australia,\n    name: 'Australia',\n    native: 'Australia',\n  },\n  id: LocaleCode.EnglishAustralia,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Australia)',\n  native_name: 'English (Australia)',\n  rtl: false,\n};\n\nexport const EnglishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.EnglishBelgium,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Belgium)',\n  native_name: 'English (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const EnglishCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.EnglishCanada,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Canada)',\n  native_name: 'English (Canada)',\n  rtl: false,\n};\n\nexport const EnglishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.EnglishIreland,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Ireland)',\n  native_name: 'English (\u00C9ire)',\n  rtl: false,\n};\n\nexport const EnglishJamaica: Locale = {\n  country: {\n    code: CountryCode.Jamaica,\n    name: 'Jamaica',\n    native: 'Jamaica',\n  },\n  id: LocaleCode.EnglishJamaica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Jamaica)',\n  native_name: 'English (Jamaica)',\n  rtl: false,\n};\n\nexport const EnglishNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.EnglishNewZealand,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (New Zealand)',\n  native_name: 'English (New Zealand)',\n  rtl: false,\n};\n\nexport const EnglishPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Philippines',\n  },\n  id: LocaleCode.EnglishPhilippines,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Philippines)',\n  native_name: 'English (Philippines)',\n  rtl: false,\n};\n\nexport const EnglishSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.EnglishSingapore,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Singapore)',\n  native_name: 'English (Singapore)',\n  rtl: false,\n};\n\nexport const EnglishSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.EnglishSouthAfrica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (South Africa)',\n  native_name: 'English (South Africa)',\n  rtl: false,\n};\n\nexport const EnglishTrinidadAndTobago: Locale = {\n  country: {\n    code: CountryCode.TrinidadAndTobago,\n    name: 'Trinidad and Tobago',\n    native: 'Trinidad and Tobago',\n  },\n  id: LocaleCode.EnglishTrinidadAndTobago,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Trinidad and Tobago)',\n  native_name: 'English (Trinidad and Tobago)',\n  rtl: false,\n};\n\nexport const EnglishUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.EnglishUnitedKingdom,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United Kingdom)',\n  native_name: 'English (United Kingdom)',\n  rtl: false,\n};\n\nexport const EnglishUnitedStates: Locale = {\n  country: {\n    code: CountryCode.UnitedStates,\n    name: 'United States',\n    native: 'United States',\n  },\n  id: LocaleCode.EnglishUnitedStates,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United States)',\n  native_name: 'English (United States)',\n  rtl: false,\n};\n\nexport const EnglishZimbabwe: Locale = {\n  country: {\n    code: CountryCode.Zimbabwe,\n    name: 'Zimbabwe',\n    native: 'Zimbabwe',\n  },\n  id: LocaleCode.EnglishZimbabwe,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Zimbabwe)',\n  native_name: 'English (Zimbabwe)',\n  rtl: false,\n};\n\nexport const Esperanto: Locale = {\n  id: LocaleCode.Esperanto,\n  language: {\n    code: LanguageCode.Esperanto,\n    name: 'Esperanto',\n    native: 'Esperanto',\n  },\n  name: 'Esperanto',\n  native_name: 'Esperanto',\n  rtl: false,\n};\n\nexport const Estonian: Locale = {\n  id: LocaleCode.Estonian,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian',\n  native_name: 'Eesti',\n  rtl: false,\n};\n\nexport const EstonianEstonia: Locale = {\n  country: {\n    code: CountryCode.Estonia,\n    name: 'Estonia',\n    native: 'Eesti',\n  },\n  id: LocaleCode.EstonianEstonia,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian (Estonia)',\n  native_name: 'Eesti (Eesti)',\n  rtl: false,\n};\n\nexport const Faroese: Locale = {\n  id: LocaleCode.Faroese,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese',\n  native_name: 'F\u00F8royskt',\n  rtl: false,\n};\n\nexport const FaroeseFaroeIslands: Locale = {\n  country: {\n    code: CountryCode.FaroeIslands,\n    name: 'Faroe Islands',\n    native: 'F\u00F8royar',\n  },\n  id: LocaleCode.FaroeseFaroeIslands,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese (Faroe Islands)',\n  native_name: 'F\u00F8royskt (F\u00F8royar)',\n  rtl: false,\n};\n\nexport const Farsi: Locale = {\n  id: LocaleCode.Farsi,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const FarsiIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.FarsiIran,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Filipino: Locale = {\n  id: LocaleCode.Filipino,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino',\n  native_name: 'Filipino',\n  rtl: false,\n};\n\nexport const FilipinoPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.FilipinoPhilippines,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino (Philippines)',\n  native_name: 'Filipino (Pilipinas)',\n  rtl: false,\n};\n\nexport const Finnish: Locale = {\n  id: LocaleCode.Finnish,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish',\n  native_name: 'Suomi',\n  rtl: false,\n};\n\nexport const FinnishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.FinnishFinland,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish (Finland)',\n  native_name: 'Suomi (Suomi)',\n  rtl: false,\n};\n\nexport const French: Locale = {\n  id: LocaleCode.French,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French',\n  native_name: 'Fran\u00E7ais',\n  rtl: false,\n};\n\nexport const FrenchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgique',\n  },\n  id: LocaleCode.FrenchBelgium,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Belgium)',\n  native_name: 'Fran\u00E7ais (Belgique)',\n  rtl: false,\n};\n\nexport const FrenchCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.FrenchCanada,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Canada)',\n  native_name: 'Fran\u00E7ais (Canada)',\n  rtl: false,\n};\n\nexport const FrenchFrance: Locale = {\n  country: {\n    code: CountryCode.France,\n    name: 'France',\n    native: 'France',\n  },\n  id: LocaleCode.FrenchFrance,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (France)',\n  native_name: 'Fran\u00E7ais (France)',\n  rtl: false,\n};\n\nexport const FrenchLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.FrenchLuxembourg,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Luxembourg)',\n  native_name: 'Fran\u00E7ais (Luxembourg)',\n  rtl: false,\n};\n\nexport const FrenchMonaco: Locale = {\n  country: {\n    code: CountryCode.Monaco,\n    name: 'Monaco',\n    native: 'Monaco',\n  },\n  id: LocaleCode.FrenchMonaco,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Monaco)',\n  native_name: 'Fran\u00E7ais (Monaco)',\n  rtl: false,\n};\n\nexport const FrenchReunion: Locale = {\n  country: {\n    code: CountryCode.Reunion,\n    name: 'Reunion',\n    native: 'La R\u00E9union',\n  },\n  id: LocaleCode.FrenchReunion,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Reunion)',\n  native_name: 'Fran\u00E7ais (La R\u00E9union)',\n  rtl: false,\n};\n\nexport const FrenchSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.FrenchSwitzerland,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Switzerland)',\n  native_name: 'Fran\u00E7ais (Suisse)',\n  rtl: false,\n};\n\nexport const Frisian: Locale = {\n  id: LocaleCode.Frisian,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian',\n  native_name: 'Frysk',\n  rtl: false,\n};\n\nexport const FrisianNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.FrisianNetherlands,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian (Netherlands)',\n  native_name: 'Frysk (Nederland)',\n  rtl: false,\n};\n\nexport const Galician: Locale = {\n  id: LocaleCode.Galician,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician',\n  native_name: 'Galego',\n  rtl: false,\n};\n\nexport const GalicianSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.GalicianSpain,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician (Spain)',\n  native_name: 'Galego (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Georgian: Locale = {\n  id: LocaleCode.Georgian,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  rtl: false,\n};\n\nexport const GeorgianGeorgia: Locale = {\n  country: {\n    code: CountryCode.Georgia,\n    name: 'Georgia',\n    native: '\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD',\n  },\n  id: LocaleCode.GeorgianGeorgia,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian (Georgia)',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)',\n  rtl: false,\n};\n\nexport const German: Locale = {\n  id: LocaleCode.German,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German',\n  native_name: 'Deutsch',\n  rtl: false,\n};\n\nexport const GermanAustria: Locale = {\n  country: {\n    code: CountryCode.Austria,\n    name: 'Austria',\n    native: '\u00D6sterreich',\n  },\n  id: LocaleCode.GermanAustria,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Austria)',\n  native_name: 'Deutsch (\u00D6sterreich)',\n  rtl: false,\n};\n\nexport const GermanBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.GermanBelgium,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Belgium)',\n  native_name: 'Deutsch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const GermanSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.GermanSwitzerland,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Switzerland)',\n  native_name: 'Deutsch (Suisse)',\n  rtl: false,\n};\n\nexport const GermanLiechtenstein: Locale = {\n  country: {\n    code: CountryCode.Liechtenstein,\n    name: 'Liechtenstein',\n    native: 'Liechtenstein',\n  },\n  id: LocaleCode.GermanLiechtenstein,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Liechtenstein)',\n  native_name: 'Deutsch (Liechtenstein)',\n  rtl: false,\n};\n\nexport const GermanLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.GermanLuxembourg,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Luxembourg)',\n  native_name: 'Deutsch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Greek: Locale = {\n  id: LocaleCode.Greek,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  rtl: false,\n};\n\nexport const GreekGreece: Locale = {\n  country: {\n    code: CountryCode.Greece,\n    name: 'Greece',\n    native: '\u0395\u03BB\u03BB\u03AC\u03B4\u03B1',\n  },\n  id: LocaleCode.GreekGreece,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek (Greece)',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)',\n  rtl: false,\n};\n\nexport const Greenlandic: Locale = {\n  id: LocaleCode.Greenlandic,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic',\n  native_name: 'Kalaallisut',\n  rtl: false,\n};\n\nexport const GreenlandicGreenland: Locale = {\n  country: {\n    code: CountryCode.Greenland,\n    name: 'Greenland',\n    native: 'Kalaallit Nunaat',\n  },\n  id: LocaleCode.GreenlandicGreenland,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic (Greenland)',\n  native_name: 'Kalaallisut (Kalaallit Nunaat)',\n  rtl: false,\n};\n\nexport const Gujarati: Locale = {\n  id: LocaleCode.Gujarati,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  rtl: false,\n};\n\nexport const GujaratiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.GujaratiIndia,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati (India)',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Hausa: Locale = {\n  id: LocaleCode.Hausa,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  rtl: false,\n};\n\nexport const HausaGhana: Locale = {\n  country: {\n    code: CountryCode.Ghana,\n    name: 'Ghana',\n    native: 'Ghana',\n  },\n  id: LocaleCode.HausaGhana,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Ghana)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)',\n  rtl: false,\n};\n\nexport const HausaNiger: Locale = {\n  country: {\n    code: CountryCode.Niger,\n    name: 'Niger',\n    native: 'Niger',\n  },\n  id: LocaleCode.HausaNiger,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Niger)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Niger)',\n  rtl: false,\n};\n\nexport const HausaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.HausaNigeria,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Nigeria)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)',\n  rtl: false,\n};\n\nexport const Hebrew: Locale = {\n  id: LocaleCode.Hebrew,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  },\n  name: 'Hebrew',\n  native_name: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  rtl: true,\n};\n\n// TODO: Figure this out since Github is censoring it\nexport const HebrewIsrael: Locale = {\n  country: {\n    code: CountryCode.Israel,\n    name: 'Hebrew',\n    native: '',\n  },\n  id: LocaleCode.HebrewIsrael,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '',\n  },\n  name: 'Hebrew (Israel)',\n  native_name: '',\n  rtl: true,\n};\n\nexport const Hindi: Locale = {\n  id: LocaleCode.Hindi,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  },\n  name: 'Hindi',\n  native_name: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  rtl: false,\n};\n\nexport const HindiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.HindiIndia,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  },\n  name: 'Hindi (India)',\n  native_name: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  rtl: false,\n};\n\nexport const Hungarian: Locale = {\n  id: LocaleCode.Hungarian,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian',\n  native_name: 'Magyar',\n  rtl: false,\n};\n\nexport const HungarianHungary: Locale = {\n  country: {\n    code: CountryCode.Hungary,\n    name: 'Hungary',\n    native: 'Magyarorsz\u00E1g',\n  },\n  id: LocaleCode.HungarianHungary,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian (Hungary)',\n  native_name: 'Magyar (Magyarorsz\u00E1g)',\n  rtl: false,\n};\n\nexport const Icelandic: Locale = {\n  id: LocaleCode.Icelandic,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic',\n  native_name: '\u00CDslenska',\n  rtl: false,\n};\n\nexport const IcelandicIceland: Locale = {\n  country: {\n    code: CountryCode.Iceland,\n    name: 'Iceland',\n    native: '\u00CDsland',\n  },\n  id: LocaleCode.IcelandicIceland,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic (Iceland)',\n  native_name: '\u00CDslenska (\u00CDsland)',\n  rtl: false,\n};\n\nexport const Igbo: Locale = {\n  id: LocaleCode.Igbo,\n  language: {\n    code: LanguageCode.Igbo,\n    name: 'Igbo',\n    native: 'Igbo',\n  },\n  name: 'Igbo',\n  native_name: 'Igbo',\n  rtl: false,\n};\n\nexport const Indonesian: Locale = {\n  id: LocaleCode.Indonesian,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian',\n  native_name: 'Bahasa Indonesia',\n  rtl: false,\n};\n\nexport const IndonesianIndonesia: Locale = {\n  country: {\n    code: CountryCode.Indonesia,\n    name: 'Indonesia',\n    native: 'Indonesia',\n  },\n  id: LocaleCode.IndonesianIndonesia,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian (Indonesia)',\n  native_name: 'Bahasa Indonesia (Indonesia)',\n  rtl: false,\n};\n\nexport const Irish: Locale = {\n  id: LocaleCode.Irish,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish',\n  native_name: 'Gaeilge',\n  rtl: false,\n};\n\nexport const IrishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.IrishIreland,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish (Ireland)',\n  native_name: 'Gaeilge (\u00C9ire)',\n  rtl: false,\n};\n\nexport const Italian: Locale = {\n  id: LocaleCode.Italian,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian',\n  native_name: 'Italiano',\n  rtl: false,\n};\n\nexport const ItalianItaly: Locale = {\n  country: {\n    code: CountryCode.Italy,\n    name: 'Italy',\n    native: 'Italia',\n  },\n  id: LocaleCode.ItalianItaly,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Italy)',\n  native_name: 'Italiano (Italia)',\n  rtl: false,\n};\n\nexport const ItalianSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Schweiz',\n  },\n  id: LocaleCode.ItalianSwitzerland,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Switzerland)',\n  native_name: 'Italiano (Svizzera)',\n  rtl: false,\n};\n\nexport const Japanese: Locale = {\n  id: LocaleCode.Japanese,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese',\n  native_name: '\u65E5\u672C\u8A9E',\n  rtl: false,\n};\n\nexport const JapaneseJapan: Locale = {\n  country: {\n    code: CountryCode.Japan,\n    name: 'Japan',\n    native: '\u65E5\u672C',\n  },\n  id: LocaleCode.JapaneseJapan,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese (Japan)',\n  native_name: '\u65E5\u672C\u8A9E (\u65E5\u672C)',\n  rtl: false,\n};\n\nexport const Kannada: Locale = {\n  id: LocaleCode.Kannada,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  rtl: false,\n};\n\nexport const KannadaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0CAD\u0CBE\u0CB0\u0CA4',\n  },\n  id: LocaleCode.KannadaIndia,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada (India)',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)',\n  rtl: false,\n};\n\nexport const Kazakh: Locale = {\n  id: LocaleCode.Kazakh,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  rtl: false,\n};\n\nexport const KazakhKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KazakhKazakhstan,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh (Kazakhstan)',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Khmer: Locale = {\n  id: LocaleCode.Khmer,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  rtl: false,\n};\n\nexport const KhmerCambodia: Locale = {\n  country: {\n    code: CountryCode.Cambodia,\n    name: 'Cambodia',\n    native: '\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6',\n  },\n  id: LocaleCode.KhmerCambodia,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer (Cambodia)',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)',\n  rtl: false,\n};\n\nexport const Konkani: Locale = {\n  id: LocaleCode.Konkani,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  rtl: false,\n};\n\nexport const KonkaniIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.KonkaniIndia,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani (India)',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Korean: Locale = {\n  id: LocaleCode.Korean,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean',\n  native_name: '\uD55C\uAD6D\uC5B4',\n  rtl: false,\n};\n\nexport const KoreanSouthKorea: Locale = {\n  country: {\n    code: CountryCode.SouthKorea,\n    name: 'South Korea',\n    native: '\uB300\uD55C\uBBFC\uAD6D',\n  },\n  id: LocaleCode.KoreanSouthKorea,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean (South Korea)',\n  native_name: '\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)',\n  rtl: false,\n};\n\nexport const Kurdish: Locale = {\n  id: LocaleCode.Kurdish,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish',\n  native_name: 'Kurd\u00EE',\n  rtl: false,\n};\n\nexport const KurdishIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.KurdishIraq,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Iraq)',\n  native_name: 'Kurd\u00EE (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: false,\n};\n\nexport const KurdishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.KurdishTurkey,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Turkey)',\n  native_name: 'Kurd\u00EE (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Kyrgyz: Locale = {\n  id: LocaleCode.Kyrgyz,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  rtl: false,\n};\n\nexport const KyrgyzKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KyrgyzKyrgyzstan,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz (Kyrgyzstan)',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Lao: Locale = {\n  id: LocaleCode.Lao,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao',\n  native_name: '\u0EA5\u0EB2\u0EA7',\n  rtl: false,\n};\n\nexport const LaoLaos: Locale = {\n  country: {\n    code: CountryCode.Laos,\n    name: 'Laos',\n    native: '\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95',\n  },\n  id: LocaleCode.LaoLaos,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao (Laos)',\n  native_name: '\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)',\n  rtl: false,\n};\n\nexport const Latvian: Locale = {\n  id: LocaleCode.Latvian,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian',\n  native_name: 'Latvie\u0161u',\n  rtl: false,\n};\n\nexport const LatvianLatvia: Locale = {\n  country: {\n    code: CountryCode.Latvia,\n    name: 'Latvia',\n    native: 'Latvija',\n  },\n  id: LocaleCode.LatvianLatvia,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian (Latvia)',\n  native_name: 'Latvie\u0161u (Latvija)',\n  rtl: false,\n};\n\nexport const Lithuanian: Locale = {\n  id: LocaleCode.Lithuanian,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian',\n  native_name: 'Lietuvi\u0173',\n  rtl: false,\n};\n\nexport const LithuanianLithuania: Locale = {\n  country: {\n    code: CountryCode.Lithuania,\n    name: 'Lithuania',\n    native: 'Lietuva',\n  },\n  id: LocaleCode.LithuanianLithuania,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian (Lithuania)',\n  native_name: 'Lietuvi\u0173 (Lietuva)',\n  rtl: false,\n};\n\nexport const Luxembourgish: Locale = {\n  id: LocaleCode.Luxembourgish,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish',\n  native_name: 'L\u00EBtzebuergesch',\n  rtl: false,\n};\n\nexport const LuxembourgishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.LuxembourgishBelgium,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Belgium)',\n  native_name: 'L\u00EBtzebuergesch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const LuxembourgishLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.LuxembourgishLuxembourg,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Luxembourg)',\n  native_name: 'L\u00EBtzebuergesch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Macedonian: Locale = {\n  id: LocaleCode.Macedonian,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const MacedonianNorthMacedonia: Locale = {\n  country: {\n    code: CountryCode.NorthMacedonia,\n    name: 'Macedonia',\n    native: '\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430',\n  },\n  id: LocaleCode.MacedonianNorthMacedonia,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian (North Macedonia)',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)',\n  rtl: false,\n};\n\nexport const Malay: Locale = {\n  id: LocaleCode.Malay,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay',\n  native_name: 'Bahasa Melayu',\n  rtl: false,\n};\n\nexport const MalayBrunei: Locale = {\n  country: {\n    code: CountryCode.Brunei,\n    name: 'Brunei',\n    native: 'Negara Brunei Darussalam',\n  },\n  id: LocaleCode.MalayBrunei,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Brunei)',\n  native_name: 'Bahasa Melayu (Negara Brunei Darussalam)',\n  rtl: false,\n};\n\nexport const MalayMalaysia: Locale = {\n  country: {\n    code: CountryCode.Malaysia,\n    name: 'Malaysia',\n    native: 'Malaysia',\n  },\n  id: LocaleCode.MalayMalaysia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Malaysia)',\n  native_name: 'Bahasa Melayu (Malaysia)',\n  rtl: false,\n};\n\nexport const MalaySingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.MalaySingapore,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Singapore)',\n  native_name: 'Bahasa Melayu (Singapore)',\n  rtl: false,\n};\n\nexport const MalayIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MalayIndia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (India)',\n  native_name: 'Bahasa Melayu (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Maltese: Locale = {\n  id: LocaleCode.Maltese,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese',\n  native_name: 'Malti',\n  rtl: false,\n};\n\nexport const MalteseMalta: Locale = {\n  country: {\n    code: CountryCode.Malta,\n    name: 'Malta',\n    native: 'Malta',\n  },\n  id: LocaleCode.MalteseMalta,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese (Malta)',\n  native_name: 'Malti (Malta)',\n  rtl: false,\n};\n\nexport const Maori: Locale = {\n  id: LocaleCode.Maori,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori',\n  native_name: 'M\u0101ori',\n  rtl: false,\n};\n\nexport const MaoriNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.MaoriNewZealand,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori (New Zealand)',\n  native_name: 'M\u0101ori (New Zealand)',\n  rtl: false,\n};\n\nexport const Marathi: Locale = {\n  id: LocaleCode.Marathi,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi',\n  native_name: '\u092E\u0930\u093E\u0920\u0940',\n  rtl: false,\n};\n\nexport const MarathiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MarathiIndia,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi (India)',\n  native_name: '\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Mongolian: Locale = {\n  id: LocaleCode.Mongolian,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  rtl: false,\n};\n\nexport const MongolianMongolia: Locale = {\n  country: {\n    code: CountryCode.Mongolia,\n    name: 'Mongolia',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441',\n  },\n  id: LocaleCode.MongolianMongolia,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian (Mongolia)',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)',\n  rtl: false,\n};\n\nexport const Montenegrin: Locale = {\n  id: LocaleCode.Montenegrin,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  rtl: false,\n};\n\nexport const MontenegrinMontenegro: Locale = {\n  country: {\n    code: CountryCode.Montenegro,\n    name: 'Montenegro',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  id: LocaleCode.MontenegrinMontenegro,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin (Montenegro)',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)',\n  rtl: false,\n};\n\nexport const Nepali: Locale = {\n  id: LocaleCode.Nepali,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  rtl: false,\n};\n\nexport const NepaliNepal: Locale = {\n  country: {\n    code: CountryCode.Nepal,\n    name: 'Nepal',\n    native: '\u0928\u0947\u092A\u093E\u0932',\n  },\n  id: LocaleCode.NepaliNepal,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali (Nepal)',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)',\n  rtl: false,\n};\n\nexport const NorthernSotho: Locale = {\n  id: LocaleCode.NorthernSotho,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho',\n  native_name: 'Sesotho sa Leboa',\n  rtl: false,\n};\n\nexport const NorthernSothoSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.NorthernSothoSouthAfrica,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho (South Africa)',\n  native_name: 'Sesotho sa Leboa (South Africa)',\n  rtl: false,\n};\n\nexport const Norwegian: Locale = {\n  id: LocaleCode.Norwegian,\n  language: {\n    code: LanguageCode.Norwegian,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian',\n  native_name: 'Norsk',\n  rtl: false,\n};\n\nexport const NorwegianBokmalNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianBokmalNorway,\n  language: {\n    code: LanguageCode.NorwegianBokmal,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Bokmal)',\n  native_name: 'Norsk (Bokm\u00E5l)',\n  rtl: false,\n};\n\nexport const NorwegianNynorskNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianNynorskNorway,\n  language: {\n    code: LanguageCode.NorwegianNynorsk,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Nynorsk)',\n  native_name: 'Norsk (Nynorsk)',\n  rtl: false,\n};\n\nexport const Oriya: Locale = {\n  id: LocaleCode.Oriya,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  rtl: false,\n};\n\nexport const OriyaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.OriyaIndia,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya (India)',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)',\n  rtl: false,\n};\n\nexport const Pashto: Locale = {\n  id: LocaleCode.Pashto,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto',\n  native_name: '\u067E\u069A\u062A\u0648',\n  rtl: true,\n};\n\nexport const PashtoAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PashtoAfghanistan,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto (Afghanistan)',\n  native_name: '\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Persian: Locale = {\n  id: LocaleCode.Persian,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const PersianIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.PersianIran,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Polish: Locale = {\n  id: LocaleCode.Polish,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish',\n  native_name: 'Polski',\n  rtl: false,\n};\n\nexport const PolishPoland: Locale = {\n  country: {\n    code: CountryCode.Poland,\n    name: 'Poland',\n    native: 'Polska',\n  },\n  id: LocaleCode.PolishPoland,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish (Poland)',\n  native_name: 'Polski (Polska)',\n  rtl: false,\n};\n\nexport const Portuguese: Locale = {\n  id: LocaleCode.Portuguese,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese',\n  native_name: 'Portugu\u00EAs',\n  rtl: false,\n};\n\nexport const PortugueseBrazil: Locale = {\n  country: {\n    code: CountryCode.Brazil,\n    name: 'Brazil',\n    native: 'Brasil',\n  },\n  id: LocaleCode.PortugueseBrazil,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Brazil)',\n  native_name: 'Portugu\u00EAs (Brasil)',\n  rtl: false,\n};\n\nexport const PortuguesePortugal: Locale = {\n  country: {\n    code: CountryCode.Portugal,\n    name: 'Portugal',\n    native: 'Portugal',\n  },\n  id: LocaleCode.PortuguesePortugal,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Portugal)',\n  native_name: 'Portugu\u00EAs (Portugal)',\n  rtl: false,\n};\n\nexport const Punjabi: Locale = {\n  id: LocaleCode.Punjabi,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  rtl: true,\n};\n\nexport const PunjabiPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PunjabiPakistan,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (Pakistan)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const PunjabiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0A2D\u0A3E\u0A30\u0A24',\n  },\n  id: LocaleCode.PunjabiIndia,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (India)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)',\n  rtl: true,\n};\n\nexport const Quechua: Locale = {\n  id: LocaleCode.Quechua,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua',\n  native_name: 'Runa Simi',\n  rtl: false,\n};\n\nexport const QuechuaBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.QuechuaBolivia,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Bolivia)',\n  native_name: 'Runa Simi (Bolivia)',\n  rtl: false,\n};\n\nexport const QuechuaEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.QuechuaEcuador,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Ecuador)',\n  native_name: 'Runa Simi (Ecuador)',\n  rtl: false,\n};\n\nexport const QuechuaPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.QuechuaPeru,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Peru)',\n  native_name: 'Runa Simi (Per\u00FA)',\n  rtl: false,\n};\n\nexport const Romanian: Locale = {\n  id: LocaleCode.Romanian,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian',\n  native_name: 'Rom\u00E2n\u0103',\n  rtl: false,\n};\n\nexport const RomanianRomania: Locale = {\n  country: {\n    code: CountryCode.Romania,\n    name: 'Romania',\n    native: 'Rom\u00E2nia',\n  },\n  id: LocaleCode.RomanianRomania,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian (Romania)',\n  native_name: 'Rom\u00E2n\u0103 (Rom\u00E2nia)',\n  rtl: false,\n};\n\nexport const Russian: Locale = {\n  id: LocaleCode.Russian,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  rtl: false,\n};\n\nexport const RussianRussia: Locale = {\n  country: {\n    code: CountryCode.RussianFederation,\n    name: 'Russian Federation',\n    native: '\u0420\u043E\u0441\u0441\u0438\u044F',\n  },\n  id: LocaleCode.RussianRussia,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Russia)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)',\n  rtl: false,\n};\n\nexport const RussianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.RussianUkraine,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Ukraine)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const RussianKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.RussianKazakhstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kazakhstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const RussianKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  id: LocaleCode.RussianKyrgyzstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kyrgyzstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)',\n  rtl: false,\n};\n\nexport const Sanskrit: Locale = {\n  id: LocaleCode.Sanskrit,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  rtl: false,\n};\n\nexport const SanskritIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.SanskritIndia,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit (India)',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Sami: Locale = {\n  id: LocaleCode.Sami,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami',\n  native_name: 'S\u00E1megiella',\n  rtl: false,\n};\n\nexport const SamiFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SamiFinland,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Finland)',\n  native_name: 'S\u00E1megiella (Suomi)',\n  rtl: false,\n};\n\nexport const SamiNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.SamiNorway,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Norway)',\n  native_name: 'S\u00E1megiella (Norge)',\n  rtl: false,\n};\n\nexport const SamiSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SamiSweden,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Sweden)',\n  native_name: 'S\u00E1megiella (Sverige)',\n  rtl: false,\n};\n\nexport const Samoan: Locale = {\n  id: LocaleCode.Samoan,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan',\n  native_name: 'Gagana fa\u2019a S\u0101moa',\n  rtl: false,\n};\n\nexport const SamoanSamoa: Locale = {\n  country: {\n    code: CountryCode.Samoa,\n    name: 'Samoa',\n    native: 'Samoa',\n  },\n  id: LocaleCode.SamoanSamoa,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan (Samoa)',\n  native_name: 'Gagana fa\u2019a S\u0101moa (Samoa)',\n  rtl: false,\n};\n\nexport const Serbian: Locale = {\n  id: LocaleCode.Serbian,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin)',\n  native_name: 'Srpski (Latinica)',\n  rtl: false,\n};\n\nexport const SerbianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.SerbianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Bosnia and Herzegovina)',\n  native_name: 'Srpski (Latinica) (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const SerbianSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: 'Srbija i Crna Gora',\n  },\n  id: LocaleCode.SerbianSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Serbia and Montenegro)',\n  native_name: 'Srpski (Latinica) (Srbija i Crna Gora)',\n  rtl: false,\n};\n\nexport const SerbianCyrillic: Locale = {\n  id: LocaleCode.SerbianCyrillic,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: '\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Bosnia and Herzegovina)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: '\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Serbia and Montenegro)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)',\n  rtl: false,\n};\n\nexport const Slovak: Locale = {\n  id: LocaleCode.Slovak,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak',\n  native_name: 'Sloven\u010Dina',\n  rtl: false,\n};\n\nexport const SlovakSlovakia: Locale = {\n  country: {\n    code: CountryCode.Slovakia,\n    name: 'Slovakia',\n    native: 'Slovensko',\n  },\n  id: LocaleCode.SlovakSlovakia,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak (Slovakia)',\n  native_name: 'Sloven\u010Dina (Slovensko)',\n  rtl: false,\n};\n\nexport const Slovenian: Locale = {\n  id: LocaleCode.Slovenian,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian',\n  native_name: 'Sloven\u0161\u010Dina',\n  rtl: false,\n};\n\nexport const SlovenianSlovenia: Locale = {\n  country: {\n    code: CountryCode.Slovenia,\n    name: 'Slovenia',\n    native: 'Slovenija',\n  },\n  id: LocaleCode.SlovenianSlovenia,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian (Slovenia)',\n  native_name: 'Sloven\u0161\u010Dina (Slovenija)',\n  rtl: false,\n};\n\nexport const Somali: Locale = {\n  id: LocaleCode.Somali,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali',\n  native_name: 'Soomaaliga',\n  rtl: true,\n};\n\nexport const SomaliSomalia: Locale = {\n  country: {\n    code: CountryCode.Somalia,\n    name: 'Somalia',\n    native: 'Soomaaliya',\n  },\n  id: LocaleCode.SomaliSomalia,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali (Somalia)',\n  native_name: 'Soomaaliga (Soomaaliya)',\n  rtl: true,\n};\n\nexport const Spanish: Locale = {\n  id: LocaleCode.Spanish,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish',\n  native_name: 'Espa\u00F1ol',\n  rtl: false,\n};\n\nexport const SpanishArgentina: Locale = {\n  country: {\n    code: CountryCode.Argentina,\n    name: 'Argentina',\n    native: 'Argentina',\n  },\n  id: LocaleCode.SpanishArgentina,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Argentina)',\n  native_name: 'Espa\u00F1ol (Argentina)',\n  rtl: false,\n};\n\nexport const SpanishBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.SpanishBolivia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Bolivia)',\n  native_name: 'Espa\u00F1ol (Bolivia)',\n  rtl: false,\n};\n\nexport const SpanishChile: Locale = {\n  country: {\n    code: CountryCode.Chile,\n    name: 'Chile',\n    native: 'Chile',\n  },\n  id: LocaleCode.SpanishChile,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Chile)',\n  native_name: 'Espa\u00F1ol (Chile)',\n  rtl: false,\n};\n\nexport const SpanishColombia: Locale = {\n  country: {\n    code: CountryCode.Colombia,\n    name: 'Colombia',\n    native: 'Colombia',\n  },\n  id: LocaleCode.SpanishColombia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Colombia)',\n  native_name: 'Espa\u00F1ol (Colombia)',\n  rtl: false,\n};\n\nexport const SpanishCostaRica: Locale = {\n  country: {\n    code: CountryCode.CostaRica,\n    name: 'Costa Rica',\n    native: 'Costa Rica',\n  },\n  id: LocaleCode.SpanishCostaRica,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Costa Rica)',\n  native_name: 'Espa\u00F1ol (Costa Rica)',\n  rtl: false,\n};\n\nexport const SpanishCuba: Locale = {\n  country: {\n    code: CountryCode.Cuba,\n    name: 'Cuba',\n    native: 'Cuba',\n  },\n  id: LocaleCode.SpanishCuba,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Cuba)',\n  native_name: 'Espa\u00F1ol (Cuba)',\n  rtl: false,\n};\n\nexport const SpanishDominicanRepublic: Locale = {\n  country: {\n    code: CountryCode.DominicanRepublic,\n    name: 'Dominican Republic',\n    native: 'Rep\u00FAblica Dominicana',\n  },\n  id: LocaleCode.SpanishDominicanRepublic,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Dominican Republic)',\n  native_name: 'Espa\u00F1ol (Rep\u00FAblica Dominicana)',\n  rtl: false,\n};\n\nexport const SpanishEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.SpanishEcuador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Ecuador)',\n  native_name: 'Espa\u00F1ol (Ecuador)',\n  rtl: false,\n};\n\nexport const SpanishElSalvador: Locale = {\n  country: {\n    code: CountryCode.ElSalvador,\n    name: 'El Salvador',\n    native: 'El Salvador',\n  },\n  id: LocaleCode.SpanishElSalvador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (El Salvador)',\n  native_name: 'Espa\u00F1ol (El Salvador)',\n  rtl: false,\n};\n\nexport const SpanishEquatorialGuinea: Locale = {\n  country: {\n    code: CountryCode.EquatorialGuinea,\n    name: 'Equatorial Guinea',\n    native: 'Guinea Ecuatorial',\n  },\n  id: LocaleCode.SpanishEquatorialGuinea,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Equatorial Guinea)',\n  native_name: 'Espa\u00F1ol (Guinea Ecuatorial)',\n  rtl: false,\n};\n\nexport const SpanishGuatemala: Locale = {\n  country: {\n    code: CountryCode.Guatemala,\n    name: 'Guatemala',\n    native: 'Guatemala',\n  },\n  id: LocaleCode.SpanishGuatemala,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Guatemala)',\n  native_name: 'Espa\u00F1ol (Guatemala)',\n  rtl: false,\n};\n\nexport const SpanishHonduras: Locale = {\n  country: {\n    code: CountryCode.Honduras,\n    name: 'Honduras',\n    native: 'Honduras',\n  },\n  id: LocaleCode.SpanishHonduras,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Honduras)',\n  native_name: 'Espa\u00F1ol (Honduras)',\n  rtl: false,\n};\n\nexport const SpanishMexico: Locale = {\n  country: {\n    code: CountryCode.Mexico,\n    name: 'Mexico',\n    native: 'M\u00E9xico',\n  },\n  id: LocaleCode.SpanishMexico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Mexico)',\n  native_name: 'Espa\u00F1ol (M\u00E9xico)',\n  rtl: false,\n};\n\nexport const SpanishNicaragua: Locale = {\n  country: {\n    code: CountryCode.Nicaragua,\n    name: 'Nicaragua',\n    native: 'Nicaragua',\n  },\n  id: LocaleCode.SpanishNicaragua,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Nicaragua)',\n  native_name: 'Espa\u00F1ol (Nicaragua)',\n  rtl: false,\n};\n\nexport const SpanishPanama: Locale = {\n  country: {\n    code: CountryCode.Panama,\n    name: 'Panama',\n    native: 'Panam\u00E1',\n  },\n  id: LocaleCode.SpanishPanama,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Panama)',\n  native_name: 'Espa\u00F1ol (Panam\u00E1)',\n  rtl: false,\n};\n\nexport const SpanishParaguay: Locale = {\n  country: {\n    code: CountryCode.Paraguay,\n    name: 'Paraguay',\n    native: 'Paraguay',\n  },\n  id: LocaleCode.SpanishParaguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Paraguay)',\n  native_name: 'Espa\u00F1ol (Paraguay)',\n  rtl: false,\n};\n\nexport const SpanishPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.SpanishPeru,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Peru)',\n  native_name: 'Espa\u00F1ol (Per\u00FA)',\n  rtl: false,\n};\n\nexport const SpanishPuertoRico: Locale = {\n  country: {\n    code: CountryCode.PuertoRico,\n    name: 'Puerto Rico',\n    native: 'Puerto Rico',\n  },\n  id: LocaleCode.SpanishPuertoRico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Puerto Rico)',\n  native_name: 'Espa\u00F1ol (Puerto Rico)',\n  rtl: false,\n};\n\nexport const SpanishUruguay: Locale = {\n  country: {\n    code: CountryCode.Uruguay,\n    name: 'Uruguay',\n    native: 'Uruguay',\n  },\n  id: LocaleCode.SpanishUruguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Uruguay)',\n  native_name: 'Espa\u00F1ol (Uruguay)',\n  rtl: false,\n};\n\nexport const SpanishVenezuela: Locale = {\n  country: {\n    code: CountryCode.Venezuela,\n    name: 'Venezuela',\n    native: 'Venezuela',\n  },\n  id: LocaleCode.SpanishVenezuela,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Venezuela)',\n  native_name: 'Espa\u00F1ol (Venezuela)',\n  rtl: false,\n};\n\nexport const SutuSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.SutuSouthAfrica,\n  language: {\n    code: LanguageCode.Sutu,\n    name: 'Sutu',\n    native: 'Sesotho',\n  },\n  name: 'Sutu (South Africa)',\n  native_name: 'Sesotho (Afrika Borwa)',\n  rtl: false,\n};\n\nexport const Swahili: Locale = {\n  id: LocaleCode.Swahili,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili',\n  native_name: 'Kiswahili',\n  rtl: false,\n};\n\nexport const SwahiliKenya: Locale = {\n  country: {\n    code: CountryCode.Kenya,\n    name: 'Kenya',\n    native: 'Kenya',\n  },\n  id: LocaleCode.SwahiliKenya,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili (Kenya)',\n  native_name: 'Kiswahili (Kenya)',\n  rtl: false,\n};\n\nexport const Swedish: Locale = {\n  id: LocaleCode.Swedish,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish',\n  native_name: 'Svenska',\n  rtl: false,\n};\n\nexport const SwedishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SwedishFinland,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Finland)',\n  native_name: 'Svenska (Finland)',\n  rtl: false,\n};\n\nexport const SwedishSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SwedishSweden,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Sweden)',\n  native_name: 'Svenska (Sverige)',\n  rtl: false,\n};\n\nexport const Syriac: Locale = {\n  id: LocaleCode.Syriac,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  rtl: true,\n};\n\nexport const SyriacSyria: Locale = {\n  country: {\n    code: CountryCode.Syria,\n    name: 'Syria',\n    native: '\u0633\u0648\u0631\u064A\u0627',\n  },\n  id: LocaleCode.SyriacSyria,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac (Syria)',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)',\n  rtl: true,\n};\n\nexport const Tajik: Locale = {\n  id: LocaleCode.Tajik,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  rtl: false,\n};\n\nexport const TajikTajikistan: Locale = {\n  country: {\n    code: CountryCode.Tajikistan,\n    name: 'Tajikistan',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.TajikTajikistan,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik (Tajikistan)',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Tagalog: Locale = {\n  id: LocaleCode.Tagalog,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog',\n  native_name: 'Tagalog',\n  rtl: false,\n};\n\nexport const TagalogPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.TagalogPhilippines,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog (Philippines)',\n  native_name: 'Tagalog (Pilipinas)',\n  rtl: false,\n};\n\nexport const Tamil: Locale = {\n  id: LocaleCode.Tamil,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  rtl: false,\n};\n\nexport const TamilIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TamilIndia,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil (India)',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Telugu: Locale = {\n  id: LocaleCode.Telugu,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  rtl: false,\n};\n\nexport const TeluguIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02',\n  },\n  id: LocaleCode.TeluguIndia,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu (India)',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)',\n  rtl: false,\n};\n\nexport const Thai: Locale = {\n  id: LocaleCode.Thai,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai',\n  native_name: '\u0E44\u0E17\u0E22',\n  rtl: false,\n};\n\nexport const ThaiThailand: Locale = {\n  country: {\n    code: CountryCode.Thailand,\n    name: 'Thailand',\n    native: '\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22',\n  },\n  id: LocaleCode.ThaiThailand,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai (Thailand)',\n  native_name: '\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)',\n  rtl: false,\n};\n\nexport const Tibetan: Locale = {\n  id: LocaleCode.Tibetan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const TibetanChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.TibetanChina,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (China)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)',\n  rtl: false,\n};\n\nexport const TibetanBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D',\n  },\n  id: LocaleCode.TibetanBhutan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)',\n  rtl: false,\n};\n\nexport const TibetanIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TibetanIndia,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (India)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Tsonga: Locale = {\n  id: LocaleCode.Tsonga,\n  language: {\n    code: LanguageCode.Tsonga,\n    name: 'Tsonga',\n    native: 'Xitsonga',\n  },\n  name: 'Tsonga',\n  native_name: 'Xitsonga',\n  rtl: false,\n};\n\nexport const Tswana: Locale = {\n  id: LocaleCode.Tswana,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana',\n  native_name: 'Setswana',\n  rtl: false,\n};\n\nexport const TswanaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.TswanaSouthAfrica,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana (South Africa)',\n  native_name: 'Setswana (South Africa)',\n  rtl: false,\n};\n\nexport const Turkish: Locale = {\n  id: LocaleCode.Turkish,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish',\n  native_name: 'T\u00FCrk\u00E7e',\n  rtl: false,\n};\n\nexport const TurkishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.TurkishTurkey,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish (Turkey)',\n  native_name: 'T\u00FCrk\u00E7e (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Ukrainian: Locale = {\n  id: LocaleCode.Ukrainian,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  rtl: false,\n};\n\nexport const UkrainianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.UkrainianUkraine,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian (Ukraine)',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const Urdu: Locale = {\n  id: LocaleCode.Urdu,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu',\n  native_name: '\u0627\u0631\u062F\u0648',\n  rtl: true,\n};\n\nexport const UrduAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduAfghanistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Afghanistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UrduIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.UrduIndia,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (India)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)',\n  rtl: true,\n};\n\nexport const UrduPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduPakistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Pakistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UzbekLatin: Locale = {\n  id: LocaleCode.Uzbek,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek',\n  native_name: 'O\u02BBzbekcha',\n  rtl: false,\n};\n\nexport const UzbekUzbekistan: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: 'O\u02BBzbekiston',\n  },\n  id: LocaleCode.UzbekUzbekistan,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek (Latin, Uzbekistan)',\n  native_name: 'O\u02BBzbekcha (O\u02BBzbekiston)',\n  rtl: false,\n};\n\nexport const UzbekCyrillic: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.UzbekCyrillic,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  name: 'Uzbek (Cyrillic)',\n  native_name: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Vietnamese: Locale = {\n  id: LocaleCode.Vietnamese,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t',\n  rtl: false,\n};\n\nexport const VietnameseVietnam: Locale = {\n  country: {\n    code: CountryCode.Vietnam,\n    name: 'Vietnam',\n    native: 'Vi\u1EC7t Nam',\n  },\n  id: LocaleCode.VietnameseVietnam,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese (Vietnam)',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)',\n  rtl: false,\n};\n\nexport const Welsh: Locale = {\n  id: LocaleCode.Welsh,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh',\n  native_name: 'Cymraeg',\n  rtl: false,\n};\n\nexport const WelshUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.WelshUnitedKingdom,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh (United Kingdom)',\n  native_name: 'Cymraeg (United Kingdom)',\n  rtl: false,\n};\n\nexport const Xhosa: Locale = {\n  id: LocaleCode.Xhosa,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa',\n  native_name: 'isiXhosa',\n  rtl: false,\n};\n\nexport const XhosaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.XhosaSouthAfrica,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa (South Africa)',\n  native_name: 'isiXhosa (South Africa)',\n  rtl: false,\n};\n\nexport const Yiddish: Locale = {\n  id: LocaleCode.Yiddish,\n  language: {\n    code: LanguageCode.Yiddish,\n    name: 'Yiddish',\n    native: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  },\n  name: 'Yiddish',\n  native_name: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  rtl: false,\n};\n\nexport const Yoruba: Locale = {\n  id: LocaleCode.Yoruba,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba',\n  native_name: 'Yor\u00F9b\u00E1',\n  rtl: false,\n};\n\nexport const YorubaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.YorubaNigeria,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba (Nigeria)',\n  native_name: 'Yor\u00F9b\u00E1 (Nigeria)',\n  rtl: false,\n};\n\n// export const ZhuyinMandarin: Locale = {\n//   id: LocaleCode.ZhuyinMandarin,\n//   language: {\n//     code: LanguageCode.Mandarin,\n//     name: 'Mandarin',\n//     native: '\u666E\u901A\u8BDD',\n//   },\n//   name: 'Zhuyin (Mandarin)',\n//   native_name: '\u666E\u901A\u8BDD (\u666E\u901A\u8BDD)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinChina: Locale = {\n//   country: {\n//     code: CountryCode.China,\n//     name: 'China',\n//     native: '\u4E2D\u56FD',\n//   },\n//   id: LocaleCode.ZhuyinMandarinChina,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, China)',\n//   native_name: 'Zhuyin (Mandarin, China)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinTaiwan: Locale = {\n//   country: {\n//     code: CountryCode.Taiwan,\n//     name: 'Taiwan',\n//     native: '\u81FA\u7063',\n//   },\n//   id: LocaleCode.ZhuyinMandarinTaiwan,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Taiwan)',\n//   native_name: 'Zhuyin (Mandarin, Taiwan)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinHongKong: Locale = {\n//   country: {\n//     code: CountryCode.HongKong,\n//     name: 'Hong Kong',\n//     native: '\u9999\u6E2F',\n//   },\n//   id: LocaleCode.ZhuyinMandarinHongKong,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Hong Kong)',\n//   native_name: 'Zhuyin (Mandarin, Hong Kong)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinMacau: Locale = {\n//   country: {\n//     code: CountryCode.Macau,\n//     name: 'Macau',\n//     native: '\u6FB3\u9580',\n//   },\n//   id: LocaleCode.ZhuyinMandarinMacau,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Macau)',\n//   native_name: 'Zhuyin (Mandarin, Macau)',\n//   rtl: false,\n// };\n\nexport const Zulu: Locale = {\n  id: LocaleCode.Zulu,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu',\n  native_name: 'isiZulu',\n  rtl: false,\n};\n\nexport const ZuluSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.ZuluSouthAfrica,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu (South Africa)',\n  native_name: 'isiZulu (South Africa)',\n  rtl: false,\n};\n", "import { TimezoneRegions } from './region.js';\nimport { TimezoneRegion } from './region';\nimport { TimezoneOffset } from './timezone.js';\nimport { Timezones } from './timezones.js';\n\nexport const AfricaAbidjan: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAbidjan,\n  name: 'Africa/Abidjan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAccra: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAccra,\n  name: 'Africa/Accra',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAddisAbaba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAddisAbaba,\n  name: 'Africa/Addis_Ababa',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaAlgiers: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAlgiers,\n  name: 'Africa/Algiers',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaAsmara: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAsmara,\n  name: 'Africa/Asmara',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaBamako: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBamako,\n  name: 'Africa/Bamako',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBangui: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBangui,\n  name: 'Africa/Bangui',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBanjul: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBanjul,\n  name: 'Africa/Banjul',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBissau: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBissau,\n  name: 'Africa/Bissau',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBlantyre: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBlantyre,\n  name: 'Africa/Blantyre',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaBrazzaville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBrazzaville,\n  name: 'Africa/Brazzaville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBujumbura: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBujumbura,\n  name: 'Africa/Bujumbura',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaCairo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCairo,\n  name: 'Africa/Cairo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AfricaCasablanca: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCasablanca,\n  name: 'Africa/Casablanca',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AfricaCeuta: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCeuta,\n  name: 'Africa/Ceuta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaConakry: TimezoneRegion = {\n  id: TimezoneRegions.AfricaConakry,\n  name: 'Africa/Conakry',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDakar: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDakar,\n  name: 'Africa/Dakar',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDarEsSalaam: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDarEsSalaam,\n  name: 'Africa/Dar_es_Salaam',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDjibouti: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDjibouti,\n  name: 'Africa/Djibouti',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDouala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDouala,\n  name: 'Africa/Douala',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaElAaiun: TimezoneRegion = {\n  id: TimezoneRegions.AfricaElAaiun,\n  name: 'Africa/El_Aaiun',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaFreetown: TimezoneRegion = {\n  id: TimezoneRegions.AfricaFreetown,\n  name: 'Africa/Freetown',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaGaborone: TimezoneRegion = {\n  id: TimezoneRegions.AfricaGaborone,\n  name: 'Africa/Gaborone',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaHarare: TimezoneRegion = {\n  id: TimezoneRegions.AfricaHarare,\n  name: 'Africa/Harare',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaJohannesburg: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJohannesburg,\n  name: 'Africa/Johannesburg',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaJuba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJuba,\n  name: 'Africa/Juba',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKampala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKampala,\n  name: 'Africa/Kampala',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKhartoum: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKhartoum,\n  name: 'Africa/Khartoum',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKigali: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKigali,\n  name: 'Africa/Kigali',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaKinshasa: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKinshasa,\n  name: 'Africa/Kinshasa',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLagos: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLagos,\n  name: 'Africa/Lagos',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLibreville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLibreville,\n  name: 'Africa/Libreville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLome,\n  name: 'Africa/Lome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaLuanda: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLuanda,\n  name: 'Africa/Luanda',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLubumbashi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLubumbashi,\n  name: 'Africa/Lubumbashi',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaLusaka: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLusaka,\n  name: 'Africa/Lusaka',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMalabo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMalabo,\n  name: 'Africa/Malabo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaMaputo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaputo,\n  name: 'Africa/Maputo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMaseru: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaseru,\n  name: 'Africa/Maseru',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMbabane: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMbabane,\n  name: 'Africa/Mbabane',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMogadishu: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMogadishu,\n  name: 'Africa/Mogadishu',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaMonrovia: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMonrovia,\n  name: 'Africa/Monrovia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaNairobi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNairobi,\n  name: 'Africa/Nairobi',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaNdjamena: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNdjamena,\n  name: 'Africa/Ndjamena',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNiamey: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNiamey,\n  name: 'Africa/Niamey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNouakchott: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNouakchott,\n  name: 'Africa/Nouakchott',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AfricaOuagadougou: TimezoneRegion = {\n  id: TimezoneRegions.AfricaOuagadougou,\n  name: 'Africa/Ouagadougou',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaPortoNovo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaPortoNovo,\n  name: 'Africa/Porto-Novo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaSaoTome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaSaoTome,\n  name: 'Africa/SaoTome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTripoli: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTripoli,\n  name: 'Africa/Tripoli',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTunis: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTunis,\n  name: 'Africa/Tunis',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaWindhoek: TimezoneRegion = {\n  id: TimezoneRegions.AfricaWindhoek,\n  name: 'Africa/Windhoek',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AmericaAdak: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAdak,\n  name: 'America/Adak',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaAnchorage: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnchorage,\n  name: 'America/Anchorage',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaAnguilla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnguilla,\n  name: 'America/Anguilla',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAntigua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAntigua,\n  name: 'America/Antigua',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAraguaina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAraguaina,\n  name: 'America/Araguaina',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaArgentinaBuenosAires: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaBuenosAires,\n  name: 'America/Argentina/Buenos_Aires',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCatamarca: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCatamarca,\n  name: 'America/Argentina/Catamarca',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCordoba,\n  name: 'America/Argentina/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaJujuy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaJujuy,\n  name: 'America/Argentina/Jujuy',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaLaRioja: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaLaRioja,\n  name: 'America/Argentina/La_Rioja',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaMendoza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaMendoza,\n  name: 'America/Argentina/Mendoza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaRioGallegos: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaRioGallegos,\n  name: 'America/Argentina/Rio_Gallegos',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSalta: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSalta,\n  name: 'America/Argentina/Salta',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanJuan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanJuan,\n  name: 'America/Argentina/San_Juan',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanLuis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanLuis,\n  name: 'America/Argentina/San_Luis',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaTucuman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaTucuman,\n  name: 'America/Argentina/Tucuman',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaUshuaia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaUshuaia,\n  name: 'America/Argentina/Ushuaia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaAruba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAruba,\n  name: 'America/Aruba',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAsuncion: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAsuncion,\n  name: 'America/Asuncion',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ParaguayTime,\n};\n\nexport const AmericaAtikokan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtikokan,\n  name: 'America/Atikokan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaAtka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtka,\n  name: 'America/Atka',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaBahia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahia,\n  name: 'America/Bahia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBahiaBanderas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahiaBanderas,\n  name: 'America/Bahia_Banderas',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBarbados: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBarbados,\n  name: 'America/Barbados',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBelem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelem,\n  name: 'America/Belem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBelize: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelize,\n  name: 'America/Belize',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBlancSablon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBlancSablon,\n  name: 'America/Blanc-Sablon',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBoaVista: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoaVista,\n  name: 'America/Boa_Vista',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaBogota: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBogota,\n  name: 'America/Bogota',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.ColombiaTime,\n};\n\nexport const AmericaBoise: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoise,\n  name: 'America/Boise',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCambridgeBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCambridgeBay,\n  name: 'America/Cambridge_Bay',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCampoGrande: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCampoGrande,\n  name: 'America/Campo_Grande',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCancun: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCancun,\n  name: 'America/Cancun',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCaracas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCaracas,\n  name: 'America/Caracas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.VenezuelaStandardTime,\n};\n\nexport const AmericaCayenne: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayenne,\n  name: 'America/Cayenne',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.FrenchGuianaTime,\n};\n\nexport const AmericaCayman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayman,\n  name: 'America/Cayman',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaChicago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChicago,\n  name: 'America/Chicago',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaChihuahua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChihuahua,\n  name: 'America/Chihuahua',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCoralHarbour: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCoralHarbour,\n  name: 'America/Coral_Harbour',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCordoba,\n  name: 'America/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaCostaRica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCostaRica,\n  name: 'America/Costa_Rica',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaCreston: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCreston,\n  name: 'America/Creston',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCuiaba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuiaba,\n  name: 'America/Cuiaba',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCuracao: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuracao,\n  name: 'America/Curacao',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaDanmarkshavn: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDanmarkshavn,\n  name: 'America/Danmarkshavn',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AmericaDawson: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawson,\n  name: 'America/Dawson',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDawsonCreek: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawsonCreek,\n  name: 'America/Dawson_Creek',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDenver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDenver,\n  name: 'America/Denver',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaDetroit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDetroit,\n  name: 'America/Detroit',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaDominica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDominica,\n  name: 'America/Dominica',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaEdmonton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEdmonton,\n  name: 'America/Edmonton',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaEirunepe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEirunepe,\n  name: 'America/Eirunepe',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaElSalvador: TimezoneRegion = {\n  id: TimezoneRegions.AmericaElSalvador,\n  name: 'America/El_Salvador',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaFortaleza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaFortaleza,\n  name: 'America/Fortaleza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaGlaceBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGlaceBay,\n  name: 'America/Glace_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGodthab: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGodthab,\n  name: 'America/Godthab',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.WestGreenlandTime,\n};\n\nexport const AmericaGooseBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGooseBay,\n  name: 'America/Goose_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrandTurk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrandTurk,\n  name: 'America/Grand_Turk',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrenada: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrenada,\n  name: 'America/Grenada',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuadeloupe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuadeloupe,\n  name: 'America/Guadeloupe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuatemala: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuatemala,\n  name: 'America/Guatemala',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaGuayaquil: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuayaquil,\n  name: 'America/Guayaquil',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EcuadorTime,\n};\n\nexport const AmericaGuyana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuyana,\n  name: 'America/Guyana',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHalifax: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHalifax,\n  name: 'America/Halifax',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHavana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHavana,\n  name: 'America/Havana',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CubaStandardTime,\n};\n\nexport const AmericaHermosillo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHermosillo,\n  name: 'America/Hermosillo',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIndianaIndianapolis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaIndianapolis,\n  name: 'America/Indiana/Indianapolis',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaKnox: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaKnox,\n  name: 'America/Indiana/Knox',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaMarengo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaMarengo,\n  name: 'America/Indiana/Marengo',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaPetersburg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaPetersburg,\n  name: 'America/Indiana/Petersburg',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaTellCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaTellCity,\n  name: 'America/Indiana/Tell_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaVevay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVevay,\n  name: 'America/Indiana/Vevay',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaVincennes: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVincennes,\n  name: 'America/Indiana/Vincennes',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaWinamac: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaWinamac,\n  name: 'America/Indiana/Winamac',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaInuvik: TimezoneRegion = {\n  id: TimezoneRegions.AmericaInuvik,\n  name: 'America/Inuvik',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIqaluit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIqaluit,\n  name: 'America/Iqaluit',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaJamaica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJamaica,\n  name: 'America/Jamaica',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaJuneau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJuneau,\n  name: 'America/Juneau',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaKentuckyLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyLouisville,\n  name: 'America/Kentucky/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKentuckyMonticello: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyMonticello,\n  name: 'America/Kentucky/Monticello',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKralendijk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKralendijk,\n  name: 'America/Kralendijk',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaLaPaz: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLaPaz,\n  name: 'America/La_Paz',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.BoliviaTime,\n};\n\nexport const AmericaLima: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLima,\n  name: 'America/Lima',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.PeruTime,\n};\n\nexport const AmericaLosAngeles: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLosAngeles,\n  name: 'America/Los_Angeles',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLouisville,\n  name: 'America/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaLowerPrinces: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLowerPrinces,\n  name: 'America/Lower_Princes',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMaceio: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMaceio,\n  name: 'America/Maceio',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaManagua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManagua,\n  name: 'America/Managua',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaManaus: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManaus,\n  name: 'America/Manaus',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaMarigot: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMarigot,\n  name: 'America/Marigot',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMartinique: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMartinique,\n  name: 'America/Martinique',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMatamoros: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMatamoros,\n  name: 'America/Matamoros',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMazatlan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMazatlan,\n  name: 'America/Mazatlan',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaMenominee: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMenominee,\n  name: 'America/Menominee',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMerida: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMerida,\n  name: 'America/Merida',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMetlakatla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMetlakatla,\n  name: 'America/Metlakatla',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaMexicoCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMexicoCity,\n  name: 'America/Mexico_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMiquelon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMiquelon,\n  name: 'America/Miquelon',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SaintPierreAndMiquelonStandardTime,\n};\n\nexport const AmericaMoncton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMoncton,\n  name: 'America/Moncton',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMonterrey: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMonterrey,\n  name: 'America/Monterrey',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMontevideo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontevideo,\n  name: 'America/Montevideo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.UruguayStandardTime,\n};\n\nexport const AmericaMontreal: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontreal,\n  name: 'America/Montreal',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaMontserrat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontserrat,\n  name: 'America/Montserrat',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaNassau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNassau,\n  name: 'America/Nassau',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNewYork: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNewYork,\n  name: 'America/New_York',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNipigon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNipigon,\n  name: 'America/Nipigon',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNome: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNome,\n  name: 'America/Nome',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaNoronha: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNoronha,\n  name: 'America/Noronha',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.FernandoDeNoronhaTime,\n};\n\nexport const AmericaNorthDakotaBeulah: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaBeulah,\n  name: 'America/North_Dakota/Beulah',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaCenter: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaCenter,\n  name: 'America/North_Dakota/Center',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaNewSalem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaNewSalem,\n  name: 'America/North_Dakota/New_Salem',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaOjinaga: TimezoneRegion = {\n  id: TimezoneRegions.AmericaOjinaga,\n  name: 'America/Ojinaga',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPanama: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPanama,\n  name: 'America/Panama',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPangnirtung: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPangnirtung,\n  name: 'America/Pangnirtung',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaParamaribo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaParamaribo,\n  name: 'America/Paramaribo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SurinameTime,\n};\n\nexport const AmericaPhoenix: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPhoenix,\n  name: 'America/Phoenix',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPortAuPrince: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortAuPrince,\n  name: 'America/Port-au-Prince',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPortOfSpain: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortOfSpain,\n  name: 'America/Port_of_Spain',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaPortoVelho: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortoVelho,\n  name: 'America/Porto_Velho',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaPuertoRico: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPuertoRico,\n  name: 'America/Puerto_Rico',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaRainyRiver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRainyRiver,\n  name: 'America/Rainy_River',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRankinInlet: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRankinInlet,\n  name: 'America/Rankin_Inlet',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRecife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRecife,\n  name: 'America/Recife',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaRegina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRegina,\n  name: 'America/Regina',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaResolute: TimezoneRegion = {\n  id: TimezoneRegions.AmericaResolute,\n  name: 'America/Resolute',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRioBranco: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRioBranco,\n  name: 'America/Rio_Branco',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaSantaIsabel: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantaIsabel,\n  name: 'America/Santa_Isabel',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaSantarem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantarem,\n  name: 'America/Santarem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaSantiago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantiago,\n  name: 'America/Santiago',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChileStandardTime,\n};\n\nexport const AmericaSantoDomingo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantoDomingo,\n  name: 'America/Santo_Domingo',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSaoPaulo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSaoPaulo,\n  name: 'America/Sao_Paulo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaScoresbysund: TimezoneRegion = {\n  id: TimezoneRegions.AmericaScoresbysund,\n  name: 'America/Scoresbysund',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.EasternGreenlandTime,\n};\n\nexport const AmericaShiprock: TimezoneRegion = {\n  id: TimezoneRegions.AmericaShiprock,\n  name: 'America/Shiprock',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaSitka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSitka,\n  name: 'America/Sitka',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaStBarthelemy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStBarthelemy,\n  name: 'America/St_Barthelemy',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStJohns: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStJohns,\n  name: 'America/St_Johns',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AmericaStKitts: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStKitts,\n  name: 'America/St_Kitts',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStLucia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStLucia,\n  name: 'America/St_Lucia',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStThomas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStThomas,\n  name: 'America/St_Thomas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStVincent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStVincent,\n  name: 'America/St_Vincent',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSwiftCurrent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSwiftCurrent,\n  name: 'America/Swift_Current',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaTegucigalpa: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTegucigalpa,\n  name: 'America/Tegucigalpa',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaThule: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThule,\n  name: 'America/Thule',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaThunderBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThunderBay,\n  name: 'America/Thunder_Bay',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTijuana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTijuana,\n  name: 'America/Tijuana',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaToronto: TimezoneRegion = {\n  id: TimezoneRegions.AmericaToronto,\n  name: 'America/Toronto',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTortola: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTortola,\n  name: 'America/Tortola',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaVancouver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaVancouver,\n  name: 'America/Vancouver',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWhitehorse: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWhitehorse,\n  name: 'America/Whitehorse',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWinnipeg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWinnipeg,\n  name: 'America/Winnipeg',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaYakutat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYakutat,\n  name: 'America/Yakutat',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaYellowknife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYellowknife,\n  name: 'America/Yellowknife',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AntarcticaCasey: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaCasey,\n  name: 'Antarctica/Casey',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.WesternStandardTime,\n};\n\nexport const AntarcticaDavis: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDavis,\n  name: 'Antarctica/Davis',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AntarcticaDumontDUrville: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDumontDUrville,\n  name: 'Antarctica/DumontDUrville',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMacquarie: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMacquarie,\n  name: 'Antarctica/Macquarie',\n  offset: TimezoneOffset.UTC_MINUS_11,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMawson: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMawson,\n  name: 'Antarctica/Mawson',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMcMurdo: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMcMurdo,\n  name: 'Antarctica/McMurdo',\n  offset: TimezoneOffset.UTC_MINUS_12,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const AntarcticaPalmer: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaPalmer,\n  name: 'Antarctica/Palmer',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const AntarcticaRothera: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaRothera,\n  name: 'Antarctica/Rothera',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.RotheraResearchStationTime,\n};\n\nexport const AntarcticaSyowa: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaSyowa,\n  name: 'Antarctica/Syowa',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ShowaStationTime,\n};\n\nexport const AntarcticaTroll: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaTroll,\n  name: 'Antarctica/Troll',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaVostok: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaVostok,\n  name: 'Antarctica/Vostok',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const ArcticLongyearbyen: TimezoneRegion = {\n  id: TimezoneRegions.ArcticLongyearbyen,\n  name: 'Arctic/Longyearbyen',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AsiaAden: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAden,\n  name: 'Asia/Aden',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaAlmaty: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAlmaty,\n  name: 'Asia/Almaty',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.AlmaAtaTime,\n};\n\nexport const AsiaAmman: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAmman,\n  name: 'Asia/Amman',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaAnadyr: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAnadyr,\n  name: 'Asia/Anadyr',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const AsiaAqtau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtau,\n  name: 'Asia/Aqtau',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAqtobe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtobe,\n  name: 'Asia/Aqtobe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAshgabat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAshgabat,\n  name: 'Asia/Ashgabat',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TurkmenistanTime,\n};\n\nexport const AsiaBaghdad: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaghdad,\n  name: 'Asia/Baghdad',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBahrain: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBahrain,\n  name: 'Asia/Bahrain',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBaku: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaku,\n  name: 'Asia/Baku',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AzerbaijanTime,\n};\n\nexport const AsiaBangkok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBangkok,\n  name: 'Asia/Bangkok',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaBarnaul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBarnaul,\n  name: 'Asia/Barnaul',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaBeirut: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBeirut,\n  name: 'Asia/Beirut',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaBishkek: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBishkek,\n  name: 'Asia/Bishkek',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KyrgyzstanTime,\n};\n\nexport const AsiaBrunei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBrunei,\n  name: 'Asia/Brunei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.BruneiTime,\n};\n\nexport const AsiaChita: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChita,\n  name: 'Asia/Chita',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaChoibalsan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChoibalsan,\n  name: 'Asia/Choibalsan',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChoibalsanStandardTime,\n};\n\nexport const AsiaColombo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaColombo,\n  name: 'Asia/Colombo',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaDamascus: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDamascus,\n  name: 'Asia/Damascus',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaDhaka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDhaka,\n  name: 'Asia/Dhaka',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BangladeshStandardTime,\n};\n\nexport const AsiaDili: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDili,\n  name: 'Asia/Dili',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaDubai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDubai,\n  name: 'Asia/Dubai',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaDushanbe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDushanbe,\n  name: 'Asia/Dushanbe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TajikistanTime,\n};\n\nexport const AsiaFamagusta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaFamagusta,\n  name: 'Asia/Famagusta',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaGaza: TimezoneRegion = {\n  id: TimezoneRegions.AsiaGaza,\n  name: 'Asia/Gaza',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHebron: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHebron,\n  name: 'Asia/Hebron',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHoChiMinh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHoChiMinh,\n  name: 'Asia/Ho_Chi_Minh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaHongKong: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHongKong,\n  name: 'Asia/Hong_Kong',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.HongKongTime,\n};\n\nexport const AsiaHovd: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHovd,\n  name: 'Asia/Hovd',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.HovdTime,\n};\n\nexport const AsiaIrkutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaIrkutsk,\n  name: 'Asia/Irkutsk',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.IrkutskTime,\n};\n\nexport const AsiaJakarta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJakarta,\n  name: 'Asia/Jakarta',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaJayapura: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJayapura,\n  name: 'Asia/Jayapura',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaJerusalem: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJerusalem,\n  name: 'Asia/Jerusalem',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaKabul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKabul,\n  name: 'Asia/Kabul',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AfghanistanTime,\n};\n\nexport const AsiaKamchatka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKamchatka,\n  name: 'Asia/Kamchatka',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.KamchatkaTime,\n};\n\nexport const AsiaKarachi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKarachi,\n  name: 'Asia/Karachi',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.PakistanStandardTime,\n};\n\nexport const AsiaKathmandu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKathmandu,\n  name: 'Asia/Kathmandu',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.NepalTime,\n};\n\nexport const AsiaKhandyga: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKhandyga,\n  name: 'Asia/Khandyga',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaKolkata: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKolkata,\n  name: 'Asia/Kolkata',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaKrasnoyarsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKrasnoyarsk,\n  name: 'Asia/Krasnoyarsk',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\nexport const AsiaKualaLumpur: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKualaLumpur,\n  name: 'Asia/Kuala_Lumpur',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuching: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuching,\n  name: 'Asia/Kuching',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuwait: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuwait,\n  name: 'Asia/Kuwait',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaMacau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMacau,\n  name: 'Asia/Macau',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaMagadan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMagadan,\n  name: 'Asia/Magadan',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.MagadanTime,\n};\n\nexport const AsiaMakassar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMakassar,\n  name: 'Asia/Makassar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaTime,\n};\n\nexport const AsiaManila: TimezoneRegion = {\n  id: TimezoneRegions.AsiaManila,\n  name: 'Asia/Manila',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PhilippineTime,\n};\n\nexport const AsiaMuscat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMuscat,\n  name: 'Asia/Muscat',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaNovokuznetsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovokuznetsk,\n  name: 'Asia/Novokuznetsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaNovosibirsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovosibirsk,\n  name: 'Asia/Novosibirsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaOmsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOmsk,\n  name: 'Asia/Omsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.OmskTime,\n};\n\nexport const AsiaOral: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOral,\n  name: 'Asia/Oral',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.OralTime,\n};\n\nexport const AsiaPhnomPenh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPhnomPenh,\n  name: 'Asia/Phnom_Penh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaPontianak: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPontianak,\n  name: 'Asia/Pontianak',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaPyongyang: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPyongyang,\n  name: 'Asia/Pyongyang',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaQatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQatar,\n  name: 'Asia/Qatar',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaQyzylorda: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQyzylorda,\n  name: 'Asia/Qyzylorda',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.WestKazakhstanTime,\n};\n\nexport const AsiaRangoon: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRangoon,\n  name: 'Asia/Rangoon',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.MyanmarStandardTime,\n};\n\nexport const AsiaRiyadh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRiyadh,\n  name: 'Asia/Riyadh',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaSakhalin: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSakhalin,\n  name: 'Asia/Sakhalin',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SakhalinIslandTime,\n};\n\nexport const AsiaSamarkand: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSamarkand,\n  name: 'Asia/Samarkand',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaSeoul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSeoul,\n  name: 'Asia/Seoul',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaShanghai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaShanghai,\n  name: 'Asia/Shanghai',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaSingapore: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSingapore,\n  name: 'Asia/Singapore',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.SingaporeStandardTime,\n};\n\nexport const AsiaSrednekolymsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSrednekolymsk,\n  name: 'Asia/Srednekolymsk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SrednekolymskTime,\n};\n\nexport const AsiaTaipei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTaipei,\n  name: 'Asia/Taipei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaTashkent: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTashkent,\n  name: 'Asia/Tashkent',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaTbilisi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTbilisi,\n  name: 'Asia/Tbilisi',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GeorgiaStandardTime,\n};\n\nexport const AsiaTehran: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTehran,\n  name: 'Asia/Tehran',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.IranStandardTime,\n};\n\nexport const AsiaThimphu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaThimphu,\n  name: 'Asia/Thimphu',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BhutanTime,\n};\n\nexport const AsiaTokyo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTokyo,\n  name: 'Asia/Tokyo',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaTomsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTomsk,\n  name: 'Asia/Tomsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaUlaanbaatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUlaanbaatar,\n  name: 'Asia/Ulaanbaatar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.UlaanbaatarStandardTime,\n};\n\nexport const AsiaUrumqi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUrumqi,\n  name: 'Asia/Urumqi',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaUstNera: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUstNera,\n  name: 'Asia/Ust-Nera',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaVientiane: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVientiane,\n  name: 'Asia/Vientiane',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaVladivostok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVladivostok,\n  name: 'Asia/Vladivostok',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaYakutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYakutsk,\n  name: 'Asia/Yakutsk',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaYekaterinburg: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYekaterinburg,\n  name: 'Asia/Yekaterinburg',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.YekaterinburgTime,\n};\n\nexport const AsiaYerevan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYerevan,\n  name: 'Asia/Yerevan',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ArmeniaTime,\n};\n\nexport const AtlanticAzores: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticAzores,\n  name: 'Atlantic/Azores',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.AzoresStandardTime,\n};\n\nexport const AtlanticBermuda: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticBermuda,\n  name: 'Atlantic/Bermuda',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AtlanticCanary: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCanary,\n  name: 'Atlantic/Canary',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticCapeVerde: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCapeVerde,\n  name: 'Atlantic/Cape_Verde',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CapeVerdeTime,\n};\n\nexport const AtlanticFaroe: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticFaroe,\n  name: 'Atlantic/Faroe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticMadeira: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticMadeira,\n  name: 'Atlantic/Madeira',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticReykjavik: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticReykjavik,\n  name: 'Atlantic/Reykjavik',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticSouthGeorgia: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticSouthGeorgia,\n  name: 'Atlantic/South_Georgia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AtlanticStHelena: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStHelena,\n  name: 'Atlantic/St_Helena',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticStanley: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStanley,\n  name: 'Atlantic/Stanley',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.FalklandIslandsTime,\n};\n\nexport const AustraliaAdelaide: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaAdelaide,\n  name: 'Australia/Adelaide',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaBrisbane: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrisbane,\n  name: 'Australia/Brisbane',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaBrokenHill: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrokenHill,\n  name: 'Australia/Broken_Hill',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaCanberra: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCanberra,\n  name: 'Australia/Canberra',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaCurrie: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCurrie,\n  name: 'Australia/Currie',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaDarwin: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaDarwin,\n  name: 'Australia/Darwin',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaEucla: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaEucla,\n  name: 'Australia/Eucla',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n  timezone: Timezones.AustralianCentralWesternStandardTime,\n};\n\nexport const AustraliaHobart: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaHobart,\n  name: 'Australia/Hobart',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLindeman: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLindeman,\n  name: 'Australia/Lindeman',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLordHowe: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLordHowe,\n  name: 'Australia/Lord_Howe',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n  timezone: Timezones.LordHoweStandardTime,\n};\n\nexport const AustraliaMelbourne: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaMelbourne,\n  name: 'Australia/Melbourne',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaPerth: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaPerth,\n  name: 'Australia/Perth',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.AustralianWesternStandardTime,\n};\n\nexport const AustraliaSydney: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaSydney,\n  name: 'Australia/Sydney',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const EuropeAmsterdam: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAmsterdam,\n  name: 'Europe/Amsterdam',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAndorra: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAndorra,\n  name: 'Europe/Andorra',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAthens: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAthens,\n  name: 'Europe/Athens',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBelgrade: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBelgrade,\n  name: 'Europe/Belgrade',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBerlin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBerlin,\n  name: 'Europe/Berlin',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBratislava: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBratislava,\n  name: 'Europe/Bratislava',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBrussels: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBrussels,\n  name: 'Europe/Brussels',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBucharest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBucharest,\n  name: 'Europe/Bucharest',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBudapest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBudapest,\n  name: 'Europe/Budapest',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBusingen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBusingen,\n  name: 'Europe/Busingen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeChisinau: TimezoneRegion = {\n  id: TimezoneRegions.EuropeChisinau,\n  name: 'Europe/Chisinau',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeCopenhagen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeCopenhagen,\n  name: 'Europe/Copenhagen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeDublin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeDublin,\n  name: 'Europe/Dublin',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeGibraltar: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGibraltar,\n  name: 'Europe/Gibraltar',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeGuernsey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGuernsey,\n  name: 'Europe/Guernsey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeHelsinki: TimezoneRegion = {\n  id: TimezoneRegions.EuropeHelsinki,\n  name: 'Europe/Helsinki',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeIsleOfMan: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIsleOfMan,\n  name: 'Europe/Isle_of_Man',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeIstanbul: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIstanbul,\n  name: 'Europe/Istanbul',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeJersey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeJersey,\n  name: 'Europe/Jersey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeKaliningrad: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKaliningrad,\n  name: 'Europe/Kaliningrad',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeKiev: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKiev,\n  name: 'Europe/Kiev',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeLisbon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLisbon,\n  name: 'Europe/Lisbon',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLjubljana: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLjubljana,\n  name: 'Europe/Ljubljana',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeLondon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLondon,\n  name: 'Europe/London',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLuxembourg: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLuxembourg,\n  name: 'Europe/Luxembourg',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMadrid: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMadrid,\n  name: 'Europe/Madrid',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMalta: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMalta,\n  name: 'Europe/Malta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMariehamn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMariehamn,\n  name: 'Europe/Mariehamn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMinsk: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMinsk,\n  name: 'Europe/Minsk',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMonaco: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMonaco,\n  name: 'Europe/Monaco',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMoscow: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMoscow,\n  name: 'Europe/Moscow',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeOslo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeOslo,\n  name: 'Europe/Oslo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeParis: TimezoneRegion = {\n  id: TimezoneRegions.EuropeParis,\n  name: 'Europe/Paris',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePodgorica: TimezoneRegion = {\n  id: TimezoneRegions.EuropePodgorica,\n  name: 'Europe/Podgorica',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePrague: TimezoneRegion = {\n  id: TimezoneRegions.EuropePrague,\n  name: 'Europe/Prague',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeRiga: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRiga,\n  name: 'Europe/Riga',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeRome: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRome,\n  name: 'Europe/Rome',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSamara: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSamara,\n  name: 'Europe/Samara',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSanMarino: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSanMarino,\n  name: 'Europe/San_Marino',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSarajevo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSarajevo,\n  name: 'Europe/Sarajevo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSimferopol: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSimferopol,\n  name: 'Europe/Simferopol',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSkopje: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSkopje,\n  name: 'Europe/Skopje',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSofia: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSofia,\n  name: 'Europe/Sofia',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeStockholm: TimezoneRegion = {\n  id: TimezoneRegions.EuropeStockholm,\n  name: 'Europe/Stockholm',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeTallinn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTallinn,\n  name: 'Europe/Tallinn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeTirane: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTirane,\n  name: 'Europe/Tirane',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeUzhgorod: TimezoneRegion = {\n  id: TimezoneRegions.EuropeUzhgorod,\n  name: 'Europe/Uzhgorod',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVaduz: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVaduz,\n  name: 'Europe/Vaduz',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVatican: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVatican,\n  name: 'Europe/Vatican',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVienna: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVienna,\n  name: 'Europe/Vienna',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVilnius: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVilnius,\n  name: 'Europe/Vilnius',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVolgograd: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVolgograd,\n  name: 'Europe/Volgograd',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeWarsaw: TimezoneRegion = {\n  id: TimezoneRegions.EuropeWarsaw,\n  name: 'Europe/Warsaw',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZagreb: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZagreb,\n  name: 'Europe/Zagreb',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZaporozhye: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZaporozhye,\n  name: 'Europe/Zaporozhye',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeZurich: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZurich,\n  name: 'Europe/Zurich',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const IndianAntananarivo: TimezoneRegion = {\n  id: TimezoneRegions.IndianAntananarivo,\n  name: 'Indian/Antananarivo',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianChagos: TimezoneRegion = {\n  id: TimezoneRegions.IndianChagos,\n  name: 'Indian/Chagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.IndianOceanTime,\n};\n\nexport const IndianChristmas: TimezoneRegion = {\n  id: TimezoneRegions.IndianChristmas,\n  name: 'Indian/Christmas',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.ChristmasIslandTime,\n};\n\nexport const IndianCocos: TimezoneRegion = {\n  id: TimezoneRegions.IndianCocos,\n  name: 'Indian/Cocos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.CocosIslandsTime,\n};\n\nexport const IndianComoro: TimezoneRegion = {\n  id: TimezoneRegions.IndianComoro,\n  name: 'Indian/Comoro',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianKerguelen: TimezoneRegion = {\n  id: TimezoneRegions.IndianKerguelen,\n  name: 'Indian/Kerguelen',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.FrenchSouthernAndAntarcticTime,\n};\n\nexport const IndianMahe: TimezoneRegion = {\n  id: TimezoneRegions.IndianMahe,\n  name: 'Indian/Mahe',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.SeychellesTime,\n};\n\nexport const IndianMaldives: TimezoneRegion = {\n  id: TimezoneRegions.IndianMaldives,\n  name: 'Indian/Maldives',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.MaldivesTime,\n};\n\nexport const IndianMauritius: TimezoneRegion = {\n  id: TimezoneRegions.IndianMauritius,\n  name: 'Indian/Mauritius',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.MauritiusTime,\n};\n\nexport const IndianMayotte: TimezoneRegion = {\n  id: TimezoneRegions.IndianMayotte,\n  name: 'Indian/Mayotte',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianReunion: TimezoneRegion = {\n  id: TimezoneRegions.IndianReunion,\n  name: 'Indian/Reunion',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ReunionTime,\n};\n\nexport const PacificApia: TimezoneRegion = {\n  id: TimezoneRegions.PacificApia,\n  name: 'Pacific/Apia',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificAuckland: TimezoneRegion = {\n  id: TimezoneRegions.PacificAuckland,\n  name: 'Pacific/Auckland',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const PacificChatham: TimezoneRegion = {\n  id: TimezoneRegions.PacificChatham,\n  name: 'Pacific/Chatham',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const PacificEaster: TimezoneRegion = {\n  id: TimezoneRegions.PacificEaster,\n  name: 'Pacific/Easter',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.EasterIslandStandardTime,\n};\n\nexport const PacificEfate: TimezoneRegion = {\n  id: TimezoneRegions.PacificEfate,\n  name: 'Pacific/Efate',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.VanuatuTime,\n};\n\nexport const PacificEnderbury: TimezoneRegion = {\n  id: TimezoneRegions.PacificEnderbury,\n  name: 'Pacific/Enderbury',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFakaofo: TimezoneRegion = {\n  id: TimezoneRegions.PacificFakaofo,\n  name: 'Pacific/Fakaofo',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFiji: TimezoneRegion = {\n  id: TimezoneRegions.PacificFiji,\n  name: 'Pacific/Fiji',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.FijiTime,\n};\n\nexport const PacificFunafuti: TimezoneRegion = {\n  id: TimezoneRegions.PacificFunafuti,\n  name: 'Pacific/Funafuti',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.TuvaluTime,\n};\n\nexport const PacificGalapagos: TimezoneRegion = {\n  id: TimezoneRegions.PacificGalapagos,\n  name: 'Pacific/Galapagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.GalapagosTime,\n};\n\nexport const PacificGambier: TimezoneRegion = {\n  id: TimezoneRegions.PacificGambier,\n  name: 'Pacific/Gambier',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.GambierIslandTime,\n};\n\nexport const PacificGuadalcanal: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuadalcanal,\n  name: 'Pacific/Guadalcanal',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SolomonIslandsTime,\n};\n\nexport const PacificGuam: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuam,\n  name: 'Pacific/Guam',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificHonolulu: TimezoneRegion = {\n  id: TimezoneRegions.PacificHonolulu,\n  name: 'Pacific/Honolulu',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificJohnston: TimezoneRegion = {\n  id: TimezoneRegions.PacificJohnston,\n  name: 'Pacific/Johnston',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificKiritimati: TimezoneRegion = {\n  id: TimezoneRegions.PacificKiritimati,\n  name: 'Pacific/Kiritimati',\n  offset: TimezoneOffset.UTC_PLUS_14,\n  timezone: Timezones.LineIslandsTime,\n};\n\nexport const PacificKosrae: TimezoneRegion = {\n  id: TimezoneRegions.PacificKosrae,\n  name: 'Pacific/Kosrae',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.KosraeTime,\n};\n\nexport const PacificKwajalein: TimezoneRegion = {\n  id: TimezoneRegions.PacificKwajalein,\n  name: 'Pacific/Kwajalein',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMajuro: TimezoneRegion = {\n  id: TimezoneRegions.PacificMajuro,\n  name: 'Pacific/Majuro',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMarquesas: TimezoneRegion = {\n  id: TimezoneRegions.PacificMarquesas,\n  name: 'Pacific/Marquesas',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.MarquesasIslandsTime,\n};\n\nexport const PacificMidway: TimezoneRegion = {\n  id: TimezoneRegions.PacificMidway,\n  name: 'Pacific/Midway',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificNauru: TimezoneRegion = {\n  id: TimezoneRegions.PacificNauru,\n  name: 'Pacific/Nauru',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NauruTime,\n};\n\nexport const PacificNiue: TimezoneRegion = {\n  id: TimezoneRegions.PacificNiue,\n  name: 'Pacific/Niue',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NiueTime,\n};\n\nexport const PacificNorfolk: TimezoneRegion = {\n  id: TimezoneRegions.PacificNorfolk,\n  name: 'Pacific/Norfolk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NorfolkIslandTime,\n};\n\nexport const PacificNoumea: TimezoneRegion = {\n  id: TimezoneRegions.PacificNoumea,\n  name: 'Pacific/Noumea',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const PacificPagoPago: TimezoneRegion = {\n  id: TimezoneRegions.PacificPagoPago,\n  name: 'Pacific/Pago_Pago',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificPalau: TimezoneRegion = {\n  id: TimezoneRegions.PacificPalau,\n  name: 'Pacific/Palau',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.PalauTime,\n};\n\nexport const PacificPitcairn: TimezoneRegion = {\n  id: TimezoneRegions.PacificPitcairn,\n  name: 'Pacific/Pitcairn',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PitcairnTime,\n};\n\nexport const PacificPonape: TimezoneRegion = {\n  id: TimezoneRegions.PacificPonape,\n  name: 'Pacific/Ponape',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificPortMoresby: TimezoneRegion = {\n  id: TimezoneRegions.PacificPortMoresby,\n  name: 'Pacific/Port_Moresby',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.PapuaNewGuineaTime,\n};\n\nexport const PacificRarotonga: TimezoneRegion = {\n  id: TimezoneRegions.PacificRarotonga,\n  name: 'Pacific/Rarotonga',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.CookIslandTime,\n};\n\nexport const PacificSaipan: TimezoneRegion = {\n  id: TimezoneRegions.PacificSaipan,\n  name: 'Pacific/Saipan',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificTahiti: TimezoneRegion = {\n  id: TimezoneRegions.PacificTahiti,\n  name: 'Pacific/Tahiti',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.TahitiTime,\n};\n\nexport const PacificTarawa: TimezoneRegion = {\n  id: TimezoneRegions.PacificTarawa,\n  name: 'Pacific/Tarawa',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.GilbertIslandTime,\n};\n\nexport const PacificTongatapu: TimezoneRegion = {\n  id: TimezoneRegions.PacificTongatapu,\n  name: 'Pacific/Tongatapu',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificChuuk: TimezoneRegion = {\n  id: TimezoneRegions.PacificChuuk,\n  name: 'Pacific/Chuuk',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n\nexport const PacificPohnpei: TimezoneRegion = {\n  id: TimezoneRegions.PacificPohnpei,\n  name: 'Pacific/Pohnpei',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificYap: TimezoneRegion = {\n  id: TimezoneRegions.PacificYap,\n  name: 'Pacific/Yap',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "export class NonError extends Error {\n\tname = 'NonError';\n\n\tconstructor(message) {\n\t\tsuper(NonError._prepareSuperMessage(message));\n\t}\n\n\tstatic _prepareSuperMessage(message) {\n\t\ttry {\n\t\t\treturn JSON.stringify(message);\n\t\t} catch {\n\t\t\treturn String(message);\n\t\t}\n\t}\n}\n\nconst commonProperties = [\n\t{\n\t\tproperty: 'name',\n\t\tenumerable: false,\n\t},\n\t{\n\t\tproperty: 'message',\n\t\tenumerable: false,\n\t},\n\t{\n\t\tproperty: 'stack',\n\t\tenumerable: false,\n\t},\n\t{\n\t\tproperty: 'code',\n\t\tenumerable: true,\n\t},\n];\n\nconst toJsonWasCalled = Symbol('.toJSON was called');\n\nconst toJSON = from => {\n\tfrom[toJsonWasCalled] = true;\n\tconst json = from.toJSON();\n\tdelete from[toJsonWasCalled];\n\treturn json;\n};\n\nconst destroyCircular = ({\n\tfrom,\n\tseen,\n\tto_,\n\tforceEnumerable,\n\tmaxDepth,\n\tdepth,\n}) => {\n\tconst to = to_ || (Array.isArray(from) ? [] : {});\n\n\tseen.push(from);\n\n\tif (depth >= maxDepth) {\n\t\treturn to;\n\t}\n\n\tif (typeof from.toJSON === 'function' && from[toJsonWasCalled] !== true) {\n\t\treturn toJSON(from);\n\t}\n\n\tfor (const [key, value] of Object.entries(from)) {\n\t\t// eslint-disable-next-line node/prefer-global/buffer\n\t\tif (typeof Buffer === 'function' && Buffer.isBuffer(value)) {\n\t\t\tto[key] = '[object Buffer]';\n\t\t\tcontinue;\n\t\t}\n\n\t\t// TODO: Use `stream.isReadable()` when targeting Node.js 18.\n\t\tif (value !== null && typeof value === 'object' && typeof value.pipe === 'function') {\n\t\t\tto[key] = '[object Stream]';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (typeof value === 'function') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\tto[key] = value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!seen.includes(from[key])) {\n\t\t\tdepth++;\n\n\t\t\tto[key] = destroyCircular({\n\t\t\t\tfrom: from[key],\n\t\t\t\tseen: [...seen],\n\t\t\t\tforceEnumerable,\n\t\t\t\tmaxDepth,\n\t\t\t\tdepth,\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tto[key] = '[Circular]';\n\t}\n\n\tfor (const {property, enumerable} of commonProperties) {\n\t\tif (typeof from[property] === 'string') {\n\t\t\tObject.defineProperty(to, property, {\n\t\t\t\tvalue: from[property],\n\t\t\t\tenumerable: forceEnumerable ? true : enumerable,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn to;\n};\n\nexport function serializeError(value, options = {}) {\n\tconst {maxDepth = Number.POSITIVE_INFINITY} = options;\n\n\tif (typeof value === 'object' && value !== null) {\n\t\treturn destroyCircular({\n\t\t\tfrom: value,\n\t\t\tseen: [],\n\t\t\tforceEnumerable: true,\n\t\t\tmaxDepth,\n\t\t\tdepth: 0,\n\t\t});\n\t}\n\n\t// People sometimes throw things besides Error objects\u2026\n\tif (typeof value === 'function') {\n\t\t// `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n\t\treturn `[Function: ${(value.name || 'anonymous')}]`;\n\t}\n\n\treturn value;\n}\n\nexport function deserializeError(value, options = {}) {\n\tconst {maxDepth = Number.POSITIVE_INFINITY} = options;\n\n\tif (value instanceof Error) {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n\t\tconst newError = new Error(); // eslint-disable-line unicorn/error-message\n\t\tdestroyCircular({\n\t\t\tfrom: value,\n\t\t\tseen: [],\n\t\t\tto_: newError,\n\t\t\tmaxDepth,\n\t\t\tdepth: 0,\n\t\t});\n\t\treturn newError;\n\t}\n\n\treturn new NonError(value);\n}\n", "import {\n  FormValidationProblem,\n  HttpRequest,\n  LogLevel,\n  Model,\n  ModelField,\n  ModelValidationProblem,\n  Task,\n} from '@srclaunch/types';\nimport { Exception } from '../lib/exception';\nimport { ExceptionRemediation } from './remediation';\n\nexport enum ExceptionCode {\n  /* Generic or other exceptions of unknown origin */\n  Warning = 999,\n  Exception,\n  UnmanagedException,\n  CaughtException,\n  UncaughtException,\n  UnhandledPromiseRejectionException,\n\n  /* User Authenticationn/permissions related exceptions */\n  AuthenticationException = 2000,\n  AuthenticationExpiredAccessTokenException,\n  AuthenticationInvalidAccessTokenException,\n  AuthenticationMissingAccessTokenException,\n  AuthenticationExpiredRefreshTokenException,\n  AuthenticationInvalidRefreshTokenException,\n  AuthenticationMissingRefreshTokenException,\n  AuthenticationMissingDeviceKeyException,\n  AuthenticationUnAuthorizedAccessException,\n  AuthenticationCodeMismatchException,\n  AuthenticationExpiredCodeException,\n  AuthenticationLoginException,\n  AuthenticationLoginInvalidCredentialsException,\n  AuthenticationLoginTooManyFailedAttemptsException,\n  AuthenticationLimitExceededException,\n  AuthenticationUnauthorizedAccessException,\n  AuthenticationTooManyRequestsException,\n  AuthenticationUserNotFoundException,\n  AuthenticationSignupException,\n  AuthenticationUsernameAvailabilityCheckException,\n  AuthenticationUsernameExistsException,\n  AuthenticationAliasExistException,\n  AuthenticationCodeDeliveryFailureException,\n  AuthenticationMFAMethodNotFoundException,\n  AuthenticationNotAuthorizedException,\n  AuthenticationPasswordResetRequiredException,\n  AuthenticationUserNotConfirmedException,\n\n  /* Database related exceptions */\n  DatabaseException = 3000,\n  SequelizeNotInitializedException,\n\n  /* Server process exceptions */\n  ProcessException = 4000,\n  ProcessWarningException,\n  KillProcessException,\n  FatalException,\n  ProcessSigTermException,\n  ProcessSigIntException,\n  MissingEnvironmentVariable,\n\n  /* Network related exceptions */\n  NetworkException = 5000,\n  HttpException,\n  HttpRequestException,\n  HttpRequestResourceNotFoundException,\n  HttpResponseException,\n\n  /* Exceptions originating from a third-party and/or service integration */\n  ServiceProviderException = 6000,\n\n  // AWS\n  AWSException,\n  AWSMissingAccessKeyException,\n  AWSMissingSecretKeyException,\n\n  // AWS Cognito\n  CognitoException,\n  CognitoInternalErrorException,\n  CognitoInvalidEmailRoleAccessPolicyException,\n  CognitoInvalidLambdaResponseException,\n  CognitoUserLambdaValidationException,\n  CognitoInvalidParameterException,\n  CognitoInvalidSmsRoleAccessPolicyException,\n  CognitoInvalidSmsRoleTrustRelationshipException,\n  CognitoInvalidUserPoolConfigurationException,\n  CognitoResourceNotFoundException,\n  CognitoMissingUserPoolClientIdException,\n  CognitoMissingUserPoolIdException,\n  CognitoUnexpectedLambdaException,\n\n  // Stripe\n  StripeException,\n  StripeMissingSecretKeyException,\n  StripeSubscriptionCreationFailedException,\n  StripePaymentMethodRequiredException,\n\n  /* Exceptions associated with core entities and business objects */\n  UserException = 7000,\n  NullUserException,\n  UserStateConflictException,\n  NullAccountException,\n\n  /* Validation exceptions caused by input that is invalid or unexpected */\n  ValidationException = 8000,\n  InvalidTypeException,\n  MissingArgumentException,\n  MissingPropertyException,\n  InvalidArgumentException,\n  InvalidPropertyException,\n  MissingRequestBodyPropertyException,\n  MissingRequestUrlParameterException,\n  MissingCookieException,\n}\n\n/**\n *\n * Base exception and inherited classes constructor arguments\n * @constructor\n * @arg {Record<string, unknown>} context - Contextual data related to the exception that can be used for debugging\n * @arg {string} file - The file the exception originated in. Useful for debugging.\n * @arg {string} func - The function or method the exception originated in. Useful for debugging.\n * @arg {string} description - A developer friendly description of the exception.\n * @arg {Model['id']} model.id - The unique id of the model associated with the exception.\n * @arg {Model['type']} model.type - The type of model associated with the exception.\n * @arg {Record<string,string>} request.headers - The request headers.\n * @arg {string} field - The name of the field as passed in the request if a validation error occurs.\n * @arg {string} request.id - A unique ID associated with the request used for tracing the exception.\n * @arg {any} request.body - The body payload of the request.\n * @arg {Record<string,string>} request.headers - The request headers.\n * @arg {string} request.host - The HTTP host the requested resource is accessible from.\n * @arg {string} request.method - The request's HTTP method.\n * @arg {string} request.resource - The HTTP resource being requested.\n * @arg {any} response.body - The response body payload.\n * @arg {HttpResponseCode} response.code - The HTTP response status code.\n * @arg {HttpResponseCodeDetails} response.details - The headers returned from the response.\n * @arg {Record<string,string>} response.headers - The headers returned from the response.\n * @arg {string} request.method - The request's HTTP method.\n * @arg {string} request.resource - The HTTP resource being requested.\n * @arg {string} scope - Higher-level scope of the exception.\n * @arg {ExceptionRemediation} remediation - Recommended remediation details.\n * @arg {Record<string, unknown>} tags - Key/value tags associated with an exception.\n * @arg {Task['id']} task.id - The unique id of a Task associated with the exception.\n * @arg {string} user.email - The user's email address.\n * @arg {string} user.phone - The user's telephone number.\n */\nexport type ExceptionConstructorArgs = {\n  cause?: Exception | Error;\n  context?: Record<string, unknown>;\n  data?: unknown;\n  description?: string;\n  model?: {\n    name: Model['name'];\n    field?: ModelField['name'];\n    problem?: ModelValidationProblem;\n  };\n  form?: {\n    field?: string;\n    problem?: FormValidationProblem;\n  };\n  friendlyMessage?: string;\n  logLevel?: LogLevel.Critical | LogLevel.Exception | LogLevel.Warning;\n  origin?: {\n    block?: string;\n    file?: string;\n    function?: string;\n  };\n  pii?: boolean;\n  request?: HttpRequest;\n  response?: {\n    status?: {\n      code: number;\n    };\n  };\n  scope?: string;\n  remediation?: ExceptionRemediation;\n  tags?: Record<string, unknown>;\n  task?: {\n    id: Task['id'];\n  };\n  user?: {\n    id?: string;\n    email?: string;\n    phone?: string;\n  };\n};\n\nexport type ExceptionObject = ExceptionConstructorArgs & {\n  created: string;\n  id?: string;\n  name?: string;\n  stack?: string;\n  message?: string;\n  code?: string;\n};\n", "import {\n  Environment,\n  FormValidationProblem,\n  HttpRequest,\n  ISO8601String,\n  LogLevel,\n  Model,\n  ModelField,\n  ModelValidationProblem,\n  Task,\n} from '@srclaunch/types';\nimport { nanoid } from 'nanoid';\nimport { serializeError } from 'serialize-error';\n\nimport {\n  ExceptionCode,\n  ExceptionConstructorArgs,\n  ExceptionObject,\n} from '../types/exception';\nimport { ExceptionRemediation } from '../types/remediation';\n\n//\n// function getStack(error: Error): string {\n//   let stack: Error['stack'] = error.stack;\n//\n//   if (stack) {\n//     return stack.split('\\n').slice(1).join('\\n');\n//   }\n//\n//   const { captureStackTrace, prepareStackTrace } = Error;\n//\n//   stack = captureStackTrace(error, prepareStackTrace);\n//   if (stack) {\n//     return stack.split('\\n').slice(1).join('\\n');\n//   }\n//\n//   stack = new Error().stack;\n//   if (stack) {\n//     return stack.split('\\n').slice(1).join('\\n');\n//   }\n//\n//   return '';\n// }\n\n/**\n * @class\n * This is the base class used for all exceptions caught and thrown in .\n *\n * @constructor\n * @param {string} message - Generally the entity ID associated with the failure\n * @param {Error} cause - The original thrown error, of which the stack trace will be used instead of `this`.\n * @param {ExceptionBaseConstructorArgs} ...rest\n *\n * @property {Date} created - Date and time the exception was thrown.\n * @property {string} block - asdf\n *\n */\nexport class Exception extends Error {\n  // @ts-ignore\n  override readonly cause?: Exception | Error;\n  readonly code: ExceptionCode = ExceptionCode.Exception;\n  readonly context?: Record<string, unknown>;\n  readonly created: ISO8601String;\n  readonly data?: unknown;\n  readonly description?: string;\n  readonly model?: {\n    readonly name: Model['name'];\n    readonly field?: ModelField['name'];\n    readonly problem?: ModelValidationProblem;\n  };\n  readonly form?: {\n    readonly field?: ModelField['name'] | string;\n    readonly problem?: FormValidationProblem;\n  };\n  readonly friendlyMessage?: string = 'An unknown error has occurred. :(';\n  readonly id?: string;\n  readonly logLevel?: LogLevel = LogLevel.Exception;\n  readonly origin?: {\n    readonly block?: string;\n    readonly file?: string;\n    readonly function?: string;\n  };\n  readonly pii?: boolean;\n  readonly request?: HttpRequest;\n  readonly response?: {\n    readonly status?: {\n      readonly code: number;\n    };\n  };\n  readonly scope?: string;\n  readonly remediation?: ExceptionRemediation;\n  readonly tags?: Record<string, unknown>;\n  readonly task?: {\n    readonly id: Task['id'];\n  };\n  readonly user?: {\n    readonly id?: string;\n    readonly email?: string;\n    readonly phone?: string;\n  };\n  readonly __proto__: Error;\n\n  public constructor(message: string, details?: ExceptionConstructorArgs) {\n    super(message);\n\n    // const logger = new Logger();\n\n    // Restore prototype chain\n    const actualProto = new.target.prototype;\n\n    this.__proto__ = actualProto;\n\n    // Capture stack trace when possible\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(details?.cause ?? this, Exception);\n    }\n\n    this.id = nanoid();\n    this.name = this.constructor.name;\n    this.created = new Date().toString();\n    this.description = details?.description ?? this.description;\n    this.remediation = details?.remediation ?? this.remediation;\n    this.scope = details?.scope ?? this.scope;\n\n    if (details) {\n      const {\n        cause,\n        context,\n        data,\n        model,\n        form,\n        origin,\n        pii,\n        request,\n        response,\n        tags,\n        task,\n        user,\n      } = details;\n\n      this.cause = cause;\n      this.context = context;\n      this.data = data;\n      this.model = model;\n      this.form = form;\n      this.origin = origin;\n      this.pii = pii;\n      this.request = request;\n      this.response = response;\n      this.task = task;\n      this.tags = tags;\n      this.user = user;\n    }\n  }\n\n  toJSON(): ExceptionObject {\n    return serializeError(this) as ExceptionObject;\n  }\n}\n", "import { Logger } from '@srclaunch/logger';\n\nimport { Exception } from './exception';\n\nconst logger = new Logger();\n\ntype CaptureOptions = {\n  readonly logger?: Logger;\n};\n\ntype CaptureResult = {\n  readonly success: boolean;\n};\n\nexport async function captureError(\n  error: Error | Exception,\n  options?: CaptureOptions,\n): Promise<CaptureResult> {\n  try {\n    if (error instanceof Exception) {\n      logger.exception(error.toJSON());\n    } else if (error instanceof Error) {\n      const exception = new Exception(error.message, { cause: error });\n\n      logger.exception(exception.toJSON());\n    } else {\n      throw new Exception(\n        'Invalid exception or error instance passed to capturer.',\n      );\n    }\n\n    return { success: true };\n  } catch {\n    const exception = new Exception(error.message, { cause: error });\n\n    logger.exception(exception.toJSON());\n\n    return { success: false };\n  }\n}\n", "import { HttpResponseCode } from '@srclaunch/types';\n\nexport enum RetryStrategy {\n  Simple = 'simple',\n  ExponentialBackoff = 'exponential',\n  CircuitBreaker = 'circuit_breaker',\n}\n\nexport type ExceptionRemediation = {\n  response?: {\n    code?: HttpResponseCode;\n  };\n  retry?:\n    | boolean\n    | {\n        limit?: number;\n        strategy?: RetryStrategy;\n      };\n};\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../../exception.js';\nimport { ExceptionCode } from '../../../../types/index.js';\n\nexport class ProcessException extends Exception {\n  override code = ExceptionCode.ProcessException;\n  override description = 'A exception was caught in a process.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n}\n\nexport class ProcessWarningException extends ProcessException {\n  override code = ExceptionCode.ProcessWarningException;\n  override description = 'A warning was caught in a process.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n}\n\nexport class KillProcessException extends ProcessException {\n  override code = ExceptionCode.KillProcessException;\n  override description = 'Exception thrown to kill a Node.js \"gracefully\".';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class ProcessSigTermException extends ProcessException {\n  override code = ExceptionCode.ProcessSigTermException;\n  override description = 'Process received SIGTERM termination code.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class ProcessSigIntException extends ProcessException {\n  override code = ExceptionCode.ProcessSigIntException;\n  override description = 'Process received SIGINT termination code.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class FatalException extends ProcessException {\n  override code = ExceptionCode.FatalException;\n  override description = 'An fatal exception occurred which has crashed the server.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class MissingEnvironmentVariable extends ProcessException {\n  override code = ExceptionCode.MissingEnvironmentVariable;\n  override description = 'An environment variable is not set or unavailable.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../exception.js';\nimport { ExceptionCode } from '../../types/index.js';\nimport { ExceptionRemediation } from '../../types/remediation';\n\nexport class Warning extends Exception {\n  override code = ExceptionCode.Warning;\n  override description = 'A warning exception has been thrown.';\n  override friendlyMessage = 'An unknown warning has occurred.';\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n    },\n  };\n}\n\nexport class UnmanagedException extends Exception {\n  override code = ExceptionCode.UnmanagedException;\n  override description = 'An \"Error\" object that isn\\'t managed by AppLab';\n  override friendlyMessage = 'An unknown error has occurred.';\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n    },\n  };\n}\n\nexport class CaughtException extends Exception {\n  override code = ExceptionCode.CaughtException;\n  override description = 'An exception was caught within a try block.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n    },\n  };\n}\n\nexport class UncaughtException extends Exception {\n  override code = ExceptionCode.UncaughtException;\n  override description =\n    'An uncaught exception bubbled up and was caught automatically.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n    },\n  };\n}\n\nexport class UnhandledPromiseRejectionException extends Exception {\n  override code = ExceptionCode.UnhandledPromiseRejectionException;\n  override description = 'An unhandled promise rejection was caught automatically.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n    },\n  };\n}\n", "import {\n  KillProcessException,\n  ProcessSigIntException,\n  ProcessSigTermException,\n  ProcessWarningException,\n} from './exceptions/environments/server/process';\nimport {\n  UncaughtException,\n  UnhandledPromiseRejectionException,\n} from './exceptions/index';\n\nexport function handleProcessInterupt(\n  cb?: (exception: ProcessSigIntException) => unknown,\n): void {\n  process.on('SIGINT', () => {\n    const exception = new ProcessSigIntException('SIGINT signal received.', {});\n\n    if (cb) cb(exception);\n  });\n}\n\nexport function handleProcessTermination(\n  cb?: (exception: ProcessSigTermException) => unknown,\n): void {\n  process.on('SIGTERM', () => {\n    const exception = new ProcessSigTermException(\n      'SIGTERM signal received',\n      {},\n    );\n\n    if (cb) cb(exception);\n  });\n}\n\nexport function handleProcessExceptions(\n  cb?: (\n    err:\n      | UncaughtException\n      | UnhandledPromiseRejectionException\n      | ProcessWarningException,\n  ) => unknown,\n): void {\n  process.on('uncaughtException', async (err: UncaughtException) => {\n    if (err.name !== KillProcessException.name && cb) cb(err);\n  });\n\n  process.on('unhandledRejection', async (err: Error) => {\n    if (err.name !== KillProcessException.name) {\n      const exception = new UnhandledPromiseRejectionException(\n        `Unhandled Rejection: ${err.name}`,\n        {\n          cause: err,\n        },\n      );\n\n      if (cb) cb(exception);\n    }\n  });\n\n  process.on('warning', (err: ProcessWarningException) => {\n    if (cb) cb(err);\n  });\n}\n", "import { Environment, Platform } from '@srclaunch/types';\n\nimport {\n  ProcessException,\n  ProcessSigIntException,\n  ProcessSigTermException,\n} from './exceptions/environments/server/process';\nimport {\n  handleProcessExceptions,\n  handleProcessInterupt,\n  handleProcessTermination,\n} from './process';\n\nexport type ExceptionsClientOptions = {\n  readonly environment?: Environment;\n  readonly platform?: Platform;\n  readonly node?: {\n    readonly exceptionsHandler?: (exception: ProcessException) => void;\n    readonly interuptHandler?: (exception: ProcessSigIntException) => void;\n    readonly terminationHandler?: (exception: ProcessSigTermException) => void;\n  };\n};\n\nexport class ExceptionsClient {\n  private readonly environment?: ExceptionsClientOptions['environment'];\n  private readonly platform?: ExceptionsClientOptions['platform'];\n  private readonly node?: ExceptionsClientOptions['node'];\n\n  public constructor({ environment, platform, node }: ExceptionsClientOptions) {\n    this.environment = environment;\n    this.platform = platform;\n\n    if (node) {\n      if (node.exceptionsHandler)\n        handleProcessExceptions(node.exceptionsHandler);\n\n      if (node.interuptHandler) handleProcessInterupt(node.interuptHandler);\n\n      if (node.terminationHandler)\n        handleProcessTermination(node.terminationHandler);\n    }\n  }\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../exception.js';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { RetryStrategy } from '../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\n\nexport class AuthenticationException extends Exception {\n  override code = ExceptionCode.AuthenticationException;\n  override description =\n    'Generic or unknown exceptions associated with user authentication.';\n  override friendlyMessage = 'An unknown error occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.CircuitBreaker,\n    },\n  };\n}\n\nexport class AuthenticationUnauthorizedAccessException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationUnauthorizedAccessException;\n  override description = 'User lacks permissions to access the requested resource.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationLimitExceededException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationLimitExceededException;\n  override description =\n    'This exception is thrown when a user exceeds the limit for a requested AWS resource';\n  override friendlyMessage = 'You are trying to access this resource too often.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 429,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationNotAuthorizedException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationNotAuthorizedException;\n  override description =\n    'The Auth user does not have permission to perform this action.';\n  override friendlyMessage =\n    'You need to be logged in or have proper permissions to access this resource.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationTooManyRequestsException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationTooManyRequestsException;\n  override description =\n    'This exception is thrown when the user has made too many requests for a given operation.';\n  override friendlyMessage = 'You are trying to access this resource too often.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 429,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationUserNotFoundException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationUserNotFoundException;\n  override description =\n    'This exception is thrown when the Auth service cannot ' +\n    'find a user with the provided username.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\n\nimport { ExceptionCode } from '../../../types/exception.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationPasswordResetRequiredException extends AuthenticationException {\n  override readonly code =\n    ExceptionCode.AuthenticationPasswordResetRequiredException;\n  override readonly description =\n    'This exception is thrown when a password reset is required.';\n  override readonly friendlyMessage =\n    'A password reset is required in order to login.';\n  override readonly logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override readonly remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationLoginException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationLoginException;\n  override description = 'An exception occurred while logging a user in.';\n  override friendlyMessage = 'An unknown error occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: true,\n  };\n}\nexport class AuthenticationLoginInvalidCredentialsException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationLoginInvalidCredentialsException;\n  override description = 'Incorrect username or password provided.';\n  override friendlyMessage = 'Incorrect username or password.';\n  override logLevel: Exception['logLevel'] = LogLevel.Info;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationLoginTooManyFailedAttemptsException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationLoginTooManyFailedAttemptsException;\n  override description =\n    'This exception is thrown when the user has provided an incorrect username or password too many times.';\n  override friendlyMessage =\n    \"You've provided an incorrect username or password too many times.\";\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 429,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { RetryStrategy } from '../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../../lib/exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationMFAMethodNotFoundException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationMFAMethodNotFoundException;\n  override description =\n    'This exception is thrown when the Auth service cannot ' +\n    'find a multi-factor authentication (MFA) method.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../../lib/exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationSignupException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationSignupException;\n  override description = 'An exception occurred while signing up a user.';\n  override friendlyMessage = 'An error occurred while signing up.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: true,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationExpiredAccessTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationExpiredAccessTokenException;\n  override description = 'The access token associated with a session has expired.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\n/**\n * This exception is thrown when the authentication server encounters an invalid access token.\n */\nexport class AuthenticationInvalidAccessTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationInvalidAccessTokenException;\n  override description = 'The access token associated with a session is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationMissingAccessTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationMissingAccessTokenException;\n  override description = 'The access token associated with a session is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationExpiredRefreshTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationExpiredRefreshTokenException;\n  override description = 'The refresh token associated with a session has expired.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\n/**\n * This exception is thrown when the authentication server encounters an invalid refresh token.\n */\nexport class AuthenticationInvalidRefreshTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationInvalidRefreshTokenException;\n  override description = 'The refresh token associated with a session is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationMissingRefreshTokenException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationMissingRefreshTokenException;\n  override description = 'The refresh token associated with a session is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationUsernameAvailabilityCheckException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationUsernameAvailabilityCheckException;\n  override description =\n    'An exception occurred while checking if a username is available.';\n  override friendlyMessage =\n    'An error occurred while checking if a username is available.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: true,\n  };\n}\n\nexport class AuthenticationUsernameExistsException extends AuthenticationUsernameAvailabilityCheckException {\n  override code = ExceptionCode.AuthenticationUsernameExistsException;\n  override description = 'User with email or phone number already exists.';\n  override friendlyMessage = 'A user with that email already exists.';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationAliasExistException extends AuthenticationUsernameAvailabilityCheckException {\n  override code = ExceptionCode.AuthenticationAliasExistException;\n  override description =\n    'This exception is thrown when a user tries to confirm ' +\n    'the account with an email or phone number that has already ' +\n    'been supplied as an alias from a different account. This exception ' +\n    'tells user that an account with this email or phone already exists';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { RetryStrategy } from '../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../../lib/exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationCodeDeliveryFailureException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationCodeDeliveryFailureException;\n  override description =\n    'This exception is thrown when a verification code fails to deliver successfully.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class AuthenticationCodeMismatchException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationCodeMismatchException;\n  override description = 'The verification code provided is incorrect';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationExpiredCodeException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationExpiredCodeException;\n  override description = 'The verification code provided has expired';\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: false,\n  };\n}\n\nexport class AuthenticationUserNotConfirmedException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationUserNotConfirmedException;\n  override description =\n    'This exception is thrown when a user who is not confirmed attempts to login.';\n  override friendlyMessage =\n    \"You haven't verified your email address or telephone number yet\";\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 403,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../../exception.js';\nimport { ExceptionCode } from '../../../../types/index.js';\n\n/*******************************/\n/* Database related exceptions */\n/*******************************/\n\nexport class DatabaseException extends Exception {\n  override code = ExceptionCode.DatabaseException;\n  override description = 'Generic or unknown database exceptions.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { DatabaseException } from './index.js';\nimport { ExceptionCode } from '../../../../types/index.js';\nimport { Exception } from '../../../exception.js';\n\nexport class SequelizeNotInitializedException extends DatabaseException {\n  override code = ExceptionCode.SequelizeNotInitializedException;\n  override description = 'Generic or unknown database exceptions.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../exception.js';\nimport { ExceptionCode } from '../../../types/index.js';\n\n/*********************************/\n/* Network (HTTP, WS) exceptions */\n/*********************************/\n\nexport class NetworkException extends Exception {\n  override code = ExceptionCode.NetworkException;\n  override description = 'A network related issue has occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../../types/index.js';\nimport { RetryStrategy } from '../../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../../types/remediation';\nimport { Exception } from '../../../exception.js';\nimport { NetworkException } from '../index.js';\n\nexport class HttpException extends NetworkException {\n  override code = ExceptionCode.HttpException;\n  override description =\n    'A generic or unknown exception occurred related to an HTTP request.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.CircuitBreaker,\n    },\n  };\n}\n\nexport class HttpRequestException extends HttpException {\n  override code = ExceptionCode.HttpRequestException;\n  override description =\n    'Base class for generic or unknown exceptions ' +\n    'occuring during an HTTP request.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.CircuitBreaker,\n    },\n  };\n}\n\nexport class HttpRequestResourceNotFoundException extends HttpRequestException {\n  override code = ExceptionCode.HttpRequestResourceNotFoundException;\n  override description = 'The requested HTTP resource could not be found.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 404,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.CircuitBreaker,\n    },\n  };\n}\n\n/**\n * @class Class used when a request's body is missing an object property.\n */\nexport class MissingRequestBodyPropertyException extends HttpRequestException {\n  override code = ExceptionCode.MissingRequestBodyPropertyException;\n  override description = 'HTTP request body is missing a required property.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class MissingRequestUrlParameterException extends HttpRequestException {\n  override code = ExceptionCode.MissingRequestUrlParameterException;\n  override description = 'HTTP request URL is missing a required parameter.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class MissingCookieException extends HttpRequestException {\n  override code = ExceptionCode.MissingCookieException;\n  override description = 'A required cookie is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class HttpResponseException extends HttpException {\n  override code = ExceptionCode.HttpRequestException;\n  override description = 'Generic or unknown exceptions related to HTTP responses.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../exception.js';\nimport { RetryStrategy } from '../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { ExceptionCode } from '../../../types/index.js';\n\n/*******************************/\n/* Service provider exceptions */\n/*******************************/\n\nexport class ServiceProviderException extends Exception {\n  override code = ExceptionCode.ServiceProviderException;\n  override description =\n    'An error originating from a third-party or service provider occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\n\nimport { ExceptionCode } from '../../../../types/index';\nimport {\n  ExceptionRemediation,\n  RetryStrategy,\n} from '../../../../types/remediation';\nimport { Exception } from '../../../exception';\nimport { ServiceProviderException } from '../index';\n\nexport class AWSException extends ServiceProviderException {\n  override code = ExceptionCode.AWSException;\n  override description =\n    'An exception originating from the AWS integration occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class AWSMissingAccessKeyException extends AWSException {\n  override code = ExceptionCode.StripeMissingSecretKeyException;\n  override description = 'Missing AWS access key token.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class AWSMissingSecretKeyException extends AWSException {\n  override code = ExceptionCode.StripeMissingSecretKeyException;\n  override description = 'Missing AWS secret key token.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\n\nimport { ExceptionCode } from '../../../../../types/index';\nimport {\n  ExceptionRemediation,\n  RetryStrategy,\n} from '../../../../../types/remediation';\nimport { Exception } from '../../../../exception';\nimport { AWSException } from '../index';\n\nexport class CognitoException extends AWSException {\n  override code = ExceptionCode.AWSException;\n  override description =\n    'An exception originating from the AWS Cognito integration occurred.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class CognitoInternalErrorException extends CognitoException {\n  override code = ExceptionCode.CognitoInternalErrorException;\n  override description =\n    'An internal error occurred originating from AWS Cognito.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class CognitoInvalidUserPoolConfigurationException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidUserPoolConfigurationException;\n  override description =\n    'This exception is thrown when the user pool configuration ' +\n    'is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class CognitoInvalidEmailRoleAccessPolicyException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidEmailRoleAccessPolicyException;\n  override description =\n    'There is an access policy exception for the role provided for email configuration.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class CognitoInvalidSmsRoleAccessPolicyException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidSmsRoleAccessPolicyException;\n  override description =\n    'This exception is returned when the role provided for SMS configuration ' +\n    'does not have permission to publish using Amazon SNS.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class CognitoInvalidSmsRoleTrustRelationshipException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidSmsRoleTrustRelationshipException;\n  override description =\n    'This exception is thrown when the trust relationship is invalid for the ' +\n    'role provided for SMS configuration. This can happen if you do not trust ' +\n    '-idp.amazonaws.com or the external ID provided in the role does not match ' +\n    'what is provided in the SMS configuration for the user pool.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\nexport class CognitoMissingUserPoolClientIdException extends CognitoException {\n  override code = ExceptionCode.CognitoMissingUserPoolClientIdException;\n  override description =\n    'Cognito user pool client ID configuration is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class CognitoMissingUserPoolIdException extends CognitoException {\n  override code = ExceptionCode.CognitoMissingUserPoolIdException;\n  override description = 'Cognito user pool ID configuration is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class CognitoUnexpectedLambdaException extends CognitoException {\n  override code = ExceptionCode.CognitoUnexpectedLambdaException;\n  override description =\n    'This exception is thrown when the Auth service encounters an ' +\n    'unexpected exception with the AWS Lambda service.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class CognitoInvalidParameterException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidParameterException;\n  override description =\n    'This exception is thrown when the Cognito service encounters an invalid parameter.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class CognitoInvalidLambdaResponseException extends CognitoException {\n  override code = ExceptionCode.CognitoInvalidLambdaResponseException;\n  override description =\n    'This exception is thrown when the Amazon service encounters an invalid AWS Lambda response.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\nexport class CognitoResourceNotFoundException extends CognitoException {\n  override code = ExceptionCode.CognitoResourceNotFoundException;\n  override description =\n    'This exception is thrown when the Cognito service cannot find the requested resource.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class CognitoUserLambdaValidationException extends CognitoException {\n  override code = ExceptionCode.CognitoUserLambdaValidationException;\n  override description =\n    'This exception is thrown when the Cognito service ' +\n    'encounters a user validation exception with the AWS ' +\n    'Lambda service.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../../types/index.js';\nimport { RetryStrategy } from '../../../../types/remediation.js';\nimport { ExceptionRemediation } from '../../../../types/remediation';\nimport { Exception } from '../../../exception.js';\nimport { ServiceProviderException } from '../index.js';\n\n/*********************/\n/* Stripe exceptions */\n/*********************/\n\nexport class StripeException extends ServiceProviderException {\n  override code = ExceptionCode.StripeException;\n  override description = 'An exception occurred relating to Stripe.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class StripeMissingSecretKeyException extends StripeException {\n  override code = ExceptionCode.StripeMissingSecretKeyException;\n  override description = 'The Stripe secret key token is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: false,\n  };\n}\n\nexport class StripeSubscriptionCreationFailedException extends StripeException {\n  override code = ExceptionCode.StripeSubscriptionCreationFailedException;\n  override description = 'Stripe subscription creation failed.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n\nexport class StripePaymentMethodRequiredException extends StripeException {\n  override code = ExceptionCode.StripePaymentMethodRequiredException;\n  override description = 'An updated payment method is required.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 500,\n    },\n    retry: {\n      limit: 3,\n      strategy: RetryStrategy.Simple,\n    },\n  };\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../exception.js';\nimport { ExceptionCode } from '../../../types/index.js';\n\n/******************************************************/\n/* User related exceptions */\n/******************************************************/\n\nexport class UserException extends Exception {\n  override code = ExceptionCode.UserException;\n  override description = 'Generic or unknown exceptions related to a user.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n}\n\nexport class NullUserException extends UserException {\n  override code = ExceptionCode.NullUserException;\n  override description =\n    'An operation was performed on behalf a ' +\n    'user that cannot be found in the database.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n\nexport class UserStateConflictException extends UserException {\n  override code = ExceptionCode.UserStateConflictException;\n  override description =\n    'Exception used for user state that exists in one system or ' +\n    \"another and isn't being actively managed, or synced between \" +\n    'all systems, or at least differences accounted for.';\n  override logLevel: Exception['logLevel'] = LogLevel.Critical;\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { Exception } from '../../exception.js';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\n\n/*************************/\n/* Validation exceptions */\n/*************************/\n\nexport class ValidationException extends Exception {\n  override code = ExceptionCode.ValidationException;\n  override description = 'Generic or otherwise unknown input validation exception.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class InvalidTypeException extends Exception {\n  override code = ExceptionCode.InvalidTypeException;\n  override description = 'Instance type is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class MissingArgumentException extends Exception {\n  override code = ExceptionCode.MissingArgumentException;\n  override description = 'A required argument is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class MissingPropertyException extends Exception {\n  override code = ExceptionCode.MissingPropertyException;\n  override description = 'A required property is missing.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class InvalidArgumentException extends Exception {\n  override code = ExceptionCode.InvalidArgumentException;\n  override description = 'An argument is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n\nexport class InvalidPropertyException extends Exception {\n  override code = ExceptionCode.InvalidPropertyException;\n  override description = 'An object property is invalid.';\n  override logLevel: Exception['logLevel'] = LogLevel.Exception;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 400,\n    },\n    retry: false,\n  };\n}\n", "import { ExceptionCode } from '../types/exception';\nimport { Exception } from './exception';\nimport { AuthenticationPasswordResetRequiredException } from './exceptions/authentication/challenges';\nimport {\n  AuthenticationException,\n  AuthenticationLimitExceededException,\n  AuthenticationNotAuthorizedException,\n  AuthenticationTooManyRequestsException,\n  AuthenticationUnauthorizedAccessException,\n  AuthenticationUserNotFoundException,\n} from './exceptions/authentication/index';\nimport {\n  AuthenticationLoginException,\n  AuthenticationLoginInvalidCredentialsException,\n  AuthenticationLoginTooManyFailedAttemptsException,\n} from './exceptions/authentication/login';\nimport { AuthenticationMFAMethodNotFoundException } from './exceptions/authentication/mfa';\nimport { AuthenticationSignupException } from './exceptions/authentication/signup';\nimport {\n  AuthenticationExpiredRefreshTokenException,\n  AuthenticationInvalidRefreshTokenException,\n  AuthenticationMissingRefreshTokenException,\n} from './exceptions/authentication/tokens';\nimport {\n  AuthenticationAliasExistException,\n  AuthenticationUsernameAvailabilityCheckException,\n  AuthenticationUsernameExistsException,\n} from './exceptions/authentication/username-availability';\nimport {\n  AuthenticationCodeDeliveryFailureException,\n  AuthenticationCodeMismatchException,\n  AuthenticationExpiredCodeException,\n  AuthenticationUserNotConfirmedException,\n} from './exceptions/authentication/verification';\nimport { DatabaseException } from './exceptions/data/db/index';\nimport { SequelizeNotInitializedException } from './exceptions/data/db/sequelize';\nimport {\n  FatalException,\n  KillProcessException,\n  MissingEnvironmentVariable,\n  ProcessException,\n  ProcessSigIntException,\n  ProcessSigTermException,\n  ProcessWarningException,\n} from './exceptions/environments/server/process';\nimport {\n  CaughtException,\n  UncaughtException,\n  UnhandledPromiseRejectionException,\n  UnmanagedException,\n} from './exceptions/index';\nimport {\n  HttpException,\n  HttpRequestException,\n  HttpRequestResourceNotFoundException,\n  HttpResponseException,\n  MissingCookieException,\n  MissingRequestBodyPropertyException,\n  MissingRequestUrlParameterException,\n} from './exceptions/networking/http/index';\nimport { NetworkException } from './exceptions/networking/index';\nimport {\n  CognitoException,\n  CognitoInternalErrorException,\n  CognitoInvalidEmailRoleAccessPolicyException,\n  CognitoInvalidLambdaResponseException,\n  CognitoInvalidParameterException,\n  CognitoInvalidSmsRoleAccessPolicyException,\n  CognitoInvalidSmsRoleTrustRelationshipException,\n  CognitoInvalidUserPoolConfigurationException,\n  CognitoMissingUserPoolClientIdException,\n  CognitoMissingUserPoolIdException,\n  CognitoResourceNotFoundException,\n  CognitoUnexpectedLambdaException,\n  CognitoUserLambdaValidationException,\n} from './exceptions/services/aws/cognito/index';\nimport {\n  AWSException,\n  AWSMissingAccessKeyException,\n} from './exceptions/services/aws/index';\nimport { ServiceProviderException } from './exceptions/services/index';\nimport {\n  StripeException,\n  StripeMissingSecretKeyException,\n  StripePaymentMethodRequiredException,\n  StripeSubscriptionCreationFailedException,\n} from './exceptions/services/stripe/index';\nimport {\n  NullUserException,\n  UserException,\n  UserStateConflictException,\n} from './exceptions/user/index';\nimport {\n  InvalidArgumentException,\n  InvalidPropertyException,\n  InvalidTypeException,\n  MissingArgumentException,\n  MissingPropertyException,\n  ValidationException,\n} from './exceptions/validation/index';\n\nexport const ExceptionMap: { readonly [code: number]: typeof Exception } = {\n  [ExceptionCode.Exception]: Exception,\n  [ExceptionCode.UnmanagedException]: UnmanagedException,\n  [ExceptionCode.CaughtException]: CaughtException,\n  [ExceptionCode.UncaughtException]: UncaughtException,\n  [ExceptionCode.UnhandledPromiseRejectionException]:\n    UnhandledPromiseRejectionException,\n\n  [ExceptionCode.AuthenticationException]: AuthenticationException,\n  [ExceptionCode.AuthenticationExpiredRefreshTokenException]:\n    AuthenticationExpiredRefreshTokenException,\n  [ExceptionCode.AuthenticationInvalidRefreshTokenException]:\n    AuthenticationInvalidRefreshTokenException,\n  [ExceptionCode.AuthenticationLoginException]: AuthenticationLoginException,\n  [ExceptionCode.AuthenticationLoginInvalidCredentialsException]:\n    AuthenticationLoginInvalidCredentialsException,\n  [ExceptionCode.AuthenticationLoginTooManyFailedAttemptsException]:\n    AuthenticationLoginTooManyFailedAttemptsException,\n  [ExceptionCode.AuthenticationMissingDeviceKeyException]:\n    AuthenticationMissingRefreshTokenException,\n  [ExceptionCode.AuthenticationMissingRefreshTokenException]:\n    AuthenticationMissingRefreshTokenException,\n  [ExceptionCode.AuthenticationUnauthorizedAccessException]:\n    AuthenticationUnauthorizedAccessException,\n  [ExceptionCode.AuthenticationCodeMismatchException]:\n    AuthenticationCodeMismatchException,\n  [ExceptionCode.AuthenticationExpiredCodeException]:\n    AuthenticationExpiredCodeException,\n  [ExceptionCode.AuthenticationLimitExceededException]:\n    AuthenticationLimitExceededException,\n  [ExceptionCode.AuthenticationNotAuthorizedException]:\n    AuthenticationNotAuthorizedException,\n\n  [ExceptionCode.AuthenticationTooManyRequestsException]:\n    AuthenticationTooManyRequestsException,\n  [ExceptionCode.AuthenticationUserNotFoundException]:\n    AuthenticationUserNotFoundException,\n  [ExceptionCode.AuthenticationSignupException]: AuthenticationSignupException,\n  [ExceptionCode.AuthenticationUsernameAvailabilityCheckException]:\n    AuthenticationUsernameAvailabilityCheckException,\n  [ExceptionCode.AuthenticationAliasExistException]:\n    AuthenticationAliasExistException,\n  [ExceptionCode.AuthenticationUsernameExistsException]:\n    AuthenticationUsernameExistsException,\n  [ExceptionCode.AuthenticationCodeDeliveryFailureException]:\n    AuthenticationCodeDeliveryFailureException,\n  [ExceptionCode.AuthenticationMFAMethodNotFoundException]:\n    AuthenticationMFAMethodNotFoundException,\n  [ExceptionCode.AuthenticationPasswordResetRequiredException]:\n    AuthenticationPasswordResetRequiredException,\n  [ExceptionCode.AuthenticationUserNotConfirmedException]:\n    AuthenticationUserNotConfirmedException,\n\n  [ExceptionCode.DatabaseException]: DatabaseException,\n  [ExceptionCode.SequelizeNotInitializedException]:\n    SequelizeNotInitializedException,\n\n  [ExceptionCode.ServiceProviderException]: ServiceProviderException,\n  [ExceptionCode.AWSException]: AWSException,\n  [ExceptionCode.AWSMissingAccessKeyException]: AWSMissingAccessKeyException,\n  [ExceptionCode.AWSMissingSecretKeyException]: AWSMissingAccessKeyException,\n  [ExceptionCode.CognitoException]: CognitoException,\n  [ExceptionCode.CognitoInternalErrorException]: CognitoInternalErrorException,\n  [ExceptionCode.CognitoInvalidEmailRoleAccessPolicyException]:\n    CognitoInvalidEmailRoleAccessPolicyException,\n  [ExceptionCode.CognitoInvalidSmsRoleAccessPolicyException]:\n    CognitoInvalidSmsRoleAccessPolicyException,\n  [ExceptionCode.CognitoInvalidSmsRoleTrustRelationshipException]:\n    CognitoInvalidSmsRoleTrustRelationshipException,\n  [ExceptionCode.CognitoUnexpectedLambdaException]:\n    CognitoUnexpectedLambdaException,\n  [ExceptionCode.CognitoInvalidUserPoolConfigurationException]:\n    CognitoInvalidUserPoolConfigurationException,\n  [ExceptionCode.CognitoInvalidLambdaResponseException]:\n    CognitoInvalidLambdaResponseException,\n  [ExceptionCode.CognitoInvalidParameterException]:\n    CognitoInvalidParameterException,\n  [ExceptionCode.CognitoMissingUserPoolIdException]:\n    CognitoMissingUserPoolIdException,\n  [ExceptionCode.CognitoMissingUserPoolClientIdException]:\n    CognitoMissingUserPoolClientIdException,\n  [ExceptionCode.CognitoResourceNotFoundException]:\n    CognitoResourceNotFoundException,\n  [ExceptionCode.CognitoUserLambdaValidationException]:\n    CognitoUserLambdaValidationException,\n  [ExceptionCode.StripeException]: StripeException,\n  [ExceptionCode.StripeSubscriptionCreationFailedException]:\n    StripeSubscriptionCreationFailedException,\n  [ExceptionCode.StripeMissingSecretKeyException]:\n    StripeMissingSecretKeyException,\n  [ExceptionCode.StripePaymentMethodRequiredException]:\n    StripePaymentMethodRequiredException,\n  [ExceptionCode.NetworkException]: NetworkException,\n  [ExceptionCode.HttpException]: HttpException,\n  [ExceptionCode.HttpRequestException]: HttpRequestException,\n  [ExceptionCode.HttpRequestResourceNotFoundException]:\n    HttpRequestResourceNotFoundException,\n  [ExceptionCode.HttpResponseException]: HttpResponseException,\n  [ExceptionCode.MissingRequestBodyPropertyException]:\n    MissingRequestBodyPropertyException,\n  [ExceptionCode.MissingRequestUrlParameterException]:\n    MissingRequestUrlParameterException,\n  [ExceptionCode.MissingCookieException]: MissingCookieException,\n\n  [ExceptionCode.ValidationException]: ValidationException,\n  [ExceptionCode.InvalidArgumentException]: InvalidArgumentException,\n  [ExceptionCode.InvalidPropertyException]: InvalidPropertyException,\n  [ExceptionCode.InvalidTypeException]: InvalidTypeException,\n  [ExceptionCode.MissingArgumentException]: MissingArgumentException,\n  [ExceptionCode.MissingPropertyException]: MissingPropertyException,\n\n  [ExceptionCode.ProcessException]: ProcessException,\n  [ExceptionCode.ProcessWarningException]: ProcessWarningException,\n  [ExceptionCode.ProcessSigTermException]: ProcessSigTermException,\n  [ExceptionCode.ProcessSigIntException]: ProcessSigIntException,\n  [ExceptionCode.FatalException]: FatalException,\n  [ExceptionCode.MissingEnvironmentVariable]: MissingEnvironmentVariable,\n  [ExceptionCode.KillProcessException]: KillProcessException,\n\n  [ExceptionCode.UserException]: UserException,\n  [ExceptionCode.NullUserException]: NullUserException,\n  [ExceptionCode.UserStateConflictException]: UserStateConflictException,\n};\n\nexport function getExceptionInstance(code: ExceptionCode) {\n  return ExceptionMap[code];\n}\n", "import { LogLevel } from '@srclaunch/types';\nimport { ExceptionCode } from '../../../types/index.js';\nimport { ExceptionRemediation } from '../../../types/remediation';\nimport { Exception } from '../../exception.js';\nimport { AuthenticationException } from './index.js';\n\nexport class AuthenticationMissingDeviceKeyException extends AuthenticationException {\n  override code = ExceptionCode.AuthenticationMissingDeviceKeyException;\n  override description = \"The device key associated with the user's session is missing.\";\n  override logLevel: Exception['logLevel'] = LogLevel.Warning;\n  override remediation: ExceptionRemediation = {\n    response: {\n      code: 401,\n    },\n    retry: false,\n  };\n}\n", "import { Response } from 'express';\n\nimport { Exception } from './exception';\nimport { UnmanagedException } from './exceptions/index';\n\nexport type ExceptionResponse = {\n  readonly code: number;\n  readonly description?: string;\n  readonly friendlyMessage?: string;\n};\n\nexport class ExceptionRemediator {\n  private exception?: Exception = undefined;\n\n  handleException(\n    err: Exception | Error,\n    { res }: { readonly res: Response },\n  ): Response<ExceptionResponse> {\n    this.exception =\n      err instanceof Exception\n        ? err\n        : new UnmanagedException(err.name, {\n            cause: err,\n          });\n\n    const response = this.getExceptionResponse();\n\n    if (response) {\n      return res.status(response.code).json(response.body);\n    }\n\n    return res.status(500).json({\n      code: 99_999,\n      description: 'An unknown error occurred.',\n      friendlyMessage: 'An unknown error occurred.',\n    });\n  }\n\n  getExceptionResponse(): {\n    readonly body: ExceptionResponse;\n    readonly code: number;\n  } | null {\n    if (this.exception) {\n      const { code, description, friendlyMessage, remediation } =\n        this.exception;\n\n      const responseCode = remediation?.response?.code ?? 500;\n\n      return {\n        body: {\n          code,\n          description,\n          friendlyMessage,\n        },\n        code: responseCode,\n      };\n    }\n\n    return null;\n  }\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { constructModelExportIndexScript } from '../exports';\n\nexport async function buildAppLabModels(projectPath: string): Promise<void> {\n  try {\n    const MODELS_PATH = path.join(path.resolve(), 'models');\n    const BUILD_PATH = path.join(path.resolve(), projectPath, 'src');\n\n    await fs.emptyDir(BUILD_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n\n    for (const file of files) {\n      const fileContents = await fs.readFile(\n        path.join(MODELS_PATH, file),\n        'utf8',\n      );\n\n      const fieldsPropertyExists = fileContents.includes('fields: {');\n\n      if (!fieldsPropertyExists) {\n        throw new Error(`${file} is missing the fields property.`);\n      }\n\n      let entityFields = `\n    created_date: {\n      label: 'Created Date',\n      required: false,\n      type: Primitives.DateTime,\n    },\n    updated_date: {\n      label: 'Updated Date',\n      required: false,\n      type: Primitives.DateTime,\n    },\n  `;\n\n      const relationshipsStart = fileContents.indexOf('relationships:') + 15;\n      const relationshipsEnd =\n        fileContents.indexOf('}', relationshipsStart) + 1;\n      const relationships = fileContents.slice(\n        relationshipsStart,\n        relationshipsEnd,\n      );\n\n      if (relationships) {\n        const belongsToStart = relationships.indexOf('belongsTo:') + 10;\n        const belongsToEnd = relationships.indexOf(']', belongsToStart) + 1;\n        const belongsTo = relationships.slice(belongsToStart, belongsToEnd);\n\n        if (belongsTo) {\n          const transformed = belongsTo\n            .replace(/'/g, '\"')\n            .replace(/ {2}|\\r\\n|\\n|\\r/g, '')\n            .replace(/\\s/g, '')\n            .replace(',]', ']');\n\n          const belongsToFields = JSON.parse(transformed);\n\n          for (const relationship of belongsToFields) {\n            entityFields += `\n        ${relationship}Id: {\n          label: '${relationship}',\n          required: false,\n          type: Primitives.UUID\n        },\n        `;\n          }\n        }\n      }\n\n      const updatedFileContents = fileContents.replace(\n        'fields: {',\n        `fields: {\n        ${entityFields}`,\n      );\n\n      // logger.info(`Writing ${file} model`);\n\n      await fs.writeFile(\n        path.join(BUILD_PATH, file),\n        updatedFileContents,\n        'utf8',\n      );\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    const buildModels = await fs.readdir(BUILD_PATH);\n    const models = buildModels.filter(file => {\n      return file.slice(-3) === '.ts' && file.split('.ts')[0] !== 'index';\n    });\n\n    const indexFileContent = constructModelExportIndexScript(models, 'applab');\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "\nexport function constructModelExportIndexScript(\n  models: string[],\n  modelFormat: 'sequelize' | 'applab' | 'json' | 'ts' = 'applab',\n): string | void {\n  try {\n    let indexFileExports = '';\n    let indexFileImports = '';\n    let sequelizeDefaultExports = 'export default {';\n\n    const fileExtension = `.${\n      modelFormat === 'applab' || modelFormat === 'sequelize' ? 'ts' : 'json'\n    }`;\n\n    for (const model of models) {\n      const modelName = model.split(fileExtension)[0];\n\n      if (modelFormat === 'json') {\n        indexFileImports += `import ${modelName} from './${modelName}.json';\\n`;\n      } else if (modelFormat === 'sequelize') {\n        indexFileImports += `import ${modelName}Init, { ${modelName} } from './${modelName}';\\n`;\n        sequelizeDefaultExports += `${modelName}: ${modelName}Init,`;\n      } else {\n        indexFileImports += `import { ${modelName} } from './${modelName}.js';\\n`;\n      }\n\n      indexFileExports += `  ${modelName},\\n`;\n    }\n\n    if (modelFormat === 'sequelize') {\n      sequelizeDefaultExports += '};';\n    }\n\n    return `${indexFileImports}\\nexport {\\n${indexFileExports}};\\n${\n      modelFormat === 'sequelize' ? sequelizeDefaultExports : ''\n    }\\n`;\n  } catch (err: any) {\n    console.error(err);\n  }\n}\n\nexport async function constructAppLabModelExports() {\n  return `import { Model } from '@srclaunch/types';\nexport * from \"./applab/index\";\n\nimport * as Models from \"./applab/index\";\n\nexport function getModels(): Record<string, Model> {\n  return Models as Record<string, Model>;\n}`;\n}\n", "import { paramCase } from 'change-case';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nfunction constructHttpClientIndexScript({\n  environments,\n  models,\n}: {\n  readonly environments: {\n    readonly dev: {\n      readonly host: string;\n      readonly port: number;\n      readonly protocol: string;\n    };\n    readonly test: {\n      readonly host: string;\n      readonly port: number;\n      readonly protocol: string;\n    };\n    readonly preview: {\n      readonly host: string;\n      readonly port: number;\n      readonly protocol: string;\n    };\n    readonly production: {\n      readonly host: string;\n      readonly port: number;\n      readonly protocol: string;\n    };\n  };\n  readonly models: readonly string[];\n}) {\n  let imports = `import { HttpClient } from '@srclaunch/http-client';\nimport { Environment } from '@srclaunch/types';\nimport { getEnvironment } from '@srclaunch/web-environment';\n`;\n\n  for (const name of models) {\n    imports += `import ${name.toLowerCase()}Endpoints from './${name}Endpoints';\\n`;\n  }\n\n  return `${imports}\n\nconst environment: Environment = getEnvironment();\n\nconst hosts = {\n  dev: '${environments.dev.protocol}://${environments.dev.host}${\n    environments.dev.port !== 80 ? `:${environments.dev.port.toString()}` : ''\n  }',\n  test: '${environments.test.protocol}://${environments.test.host}${\n    environments.test.port !== 80 ? `:${environments.test.port.toString()}` : ''\n  }',\n  preview: '${environments.preview.protocol}://${environments.preview.host}${\n    environments.preview.port !== 80\n      ? `:${environments.preview.port.toString()}`\n      : ''\n  }',\n  production: '${environments.production.protocol}://${\n    environments.production.host\n  }${\n    environments.production.port !== 80\n      ? `:${environments.production.port.toString()}`\n      : ''\n  }',\n}\n\nexport const httpClient = HttpClient({\n  basePath: 'core-api',\n  // @ts-ignore\n  host: hosts[environment.id],\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    // headers: { 'X-Requested-With': 'XMLHttpRequest' },\n  },\n  options: {\n    retries: 2,\n    retryCondition: err => !err.response,\n    retryDelay: 5000,\n  },\n  preAuthResourceIncludes: '/auth',\n  responseType: 'json',\n  withCredentials: true,\n});\n\nexport default {\n  ${models.map(name => {\n    return `...${name}Endpoints\\n`;\n  })}\n};`;\n}\n\nfunction getHttpClientEndpoints({\n  modelName,\n  typesProjectName,\n}: {\n  readonly httpClientProjectName?: string;\n  readonly modelName: string;\n  readonly typesProjectName: string;\n}): string {\n  const lowercase = modelName.toLowerCase();\n  const lowercasePlural = pluralize(modelName.toLowerCase());\n  const capitalizedPlural = pluralize(modelName);\n  const urlParam = paramCase(pluralize(modelName));\n\n  return `import { Condition, HttpResponse } from '@srclaunch/types';\n  import { stringify } from 'query-string';\n  import { httpClient } from './index';\n  import { ${modelName} } from '${typesProjectName}';\n\n  function getFormData(props: object) {\n    try {\n      const formData = new FormData();\n      const keys =  Object.keys(props);\n     \n      for (const key of keys) {\n        // @ts-ignore\n        const value = props[key];\n        if (Array.isArray(value) && value.length > 0) {\n          for (let i = 0; i < value.length; i++) {\n            const item = value[i];\n            console.log('item', item);\n            \n            if ('size' in item) {\n              if (item) formData.append(\\`\\${key}[\\${i}]\\`, item);\n            } else {\n              if (item) formData.append(\\`\\${key}[\\${i}]\\`, JSON.stringify(item));\n            }\n          }\n        } else {\n          if (value) formData.append(key, value);\n        }\n      }\n    \n      return formData;\n    } catch (err: any) {\n      console.error(err);\n    }\n }\n\n  export default {\n    create${modelName}: (props: ${modelName}): Promise<HttpResponse<${modelName}> | void> => {\n      const formData = getFormData(props);\n      return httpClient.post('/${urlParam}', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    },\n    create${capitalizedPlural}: ({\n      ...props\n    }: ${modelName}[]): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.post('/${urlParam}', props),\n    delete${modelName}: (id: ${modelName}['id']): Promise<HttpResponse<void> | void> =>\n      httpClient.delete(\\`/${urlParam}/\\${id}\\`),\n    delete${capitalizedPlural}: (ids: ${modelName}['id'][]): Promise<HttpResponse<void> | void> =>\n      httpClient.delete(\\`/${urlParam}/\\${ids.join(',')}\\`),\n    get${modelName}: (id: ${modelName}['id']): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.get(\\`/${urlParam}/\\${id}\\`),\n    get${capitalizedPlural}: ({\n      conditions,\n      filters,\n      limit,\n      offset\n    }: {\n      conditions?: Condition[],\n      filters?: Record<string, string>,\n      limit?: number;\n      offset?: number\n    }): Promise<HttpResponse<${modelName}> | void> => \n      httpClient.get(\\`/${urlParam}?\\${filters ? stringify(filters) : ''}limit=\\${limit}&offset=\\${offset}\\`),\n    update${modelName}: (\n      id: ${modelName}['id'],\n      props: ${modelName},\n    ): Promise<HttpResponse<${modelName}> | void> => {\n      const formData = getFormData(props);\n      return httpClient.put(\\`/${urlParam}\\/\\${id}\\`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    },\n    update${capitalizedPlural}: (\n      {\n        ...props\n      }: ${modelName}[],\n    ): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.put(\\`/${urlParam}\\`, props),\n  };  \n  `;\n}\n\nexport async function buildHttpClient({\n  httpClientProjectName,\n  modelsPath,\n  path: projectPath,\n  typesProjectName,\n}: {\n  readonly httpClientProjectName: string;\n  readonly modelsPath: string;\n  readonly path: string;\n  readonly typesProjectName: string;\n}): Promise<void> {\n  try {\n    const projectConfigPath = path.join(path.resolve(), 'applab.config.json');\n    const projectConfigContents = await fs.readFile(projectConfigPath);\n    const projectConfig = await JSON.parse(projectConfigContents.toString());\n    const MODELS_PATH = path.join(path.resolve(), `${modelsPath}/src`);\n    const BUILD_PATH = path.join(path.resolve(), `${projectPath}/src`);\n    const DIST_PATH = path.join(path.resolve(), `${projectPath}/dist`);\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n\n    for (const file of files) {\n      if (file !== 'index.ts') {\n        const name = `${file.toLowerCase().replace('.ts', '')}Endpoints.ts`;\n\n        const modelHttpClientEndpoints = getHttpClientEndpoints({\n          httpClientProjectName,\n          modelName: file.replace('.ts', ''),\n          typesProjectName,\n        });\n\n        // logger.info(`Writing ${name} HTTP client endpoints`);\n\n        await fs.writeFile(\n          path.join(BUILD_PATH, name),\n          modelHttpClientEndpoints,\n          'utf8',\n        );\n      }\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    const indexFileContent = constructHttpClientIndexScript({\n      environments: projectConfig['core-api'].environments,\n      models: files\n        .filter(f => f !== 'index.ts')\n        .map(file => pluralize(file.toLowerCase()).replace('.ts', '')),\n    });\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nfunction constructReduxReducersIndexScript(models: readonly string[]) {\n  const imports = models\n    .map(name => {\n      const pluralizedCamel = pluralize(name[0]?.toLowerCase() + name.slice(1));\n\n      return `import ${pluralizedCamel} from './${pluralizedCamel}.js';`;\n    })\n    .join('\\n');\n  const exports = models\n    .map(name => {\n      const pluralizedCamel = pluralize(name[0]?.toLowerCase() + name.slice(1));\n\n      return `export { \n        create${name}, \n        create${pluralize(name)}, \n        delete${name}, \n        delete${pluralize(name)}, \n        get${name}, \n        get${pluralize(name)}, \n        update${name},\n        update${pluralize(name)},\n        ${name}Selectors, \n      } from './${pluralizedCamel}.js';`;\n    })\n    .join('\\n');\n\n  return `${imports}\nexport default {\n  ${models\n    .map(name => pluralize(name[0]?.toLowerCase() + name.slice(1)))\n    .join(',\\n  ')},\n};\n\n${exports}\n`;\n}\n\nfunction getModelSlice({\n  httpClientProjectName,\n  modelName,\n  typesProjectName,\n}: {\n  readonly httpClientProjectName?: string;\n  readonly modelName: string;\n  readonly typesProjectName: string;\n}): string {\n  const lowercase = modelName.toLowerCase();\n  const lowercasePlural = pluralize(modelName.toLowerCase());\n  const pluralCamel = pluralize(\n    modelName?.[0]?.toLowerCase() + modelName.slice(1),\n  );\n  const capitalizedPlural = pluralize(modelName);\n  const singularCamel = modelName?.[0]?.toLowerCase() + modelName.slice(1);\n  const pluralizedCamel = pluralize(\n    modelName[0]?.toLowerCase() + modelName.slice(1),\n  );\n\n  return `import { ${modelName} } from '${typesProjectName}';\n  import * as httpClient from '${httpClientProjectName}';\n  \nimport { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Exception, ExceptionObject } from '@srclaunch/exceptions';\nimport { AppDispatch, AppThunk, RootState } from '@srclaunch/web-application-state';\nimport { Condition, ISO8601String } from '@srclaunch/types';\n\nconst adapter = createEntityAdapter<${modelName}>();\n\nexport const ${modelName}Selectors = adapter.getSelectors<RootState>(\n  (state: RootState) => state.${pluralCamel},\n);\n\ntype ${modelName}State = {\n  action: {\n    create${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    create${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    delete${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    delete${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    get${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    get${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    update${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    update${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n  },\n  inProgress?: boolean;\n  lastUpdated?: ISO8601String;\n};\n\nconst initialState = {\n  action: {\n    create${modelName}: {\n      inProgress: false,\n    },\n    create${capitalizedPlural}: {\n      inProgress: false,\n    },\n    delete${modelName}: {\n      inProgress: false,\n    },\n    delete${capitalizedPlural}: {\n      inProgress: false,\n    },\n    get${modelName}: {\n      inProgress: false,\n    },\n    get${capitalizedPlural}: {\n      inProgress: false,\n    },\n    update${modelName}: {\n      inProgress: false,\n    },\n    update${capitalizedPlural}: {\n      inProgress: false,\n    },\n  },\n  inProgress: false,\n}\n\nconst slice = createSlice({\n  initialState: adapter.getInitialState<${modelName}State>(initialState),\n  name: '${pluralCamel}',\n  reducers: {\n    add${modelName}: (state, action) => {\n      adapter.upsertOne(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    add${capitalizedPlural}: (state, action) => {\n      adapter.upsertMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    remove${modelName}: (state, action) => {\n      adapter.removeOne(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    remove${capitalizedPlural}: (state, action) => {\n      adapter.removeMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    update${modelName}: (state, action) => {\n      console.log('action.payload', action.payload);\n      adapter.updateOne(state, action);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    update${capitalizedPlural}: (state, action) => {\n      adapter.updateMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    setActionError: (state, action: PayloadAction<{\n      type: |\n        'create${modelName}' | 'create${capitalizedPlural}' |\n        'delete${modelName}' | 'delete${capitalizedPlural}' |\n        'get${modelName}' | 'get${capitalizedPlural}' |\n        'update${modelName}' | 'update${capitalizedPlural}';\n      error: ExceptionObject;\n    }>) => {\n      const { type, error } = action.payload;\n\n      state.action[type].error = error;\n      state.lastUpdated = new Date().toISOString();\n    },\n    setActionInProgress: (state, action: PayloadAction<{\n      type: |\n        'create${modelName}' | 'create${capitalizedPlural}' |\n        'delete${modelName}' | 'delete${capitalizedPlural}' |\n        'get${modelName}' | 'get${capitalizedPlural}' |\n        'update${modelName}' | 'update${capitalizedPlural}';\n      inProgress: boolean;\n    }>) => {\n      const { type, inProgress } = action.payload;\n\n      state.inProgress = inProgress;\n      state.action[type].inProgress = inProgress;\n      state.lastUpdated = new Date().toISOString();\n    },\n  },\n});\n\nexport const create${modelName} = (${singularCamel}: ${modelName}): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.create${modelName}(${singularCamel});\n  \n      dispatch(slice.actions.add${modelName}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error creating ${modelName}', { cause: err });\n      \n      dispatch(slice.actions.setActionError({\n        type: 'create${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const create${capitalizedPlural} = (${pluralizedCamel}: ${modelName}[]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: true,\n      }));\n\n      const response = await httpClient.default.create${capitalizedPlural}(${pluralizedCamel});\n      \n      dispatch(slice.actions.add${capitalizedPlural}(response?.body));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error creating ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'create${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const delete${modelName} = (${singularCamel}: ${modelName}['id']): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.delete${modelName}(${singularCamel});\n      \n      dispatch(slice.actions.remove${modelName}(${singularCamel}));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error deleting ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'delete${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const delete${capitalizedPlural} = (${pluralizedCamel}: ${modelName}['id'][]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.delete${capitalizedPlural}(${pluralizedCamel});\n  \n      dispatch(slice.actions.remove${capitalizedPlural}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error deleting ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'delete${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const get${modelName} = (${singularCamel}: ${modelName}['id']): AppThunk => \n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.get${modelName}(${singularCamel});\n  \n      if (response?.body) {\n        dispatch(slice.actions.add${modelName}(response?.body));\n      }\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error getting ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'get${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const get${capitalizedPlural} = ({\n  conditions = [],\n  filters = {},\n  limit = 100,\n  offset = 0\n}: { \n  conditions?: Condition[],\n  filters?: Record<string, string>,\n  limit?: number;\n  offset?: number\n}): AppThunk =>  async (dispatch: AppDispatch, getState: () => RootState) => {\n  try {\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: true,\n    }));\n\n    const response = await httpClient.default.get${capitalizedPlural}({\n      conditions,\n      filters,\n      limit,\n      offset\n    });\n\n    dispatch(slice.actions.add${capitalizedPlural}(response?.body));\n\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: false,\n    }));\n  } catch (err: any) {\n    const exception = new Exception('Error getting ${capitalizedPlural}', { cause: err });\n\n    dispatch(slice.actions.setActionError({\n      type: 'get${capitalizedPlural}',\n      error: exception.toJSON(),\n    }));\n\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: false,\n    }));\n  }\n};\n\n\nexport const update${modelName} = (${singularCamel}: ${modelName}): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.update${modelName}(${singularCamel}.id, ${singularCamel});\n  \n      if (response?.body) {\n        dispatch(slice.actions.update${modelName}({ id: ${singularCamel}.id, changes: response.body }));\n    \n        dispatch(slice.actions.setActionInProgress({\n          type: 'update${modelName}',\n          inProgress: false,\n        }));\n      }\n    } catch (err: any) {\n      const exception = new Exception('Error updating ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'update${modelName}',\n        error: exception.toJSON(),\n      }));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n  \n\nexport const update${capitalizedPlural} = (${pluralizedCamel}: ${modelName}[]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.update${capitalizedPlural}(${pluralizedCamel});\n      \n      dispatch(slice.actions.update${capitalizedPlural}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error updating ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'update${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\n\nexport default slice.reducer;\n  `;\n}\n\nexport async function buildReduxSlices({\n  httpClientProjectName,\n  projectPath,\n  typesProjectName,\n}: {\n  readonly httpClientProjectName: string;\n  readonly projectPath: string;\n  readonly typesProjectName: string;\n}): Promise<void> {\n  try {\n    const MODELS_PATH = path.join(\n      path.resolve(),\n      '.applab/dependencies/models/src',\n    );\n    const BUILD_PATH = path.join(path.resolve(), projectPath, 'src');\n    const DIST_PATH = path.join(path.resolve(), projectPath, 'dist');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n\n    for (const file of files) {\n      if (file !== 'index.ts') {\n        const name = pluralize(\n          file[0]?.toLowerCase() + file.slice(1).replace('.ts', ''),\n        );\n\n        const reduxSlice = getModelSlice({\n          httpClientProjectName,\n          modelName: file.replace('.ts', ''),\n          typesProjectName,\n        });\n\n        // logger.info(`Writing ${name} Redux slice`);\n\n        await fs.writeFile(\n          path.join(BUILD_PATH, `${name}.ts`),\n          reduxSlice,\n          'utf8',\n        );\n      }\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    const indexFileContent = constructReduxReducersIndexScript(\n      files\n        .filter(f => f !== 'index.ts')\n        .map(file => pluralize(file).replace('.ts', '')),\n    );\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "import {\n  MenuField,\n  Model,\n  ModelField,\n  Primitives,\n  Relationship,\n} from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { constructModelExportIndexScript } from '../exports.js';\nimport { getTypescriptTypeFromPrimitive } from '../types.js';\nimport { getPrimitiveImports } from './types.js';\n\nexport function getSequelizeTypeFromPrimitive(type: Primitives) {\n  switch (type) {\n    case Primitives.Boolean:\n      return 'DataTypes.BOOLEAN';\n    case Primitives.DayOfMonth:\n      return 'DataTypes.INTEGER';\n    case Primitives.Weekday:\n      return 'DataTypes.STRING';\n    case Primitives.Float:\n      return 'DataTypes.FLOAT';\n    case Primitives.CurrencyCode:\n      return 'DataTypes.STRING';\n    case Primitives.DateTime:\n      return 'DataTypes.DATE';\n    case Primitives.Image:\n      return 'DataTypes.JSONB';\n    case Primitives.JSON:\n      return 'DataTypes.JSONB';\n    case Primitives.LongText:\n      return 'DataTypes.STRING';\n    case Primitives.Markdown:\n      return 'DataTypes.TEXT';\n    case Primitives.Menu:\n      return 'DataTypes.ENUM';\n    case Primitives.Month:\n      return 'DataTypes.INTEGER';\n    case Primitives.Number:\n      return 'DataTypes.INTEGER';\n    case Primitives.Tags:\n      return 'DataTypes.ARRAY(DataTypes.STRING)';\n    case Primitives.String:\n      return 'DataTypes.STRING';\n    case Primitives.UUID:\n      return 'DataTypes.UUID';\n    // case Primitives.UnofficialCurrencyCode:\n    //   return 'string';\n    default:\n      return 'DataTypes.STRING';\n  }\n}\n\n// function getSequelizePrimitives(type: Primitives) {\n//   switch (type) {\n//     case Primitives.Boolean:\n//       return 'DataTypes.BOOLEAN';\n//     case Primitives.DayOfMonth:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Weekday:\n//       return 'DataTypes.STRING';\n//     case Primitives.Float:\n//       return 'DataTypes.FLOAT';\n//     case Primitives.Currency:\n//       return 'DataTypes.STRING';\n//     case Primitives.DateTime:\n//       return 'DataTypes.DATE';\n//     case Primitives.JSON:\n//       return 'DataTypes.JSONB';\n//     case Primitives.LongText:\n//       return 'DataTypes.TEXT';\n//     case Primitives.Markdown:\n//       return 'DataTypes.TEXT';\n//     case Primitives.Menu:\n//       return 'DataTypes.ENUM';\n//     case Primitives.Month:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Number:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Tags:\n//       return 'DataTypes.JSONB';\n//     case Primitives.String:\n//       return 'DataTypes.STRING';\n//     case Primitives.UUID:\n//       return 'DataTypes.UUIDV4';\n//     // case Primitives.UnofficialCurrencyCode:\n//     //   return 'DataTypes.STRING';\n//     default:\n//       return 'string';\n//   }\n// }\n\nexport function constructSequelizeModelClassStr(model: Model): string {\n  const typePropertiesStr = constructTypePropsFromFields(model.fields, true);\n  const classPropertiesStr = constructSequelizeClassPropsWithTypes(model);\n\n  return `export type ${model.name}Attributes = {\n  ${typePropertiesStr}\n};\n\nexport type ${model.name}CreationAttributes = Optional<${model.name}Attributes, 'id'>;\nexport class ${model.name} extends Model<\n  ${model.name}Attributes,\n  ${model.name}CreationAttributes\n> implements ${model.name}Attributes {\n${classPropertiesStr}\n}\n`;\n}\n\nexport function constructTypePropsFromFields(\n  fields: Model['fields'],\n  sequelize = false,\n): string {\n  let fieldsStr = ` id: string;\n  `;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `  ${field[0]}${\n      field[1].required ? '' : '?'\n    }: ${getTypescriptTypeFromPrimitive(field[1].type)} ${\n      field[1].required ? '' : '| null'\n    };\\n`;\n  }\n\n  return fieldsStr;\n}\n\nfunction constructSequelizeClassPropsWithTypes(model: Model): string {\n  let fieldsStr = ` declare readonly id: string;\n\n  public static associate: (models: Record<string, ModelStatic<Model>>) => void;\n`;\n\n  for (const field of [...Object.entries(model.fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `  declare ${field[0]}: ${getTypescriptTypeFromPrimitive(\n      field[1].type,\n    )}${!field[1].required ? ' | null' : ''};\\n`;\n  }\n\n  // if (model.relationships) {\n  //   const { belongsTo, hasOne, hasMany } = model.relationships;\n\n  //   let belongsToStr = '';\n\n  //   if (Array.isArray(belongsTo) && belongsTo.length > 0) {\n  //     belongsTo.forEach(m => {\n  //       belongsToStr += `    public ${m}Id!: string;`;\n  //     });\n  //   }\n\n  //   let hasOneStr = '';\n\n  //   if (Array.isArray(hasOne) && hasOne.length > 0) {\n  //     hasOne.forEach(m => {\n  //       belongsToStr += `    public ${m}Id!: string;`;\n  //     });\n  //   }\n\n  //   fieldsStr += belongsToStr + hasOneStr;\n  // }\n\n  return fieldsStr;\n}\n\nfunction constructSequelizeFieldStr(\n  fieldName: string,\n  field: ModelField,\n): string {\n  const fieldType = getSequelizeTypeFromPrimitive(field.type);\n\n  if (fieldName) {\n    return `\\n  ${fieldName}: {\n        allowNull: ${field?.required ? 'false' : 'true'},\n        type: ${\n          fieldType === 'DataTypes.ENUM' && field.menu\n            ? `DataTypes.ENUM(${field.menu\n                .map((i: MenuField) => `'${i.value}'`)\n                .join(',')})`\n            : fieldType\n        }\n      },`;\n  }\n\n  return '';\n}\n\nfunction getSequelizeFieldsStr(fields: Model['fields']): string {\n  let fieldsStr = ` id: {\n        allowNull: false,\n        defaultValue: DataTypes.UUIDV4,\n        primaryKey: true,\n        type: DataTypes.UUID,\n      },`;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += constructSequelizeFieldStr(field[0], field[1]);\n  }\n\n  return fieldsStr;\n}\n\nexport function constructSequelizeModelRelationships(\n  modelName: string,\n  relationships?: Relationship,\n): string {\n  if (relationships) {\n    const { belongsTo, hasOne, hasMany } = relationships;\n\n    let belongsToStr = '';\n\n    if (Array.isArray(belongsTo) && belongsTo.length > 0) {\n      for (const model of belongsTo) {\n        belongsToStr += `\n          if (${model}) ${modelName}.belongsTo(${model});`;\n      }\n    }\n\n    let hasOneStr = '';\n\n    if (Array.isArray(hasOne) && hasOne.length > 0) {\n      for (const model of hasOne) {\n        hasOneStr += `     \n        if (${model}) ${modelName}.hasOne(${model});`;\n      }\n    }\n\n    let hasManyStr = '';\n\n    if (Array.isArray(hasMany) && hasMany.length > 0) {\n      for (const model of hasMany) {\n        hasManyStr += `\n        if (${model}) ${modelName}.hasMany(${model});`;\n      }\n    }\n\n    return belongsToStr + hasOneStr + hasManyStr;\n  }\n\n  return '';\n}\n\nexport function constructSequelizeModelDependencies(\n  modelName: string,\n  relationships?: Relationship,\n): readonly string[] {\n  if (!relationships) {\n    return [];\n  }\n\n  const { belongsTo, hasOne, hasMany } = relationships;\n\n  return [\n    ...new Set([\n      ...(belongsTo && belongsTo.length > 0 ? belongsTo : []),\n      ...(hasOne && hasOne.length > 0 ? hasOne : []),\n      ...(hasMany && hasMany.length > 0 ? hasMany : []),\n    ]),\n  ];\n\n  // console.log('modelName', modelName);\n  // console.log('relationships', relationships);\n  // console.log('allRelationshipModels', allRelationshipModels);\n\n  // return allRelationshipModels;\n  // return (\n\n  // ).slice(0, -1);\n}\n\nexport function constructSequelizeModelFromModel(model: Model): string {\n  const classStr = constructSequelizeModelClassStr(model);\n  const fieldsStr = getSequelizeFieldsStr(model.fields);\n  const dependentModels = constructSequelizeModelDependencies(\n    model.name,\n    model.relationships,\n  );\n\n  let modelImports = '';\n\n  for (const m of dependentModels) {\n    modelImports += `import { ${m} as ${m}Type } from './${m}';\\n`;\n  }\n\n  const dependentModelsStr =\n    Array.isArray(dependentModels) && dependentModels.length > 0\n      ? `${dependentModels.filter(m => m !== model.name).join(', ')},`\n      : '';\n  // const dependentModelsTypesStr =\n  //   Array.isArray(dependentModels) && dependentModels.length > 0\n  //     ? `{ ${dependentModels\n  //         .map((m: string) => {\n  //           return `${m}: ModelStatic<${m}Type> `;\n  //         })\n  //         .join(',')\n  //         .slice(0, -1)} }`\n  //     : `{}`;\n\n  // console.log('dependentModelsTypesStr', dependentModelsTypesStr);\n  return `import { DataTypes, Sequelize, Model, ModelStatic, Optional } from 'sequelize';\n\n\n  ${getPrimitiveImports(model.fields)}\n  \n${classStr}\n\nexport default (sequelize: Sequelize) => {\n    ${model.name}.init(\n      {${fieldsStr}},\n      {\n        createdAt: 'created_date',\n        indexes: [{ fields: ['id'], unique: true }],\n        modelName: '${model.name}',\n        sequelize,\n        updatedAt: 'updated_date',\n      },\n    );\n  \n  ${\n    dependentModels.length === 0\n      ? ''\n      : `  ${\n          model.name\n        }.associate =  ({ ${dependentModelsStr} }: Record<string, ModelStatic<Model>>) => {${constructSequelizeModelRelationships(\n          model.name,\n          model.relationships,\n        )}\n    };`\n  }\n  \n    return ${model.name};\n  };`;\n}\n\nexport async function buildSequelizeModels(projectPath: string) {\n  try {\n    const MODELS_BUILD_PATH = path.join(\n      path.resolve(),\n      '.applab/dependencies/models/dist/index.js',\n    );\n    const BUILD_PATH = path.join(path.resolve(), projectPath, 'src');\n    const DIST_PATH = path.join(path.resolve(), projectPath, 'dist');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const Models = await import(MODELS_BUILD_PATH);\n\n    for (const model of Object.entries(Models as Record<string, Model>)) {\n      const modelName = model[1].name;\n      const sequelizeModel = constructSequelizeModelFromModel(model[1]);\n      const fileName = `${modelName}.ts`;\n      const filePath = path.join(BUILD_PATH, fileName);\n\n      // logger.info(`Writing ${modelName}.ts Sequelize model`);\n\n      await fs.writeFile(filePath, sequelizeModel, 'utf8');\n    }\n\n    const indexFileContent = constructModelExportIndexScript(\n      Object.keys(Models).map(modelName => modelName),\n      'sequelize',\n    );\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "import { Image } from '../..';\n\nexport type Activity = {\n  readonly who?: {\n    readonly image?: Image;\n    readonly name?: string;\n    readonly to?: string;\n  };\n  readonly what?: {\n    readonly image?: Image;\n    readonly label?: string;\n    readonly name?: Activities;\n    readonly to?: string;\n  };\n  readonly when?: string;\n  readonly where?: string;\n  readonly why?: string;\n  readonly how?: string;\n};\n\nexport enum Activities {\n  Comment = 'comment',\n  Create = 'create',\n  Delete = 'delete',\n  Edit = 'edit',\n  Invoice = 'invoice',\n  Message = 'message',\n  PageView = 'pageView',\n  Paid = 'paid',\n  Payment = 'payment',\n  Purchase = 'purchase',\n  Referral = 'referral',\n  Renewal = 'renewal',\n  Signup = 'signup',\n  Subscription = 'subscription',\n  Upgrade = 'upgrade',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum Analytics {\n  Business = 'business',\n  Engineering = 'engineering',\n  Exception = 'exception',\n  LogMessage = 'log-message',\n  Marketing = 'marketing',\n  PageLeave = 'page-leave',\n  PageView = 'page-view',\n  Product = 'product',\n  QualityManagement = 'quality-management',\n  UserAccess = 'user-access',\n  UserLogin = 'user-login',\n  UserLogout = 'user-logout',\n  UserSignup = 'user-signup',\n  UserPreferencesChanged = 'user-preferences-changed',\n  WebsiteVisit = 'website-visit',\n}\n\nexport type AnalyticsEvent<T = {}> = {\n  created: DateTime;\n  data?: Record<string, unknown>;\n  id?: string;\n  message?: string;\n  name: Analytics;\n} & T;\n", "import { UserAccessDevice } from '../../user/access';\nimport { Analytics, AnalyticsEvent } from '..';\n\nexport enum PageLeaveMethod {\n  CloseTab = 'close-tab',\n  ExternalLink = 'external-link',\n  NavigateAway = 'navigate-away',\n  Unknown = 'unknown',\n}\n\nexport type PageViewEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    referrer_url?: string;\n  };\n  description: 'Occurs when a person views a page in a Website or application.';\n  id: string;\n  name: Analytics.PageView;\n}>;\n\nexport type PageLeaveEvent = AnalyticsEvent<{\n  data: {\n    device: UserAccessDevice;\n    leave_method: PageLeaveMethod;\n  };\n  description: 'Occurs when a person leaves a page.';\n  id: string;\n  name: Analytics.PageLeave;\n}>;\n\nexport type WebsiteVisitEvent = AnalyticsEvent<{\n  device: UserAccessDevice;\n  description: 'Occurs when a person a website.';\n  id: string;\n  name: Analytics.WebsiteVisit;\n}>;\n", "import { DateTime } from 'luxon';\n\nimport { Project } from '../../project';\nimport { Application } from '..';\nimport { Environment } from '../environment';\nimport { PipelineWorkflow } from '../pipeline/workflow';\n\nexport enum DeploymentTarget {\n  Ecs = 'Ecs',\n}\n\nexport enum DeploymentStatus {\n  Finished = 'Finished',\n  Queued = 'Queued',\n  Running = 'Running',\n  Started = 'Started',\n}\n\nexport type Deployment = {\n  id: string;\n  status: DeploymentStatus;\n  target: DeploymentTarget;\n  ApplicationId: Application['id'];\n  EnvironmentId: Environment['id'];\n  CreatedDate: DateTime;\n  PipelineWorkflowId: PipelineWorkflow['id'];\n  ProjectId: Project['id'];\n};\n", "export enum DeviceType {\n  Mobile = 'mobile',\n  TV = 'tv',\n  Watch = 'watch',\n  Web = 'web',\n}\n", "export enum EnvironmentType {\n  Development = 'Development',\n  NonProduction = 'NonProduction',\n  Production = 'Production',\n}\n\nexport type Environment = {\n  id: string;\n  type: EnvironmentType;\n  name: string;\n  description: string;\n  public: boolean;\n};\n", "export enum OnboardingStatus {\n  Completed = 'completed',\n  Started = 'started',\n  Uncompleted = 'uncompleted',\n}\n\nexport type OnboardingStep = {\n  description: string;\n  id: string;\n  guide_id: OnboardingGuide;\n  name: string;\n};\n\nexport type OnboardingGuide = {\n  id: string;\n  name: string;\n  description: string;\n  steps: OnboardingStep['id'][];\n};\n", "import { Project } from '../../project';\n\nexport enum PipelineType {\n  Build = 'Build',\n  Deployment = 'Deployment',\n  Test = 'Test',\n}\n\nexport type Pipeline = {\n  id: string;\n  name: string;\n  type: PipelineType;\n  ProjectId: Project['id'];\n};\n", "import { Project } from '../../project';\nimport { Application } from '../index';\nimport { Pipeline } from './index';\n\nexport enum PipelineWorkflowStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport enum PipelineStepStatus {\n  Canceled = 'Canceled',\n  Completed = 'Completed',\n  Failed = 'Failed',\n  Running = 'Running',\n  Queued = 'Queued',\n  Waiting = 'Waiting',\n}\n\nexport type PipelineStepOutputLine = {\n  id: string;\n  text: string;\n  PipelineStepOutputId: PipelineStepOutput['id'];\n};\n\nexport type PipelineStepOutput = {\n  id: string;\n  PipeWorkflowStepId: PipelineWorkflowStep['id'];\n};\n\nexport type PipelineWorkflowStep = {\n  enabled: boolean;\n  id: string;\n  status: PipelineStepStatus;\n  PipeWorkflowId: PipelineWorkflow['id'];\n};\n\nexport type PipelineWorkflow = {\n  description: string;\n  enabled: boolean;\n  id: string;\n  name: string;\n  ActivePipelineId: Pipeline['id'];\n  ApplicationId: Application['id'];\n  ProjectId: Project['id'];\n};\n", "import React from 'react';\n\nexport enum PageRole {\n  ForgotPassword = 'forgot_password',\n  Index = 'index',\n  Login = 'login',\n  PageNotFound = '404',\n  Signup = 'signup',\n  VerifyCode = 'verify_code',\n}\n\nexport type PageRoute = {\n  loginRequired?: boolean;\n  path?: string;\n  component: React.ElementType;\n  role?: PageRole;\n};\n", "export enum AlertLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n", "import { ComponentType } from 'react';\n\nexport enum ModalType {\n  Details = 'details',\n  Dialog = 'dialog',\n}\n\nexport type Modal = {\n  component?: ComponentType<any>;\n  id: string;\n  icon?: string;\n  title?: string;\n  type: ModalType;\n  closeable?: boolean;\n};\n", "export enum NotificationType {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport type Notification<T = {}> = {\n  color?: string;\n  id: number;\n  icon?: string;\n  message: string;\n  timed: boolean;\n  type?: NotificationType;\n  seconds: number;\n} & T;\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { Person } from '../../../people/person';\n\nexport enum DataPointMetric {\n  AccountBalance = 'AccountBalance',\n  UserAssets = 'UserAssets',\n  UserCreditCardDebt = 'UserCreditCardDebt',\n  UserCreditLimit = 'UserCreditLimit',\n  UserCreditUtilization = 'UserCreditUtilization',\n  UserDebt = 'UserDebt',\n  UserInvestments = 'UserInvestments',\n  UserRetirement = 'UserRetirement',\n  UserSavings = 'UserSavings',\n}\n\nexport type DataPoint = {\n  id: string;\n  date: Date;\n  currency_code?: CurrencyCode;\n  metric: DataPointMetric;\n  value: number;\n  person_id: Person['id'];\n};\n", "export enum DefaultValue {\n  DateTime = 'date_time',\n  True = 'true',\n  False = 'false',\n  UniqueId = 'unique_id',\n}\n", "import { DateTime } from 'luxon';\n\nimport { ModelField } from './field';\nimport { Relationship } from './relationship';\n\nexport enum ModelType {\n  DomainModel = 'domain_entity',\n  GenericModel = 'generic_entity',\n}\n\nexport type ModelProps<T = {}> = {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n} & T;\n\nexport class Model implements ModelProps {\n  created?: DateTime;\n  description?: string;\n  fields: Record<string, ModelField>;\n  id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  name: string;\n  relationships?: Relationship;\n  updated?: DateTime;\n\n  constructor(props: ModelProps) {\n    const { created, description, fields, name, id, relationships, updated } =\n      props;\n\n    this.created = created;\n    this.description = description;\n    this.fields = fields;\n    this.id = id;\n    this.name = name;\n    this.relationships = relationships;\n    this.updated = updated;\n  }\n}\n", "import { CurrencyCode } from '../../../i18n/currency';\nimport { CountryCode } from '../../../i18n/locale/country';\nimport { ISO8601String } from '../../../i18n/date';\nimport { LanguageCode } from '../../../i18n/language';\nimport { TimezoneRegions } from '../../../i18n/time/region';\n\nexport type MenuItem = {\n  label: string;\n  value: string | number | boolean;\n};\n\nexport type AirportCode = string;\nexport type BankIDCode = string;\nexport type BitcoinAddress = string;\nexport type Boolean = boolean;\nexport type City = string;\nexport type Color = string;\nexport type CreditCard = string;\nexport type CurrencyAmount = number;\nexport type DataURI = string;\nexport type Date = ISO8601String;\nexport type DateRange = ISO8601String[];\nexport type DateTime = ISO8601String;\nexport type DayOfMonth = string;\nexport type DomainName = string;\nexport type EmailAddress = string;\nexport type EthereumAddress = string;\nexport type EAN = string;\nexport type EIN = string;\nexport type Float = number;\nexport type GeographicCoordinate = number;\nexport type GeographicCoordinates = number[];\nexport type GitRepositoryURL = string;\nexport type HSLColor = string;\nexport type HexColor = string;\nexport type Hexadecimal = string;\nexport type IBAN = string;\nexport type IMEI = number;\nexport type IPAddress = string;\nexport type IPAddressRange = string[];\nexport type ISBN = string;\nexport type ISIN = string;\nexport type ISMN = string;\nexport type ISSN = string;\nexport type ISO8601 = string;\nexport type ISO31661Alpha2 = string;\nexport type ISO31661Alpha3 = string;\nexport type ISO4217 = CurrencyCode;\nexport type Image = {\n  description?: string;\n  format?: string;\n  path?: string;\n  url?: string;\n};\nexport type Integer = number;\nexport type JSONObject = Record<string, unknown>;\nexport type LicensePlateNumber = string;\nexport type LongText = string;\nexport type MD5 = string;\nexport type MACAddress = string;\nexport type MagnetURI = string;\nexport type Markdown = string;\nexport type Menu = {\n  defaultValue?: MenuItem['value'];\n  items: MenuItem[];\n};\nexport type MimeType = string;\nexport type Month = string;\nexport type Number = number;\nexport type Password = string;\nexport type PassportNumber = string;\nexport type Percent = number;\nexport type PhoneNumber = string;\nexport type Port = number;\nexport type PostalCode = string;\nexport type Province = string;\nexport type RFC3339 = string;\nexport type RGBColor = string;\nexport type SemanticVersion = string;\nexport type SSN = number;\nexport type State = string;\nexport type StreetAddress = string;\nexport type String = string;\nexport type Tags = MenuItem[];\nexport type TaxIDNumber = string;\nexport type Time = string;\nexport type TimeRange = string[];\nexport type TimeOfDay = string;\nexport type Timezone = TimezoneRegions;\nexport type URL = string;\nexport type URLPath = string;\nexport type UUID = string;\nexport type VATIDNumber = string;\nexport type VerificationCode = string;\nexport type Video = {\n  description?: string;\n  format?: string;\n  url?: string;\n  path?: string;\n};\nexport type Weekday = string;\nexport type Year = number;\n\nexport type Primitive =\n  | AirportCode\n  | BankIDCode\n  | BitcoinAddress\n  | boolean\n  | City\n  | Color\n  | CountryCode\n  | CreditCard\n  | CurrencyAmount\n  | CurrencyCode\n  | DataURI\n  | Date\n  | DateRange\n  | DateTime\n  | DayOfMonth\n  | DomainName\n  | EmailAddress\n  | EthereumAddress\n  | EAN\n  | EIN\n  | Float\n  | GeographicCoordinate\n  | GeographicCoordinates\n  | GitRepositoryURL\n  | HSLColor\n  | HexColor\n  | Hexadecimal\n  | IBAN\n  | IMEI\n  | IPAddress\n  | IPAddressRange\n  | ISBN\n  | ISIN\n  | ISMN\n  | ISSN\n  | ISO8601\n  | ISO31661Alpha2\n  | ISO31661Alpha3\n  | ISO4217\n  | Image\n  | Integer\n  | JSONObject\n  | LanguageCode\n  | LicensePlateNumber\n  | LongText\n  | MD5\n  | Markdown\n  | Menu\n  | number\n  | MACAddress\n  | MagnetURI\n  | MimeType\n  | Month\n  | Password\n  | PassportNumber\n  | Percent\n  | PhoneNumber\n  | Port\n  | PostalCode\n  | Province\n  | RFC3339\n  | RGBColor\n  | SemanticVersion\n  | SSN\n  | State\n  | StreetAddress\n  | string\n  | Tags\n  | TaxIDNumber\n  | Time\n  | TimeRange\n  | TimeOfDay\n  | Timezone\n  | URL\n  | URLPath\n  | UUID\n  | VATIDNumber\n  | Video\n  | VerificationCode\n  | Weekday\n  | Year;\n\n// export enum Primitives {\n//   AirportCode = AirportCode,\n//   BankIDCode = BankIDCode,\n//   BitcoinAddress = BitcoinAddress,\n//   Boolean = Boolean,\n//   City = City,\n//   Color = Color,\n//   CountryCode = CountryCode,\n//   CreditCard = CreditCard,\n//   CurrencyAmount = CurrencyAmount,\n//   CurrencyCode =CurrencyCode,\n//   DataURI = 'data-uri',\n//   Date = 'date',\n//   DateRange = 'date-range',\n//   DateTime = 'date-time',\n//   DayOfMonth = 'day-of-month',\n//   DomainName = 'domain-name',\n//   EmailAddress = 'email-address',\n//   EthereumAddress = 'ethereum-address',\n//   EAN = 'european-article-number',\n//   EIN = 'employer-identification-number',\n//   Float = 'float',\n//   GeographicCoordinate = 'geographic-coordinate',\n//   GeographicCoordinates = 'geographic-coordinates',\n//   GitRepositoryURL = 'git-repository-url',\n//   HSLColor = 'hsl-color',\n//   HexColor = 'hex-color',\n//   Hexadecimal = 'hexadecimal',\n//   IBAN = 'international-bank-account-number',\n//   IMEI = 'international-mobile-equipment-identifier',\n//   IPAddress = 'ip-address',\n//   IPAddressRange = 'ip-address-range',\n//   ISBN = 'international-standard-book-number',\n//   ISIN = 'international-stock-number',\n//   ISMN = 'international-standard-music-number',\n//   ISSN = 'international-standard-serial-number',\n//   ISO8601 = 'iso-8601',\n//   ISO31661Alpha2 = 'iso-31661-alpha-2',\n//   ISO31661Alpha3 = 'iso-31661-alpha-3',\n//   ISO4217 = 'iso-4217',\n//   Image = 'image',\n//   Integer = 'integer',\n//   JSON = 'json',\n//   LanguageCode = 'language-code',\n//   LicensePlateNumber = 'license-plate-number',\n//   LongText = 'long-text',\n//   MD5 = 'md5',\n//   Markdown = 'markdown',\n//   Menu = 'menu',\n//   Number = 'number',\n//   MACAddress = 'mac-address',\n//   MagnetURI = 'magnet-uri',\n//   MimeType = 'mime-type',\n//   Month = 'month',\n//   Password = 'password',\n//   PassportNumber = 'passport-number',\n//   Percent = 'percent',\n//   PhoneNumber = 'phone-number',\n//   Port = 'port',\n//   PostalCode = 'postal-code',\n//   Province = 'province',\n//   RFC3339 = 'rfc-3339',\n//   RGBColor = 'rgb-color',\n//   SemanticVersion = 'semantic-version',\n//   SSN = 'social-security-number',\n//   State = 'state',\n//   StreetAddress = 'street-address',\n//   String = 'string',\n//   Tags = 'tags',\n//   TaxIDNumber = 'tax-id-number',\n//   Time = 'time',\n//   TimeOfDay = 'time-of-day',\n//   TimeRange = 'time-range',\n//   TimezoneRegion = 'timezone-region',\n//   URL = 'url',\n//   URLPath = 'url-path',\n//   UUID = 'uuid',\n//   VATIDNumber = 'value-added-tax-id-number',\n//   VerificationCode = 'verification-code',\n//   Video = 'video',\n//   Weekday = 'weekday',\n//   Year = 'year',\n// }\n\nexport enum Primitives {\n  AirportCode = 'airport-code',\n  BankIDCode = 'bank-id-code',\n  BitcoinAddress = 'bitcoin-address',\n  Boolean = 'boolean',\n  City = 'city',\n  Color = 'color',\n  CountryCode = 'country-code',\n  CreditCard = 'credit-card',\n  CurrencyAmount = 'currency-amount',\n  CurrencyCode = 'currency-code',\n  DataURI = 'data-uri',\n  Date = 'date',\n  DateRange = 'date-range',\n  DateTime = 'date-time',\n  DayOfMonth = 'day-of-month',\n  DomainName = 'domain-name',\n  EmailAddress = 'email-address',\n  EthereumAddress = 'ethereum-address',\n  EAN = 'european-article-number',\n  EIN = 'employer-identification-number',\n  Float = 'float',\n  GeographicCoordinate = 'geographic-coordinate',\n  GeographicCoordinates = 'geographic-coordinates',\n  GitRepositoryURL = 'git-repository-url',\n  HSLColor = 'hsl-color',\n  HexColor = 'hex-color',\n  Hexadecimal = 'hexadecimal',\n  IBAN = 'international-bank-account-number',\n  IMEI = 'international-mobile-equipment-identifier',\n  IPAddress = 'ip-address',\n  IPAddressRange = 'ip-address-range',\n  ISBN = 'international-standard-book-number',\n  ISIN = 'international-stock-number',\n  ISMN = 'international-standard-music-number',\n  ISSN = 'international-standard-serial-number',\n  ISO8601 = 'iso-8601',\n  ISO31661Alpha2 = 'iso-31661-alpha-2',\n  ISO31661Alpha3 = 'iso-31661-alpha-3',\n  ISO4217 = 'iso-4217',\n  Image = 'image',\n  Integer = 'integer',\n  JSON = 'json',\n  LanguageCode = 'language-code',\n  LicensePlateNumber = 'license-plate-number',\n  LongText = 'long-text',\n  MD5 = 'md5',\n  Markdown = 'markdown',\n  Menu = 'menu',\n  Number = 'number',\n  MACAddress = 'mac-address',\n  MagnetURI = 'magnet-uri',\n  MimeType = 'mime-type',\n  Month = 'month',\n  Password = 'password',\n  PassportNumber = 'passport-number',\n  Percent = 'percent',\n  PhoneNumber = 'phone-number',\n  Port = 'port',\n  PostalCode = 'postal-code',\n  Province = 'province',\n  RFC3339 = 'rfc-3339',\n  RGBColor = 'rgb-color',\n  SemanticVersion = 'semantic-version',\n  SSN = 'social-security-number',\n  State = 'state',\n  StreetAddress = 'street-address',\n  String = 'string',\n  Tags = 'tags',\n  TaxIDNumber = 'tax-id-number',\n  Time = 'time',\n  TimeOfDay = 'time-of-day',\n  TimeRange = 'time-range',\n  TimezoneRegion = 'timezone-region',\n  URL = 'url',\n  URLPath = 'url-path',\n  UUID = 'uuid',\n  VATIDNumber = 'value-added-tax-id-number',\n  VerificationCode = 'verification-code',\n  Video = 'video',\n  Weekday = 'weekday',\n  Year = 'year',\n}\n", "export enum Severity {\n  Critical = 'Critical',\n  Error = 'Error',\n  Fatal = 'Fatal',\n  Warning = 'Warning',\n}\n", "export enum Condition {\n  Contains = 'contains',\n  HasCharacterCount = 'has-character-count',\n  HasNumberCount = 'has-number-count',\n  HasLetterCount = 'has-letter-count',\n  HasLowercaseCount = 'has-lowercase-count',\n  HasSpacesCount = 'has-spaces-count',\n  HasSymbolCount = 'has-symbol-count',\n  HasUppercaseCount = 'has-uppercase-count',\n  IsAfter = 'is-after',\n  IsAfterOrEqual = 'is-after-or-equal',\n  IsAirport = 'is-airport',\n  IsAlpha = 'is-alpha',\n  IsAlphanumeric = 'is-alphanumeric',\n  IsAlgorithmHash = 'is-algorithm-hash',\n  IsAscii = 'is-ascii',\n  IsBase64 = 'is-base-64',\n  IsBefore = 'is-before',\n  IsBeforeOrAfter = 'is-before-or-after',\n  IsBeforeOrEqual = 'is-before-or-equal',\n  IsBetween = 'is-between',\n  IsBIC = 'is-bic',\n  IsBitcoinAddress = 'is-bitcoin-address',\n  IsBoolean = 'is-boolean',\n  IsColor = 'is-color',\n  IsComplexEnough = 'is-complex-enough',\n  IsCountry = 'is-country',\n  IsCreditCard = 'is-credit-card',\n  IsCurrency = 'is-currency',\n  IsDataURI = 'is-data-uri',\n  IsDate = 'is-date',\n  IsDateRange = 'is-date-range',\n  IsDateTime = 'is-date-time',\n  IsDayOfMonth = 'is-day-of-month',\n  IsDecimal = 'is-decimal',\n  IsDivisibleBy = 'is-divisible-by',\n  IsDomainName = 'is-domain-name',\n  IsEmailAddress = 'is-email-address',\n  IsEthereumAddress = 'is-ethereum-address',\n  IsEAN = 'is-ean',\n  IsEIN = 'is-ein',\n  IsEqual = 'is-equal',\n  IsEvenNumber = 'is-even-number',\n  IsFloat = 'is-float',\n  IsIBAN = 'is-iban',\n  IsGreaterThan = 'greater-than',\n  IsGreaterThanOrEqual = 'greater-than-or-equal',\n  IsHSLColor = 'is-hsl-color',\n  IsHexColor = 'is-hex-color',\n  IsHexadecimal = 'is-hexadecimal',\n  IsIdentityCardCode = 'is-identity-card-code',\n  IsIMEI = 'is-imei',\n  IsInIPAddressRange = 'is-in-ip-address-range',\n  IsInList = 'is-in-list',\n  IsInTheLast = 'is-in-the-last',\n  IsInteger = 'is-integer',\n  IsIPAddress = 'is-ip-address',\n  IsIPAddressRange = 'is-ip-address-range',\n  IsISBN = 'is-isbn',\n  IsISIN = 'is-isin',\n  IsISMN = 'is-ismn',\n  IsISRC = 'is-isrc',\n  IsISSN = 'is-issn',\n  IsISO4217 = 'is-iso-4217',\n  IsISO8601 = 'is-iso-8601',\n  IsISO31661Alpha2 = 'is-iso-31661-alpha-2',\n  IsISO31661Alpha3 = 'is-iso-31661-alpha-3',\n  IsJSON = 'is-json',\n  IsLanguage = 'is-language',\n  IsLatitude = 'is-latitude',\n  IsLongitude = 'is-longitude',\n  IsLengthEqual = 'is-length-equal',\n  IsLengthGreaterThan = 'is-length-greater-than',\n  IsLengthGreaterThanOrEqual = 'is-length-great-than-or-equal',\n  IsLengthLessThan = 'is-length-less-than',\n  IsLengthLessThanOrEqual = 'is-length-less-than-or-equal',\n  IsLessThan = 'less-than',\n  IsLessThanOrEqual = 'less-than-or-equal',\n  IsLicensePlateNumber = 'is-license-plate-number',\n  IsLowercase = 'is-lowercase',\n  IsOctal = 'is-octal',\n  IsMACAddress = 'is-mac-address',\n  IsMD5 = 'is-md5',\n  IsMagnetURI = 'is-magnet-uri',\n  IsMarkdown = 'is-markdown',\n  IsMimeType = 'is-mime-type',\n  IsMonth = 'is-month',\n  IsNegativeNumber = 'is-negative-number',\n  IsNotDate = 'is-not-date',\n  IsNotEqual = 'is-not-equal',\n  IsNotInIPAddressRange = 'is-not-in-ip-address-range',\n  IsNotInList = 'is-not-in-list',\n  IsNotNull = 'is-not-null',\n  IsNotRegexMatch = 'is-not-regex-match',\n  IsNotToday = 'is-not-today',\n  IsNumber = 'is-number',\n  IsNumeric = 'is-numeric',\n  IsOddNumber = 'is-odd-number',\n  IsPassportNumber = 'is-passport-number',\n  IsPhoneNumber = 'is-phone-number',\n  IsPort = 'is-port',\n  IsPositiveNumber = 'is-positive-number',\n  IsPostalCode = 'is-postal-code',\n  IsProvince = 'is-province',\n  IsRGBColor = 'is-rgb-color',\n  IsRegexMatch = 'is-regex-match',\n  IsRequired = 'is-required',\n  IsSemanticVersion = 'is-semantic-version',\n  IsSlug = 'is-slug',\n  IsSSN = 'is-ssn',\n  IsState = 'is-state',\n  IsStreetAddress = 'is-street-address',\n  IsString = 'is-string',\n  IsStrongPassword = 'is-strong-password',\n  IsTags = 'is-tags',\n  IsTaxIDNumber = 'is-tax-id-number',\n  IsThisMonth = 'is-this-month',\n  IsThisQuarter = 'is-this-quarter',\n  IsThisWeek = 'is-this-week',\n  IsThisWeekend = 'is-this-weekend',\n  IsThisYear = 'is-this-year',\n  IsTime = 'is-time',\n  IsTimeOfDay = 'is-time-of-day',\n  IsTimeRange = 'is-time-range',\n  IsToday = 'is-today',\n  IsURL = 'is-url',\n  IsUUID = 'is-uuid',\n  IsUppercase = 'is-uppercase',\n  IsUsernameAvailable = 'is-username-available',\n  IsValidStreetAddress = 'is-valid-street-address',\n  IsVATIDNumber = 'is-vat-id-number',\n  IsWeekday = 'is-weekday',\n  IsWeekend = 'is-weekend',\n  IsYear = 'is-year',\n}\n\nexport enum AuthenticationCondition {\n  IsAuthenticated = 'is-authenticated',\n  IsNotAuthenticated = 'is-not-authenticated',\n  IsUsernameAvailable = 'is-username-available',\n  PasswordMismatch = 'password-mismatch',\n}\n\nexport type RuleCondition = {\n  condition: Condition | AuthenticationCondition;\n  description: string;\n  name: string;\n  subject: string;\n  value: any;\n};\n", "import { Condition } from '../../index';\n\nexport enum ColorCondition {\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsNotNull = Condition.IsNotNull,\n  IsRGBColor = Condition.IsRGBColor,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum AlgorithmHashCondition {\n  IsAlgorithmHash = Condition.IsAlgorithmHash,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SemanticVersionCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsString = Condition.IsString,\n}\n\nexport enum UUIDCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsUUID = Condition.IsUUID,\n}\n\nexport enum MD5Condition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMD5 = Condition.IsMD5,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum BooleanCondition {\n  IsBoolean = Condition.IsBoolean,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DateCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DateRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsDateRange = Condition.IsDateRange,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum DateTimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DayOfMonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDayOfMonth = Condition.IsDayOfMonth,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsToday = Condition.IsToday,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum MonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMonth = Condition.IsMonth,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisMonth = Condition.IsThisMonth,\n}\n\nexport enum TimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTime = Condition.IsTime,\n}\n\nexport enum TimeRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsTime = Condition.IsTime,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum TimeOfDayCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeOfDay = Condition.IsTimeOfDay,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum WeekdayCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum YearCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisYear = Condition.IsThisYear,\n  IsYear = Condition.IsYear,\n}\n", "import { Condition } from '../index';\n\nexport enum HexadecimalCondition {\n  IsEqual = Condition.IsEqual,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum JSONCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MarkdownCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsMarkdown = Condition.IsMarkdown,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../../index';\n\nexport enum CurrencyCondition {\n  IsBetween = Condition.IsBetween,\n  IsCurrency = Condition.IsCurrency,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsISO8601 = Condition.IsISO8601,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n}\n\nexport enum BitcoinAddressCondition {\n  IsBitcoinAddress = Condition.IsBitcoinAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum EthereumAddressCondition {\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum LanguageCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsLanguage = Condition.IsLanguage,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../../index';\n\nexport enum CityCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum CountryCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsCountry = Condition.IsCountry,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum LatitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum LongitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum PostalCodeCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsPostalCode = Condition.IsPostalCode,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum ProvinceCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsProvince = Condition.IsProvince,\n  IsString = Condition.IsString,\n}\n\nexport enum StateCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsState = Condition.IsState,\n  IsString = Condition.IsString,\n}\n\nexport enum StreetAddressCondition {\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n\n  IsString = Condition.IsString,\n  IsStreetAddress = Condition.IsStreetAddress,\n}\n", "import { Condition } from '../index';\n\nexport enum MenuCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum TagsCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DataURICondition {\n  Contains = Condition.Contains,\n  IsDataURI = Condition.IsDataURI,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum DomainNameCondition {\n  Contains = Condition.Contains,\n  IsDomainName = Condition.IsDomainName,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum EmailCondition {\n  Contains = Condition.Contains,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressRangeCondition {\n  IsEqual = Condition.IsEqual,\n  IsIPAddressRange = Condition.IsIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum PortCondition {\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MACAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MagnetURICondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MimeTypeCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMimeType = Condition.IsMimeType,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SlugCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsSlug = Condition.IsSlug,\n}\n\nexport enum URLCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsURL = Condition.IsURL,\n}\n", "import { Condition } from '../index';\n\nexport enum NumberCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInt = Condition.IsInteger,\n  IsISBN = Condition.IsISBN,\n  IsISMN = Condition.IsISMN,\n  IsISSN = Condition.IsISSN,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNumber = Condition.IsNumber,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n  IsPostalCode = Condition.IsPostalCode,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSSN = Condition.IsSSN,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsUUID = Condition.IsUUID,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n\nexport enum FloatCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum IntegerCondition {\n  IsEqual = Condition.IsEqual,\n  IsInteger = Condition.IsInteger,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n", "import { Condition } from '../index';\n\nexport enum CreditCardCondition {\n  IsCreditCard = Condition.IsCreditCard,\n  IsEqual = Condition.IsEqual,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum EmailAddressCondition {\n  isEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum LicensePlateNumber {\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\nexport enum PassportNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PasswordCondition {\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsInList = Condition.IsInList,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsStrongPassword = Condition.IsStrongPassword,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PhoneNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum SocialSecurityNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsSSN = Condition.IsSSN,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n", "import { Condition } from '../../../index';\n\nexport enum AirportCondition {\n  IsAirport = Condition.IsAirport,\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\n/**\n * Bank Identification Code\n *\n * @remarks\n * BIC means Bank Identification Code, or Bank Identifier Code.\n * It is an 8 to 11-character code that is used to identify a\n * specific bank when you make an international transaction.\n * */\nexport enum BICCondition {\n  Contains = Condition.Contains,\n  IsBIC = Condition.IsBIC,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * European Article Number\n *\n * @remarks\n * The International Article Number (also known as European\n * Article Number or EAN) is a standard describing a barcode\n * symbology and numbering system used in global trade to identify\n * a specific retail product type, in a specific packaging\n * configuration, from a specific manufacturer.\n *\n * The most commonly used EAN standard is the thirteen-digit EAN-13\n * */\nexport enum EANCondition {\n  Contains = Condition.Contains,\n  IsEAN = Condition.IsEAN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Employer Identification Number\n *\n * @remarks\n *\n * The Employer Identification Number (EIN), also known as the Federal\n * Employer Identification Number (FEIN) or the Federal Tax Identification\n * Number, is a unique nine-digit number assigned by the Internal Revenue\n * Service (IRS) to business entities operating in the United States for the\n * purposes of identification.\n */\nexport enum EINCondition {\n  Contains = Condition.Contains,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Bank Account Number\n *\n * @remarks\n *\n * An IBAN, or international bank account number, is a standard\n * international numbering system developed to identify an overseas\n * bank account. The number starts with a two-digit country code, then\n * two numbers, followed by several more alphanumeric characters.\n */\nexport enum IBANCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Book Number\n *\n * @remarks\n *\n * ISBN is the acronym for International Standard Book Number. This\n * 10 or 13-digit number identifies a specific book, an edition of a\n * book, or a book-like product (such as an audiobook). Since 1970 each\n * published book has a unique ISBN. In 2007, assigned ISBNs changed\n * from 10 digits to 13.\n */\nexport enum ISBNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISBN = Condition.IsISBN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Securities Identification Number\n *\n * @remarks\n * An ISIN is a 12-digit alphanumeric code that uniquely identifies a\n * specific security. The numbers are allocated by a country's respective\n * national numbering agency (NNA). An ISIN is not the same as the ticker\n * symbol, which identifies the stock at the exchange level.\n */\nexport enum ISINCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISIN = Condition.IsISIN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Music Number\n *\n * @remarks\n * The International Standard Music Number or ISMN (ISO 10957) is a\n * thirteen-character alphanumeric identifier for printed music developed\n * by ISO.\n */\nexport enum ISMNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISMN = Condition.IsISMN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Serial Number\n *\n * @remarks\n * An International Standard Serial Number (ISSN) is an eight-digit\n * serial number used to uniquely identify a serial publication,\n * such as a magazine. The ISSN is especially helpful in distinguishing\n * between serials with the same title.\n */\nexport enum ISSNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISSN = Condition.IsISSN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Tax Identification Number\n *\n * @remarks\n * A Tax Identification Number (TIN) is a nine-digit number used as a\n * tracking number by the Internal Revenue Service (IRS)\n */\nexport enum TaxIDNumberCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n}\n\n/**\n * Value Added Tax (VAT) Registration Number\n *\n * @remarks\n * A VAT registration number is a nine-digit number used to identify\n * a business or person in the European Union.\n */\nexport enum VATCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n", "import { Condition } from '../index';\n\n// TODO: Example the number of conditions a string can support\nexport enum StringCondition {\n  Contains = Condition.Contains,\n  HasNumberCount = Condition.HasNumberCount,\n  HasLowercaseCount = Condition.HasLowercaseCount,\n  HasLetterCount = Condition.HasLetterCount,\n  HasSpacesCount = Condition.HasSpacesCount,\n  HasSymbolCount = Condition.HasSymbolCount,\n  HasUppercaseCount = Condition.HasUppercaseCount,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsAscii = Condition.IsAscii,\n  IsBase64 = Condition.IsBase64,\n  IsColor = Condition.IsColor,\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsCreditCard = Condition.IsCreditCard,\n  IsDataURI = Condition.IsDataURI,\n  IsDomainName = Condition.IsDomainName,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsIdentityCardCode = Condition.IsIdentityCardCode,\n  IsIMEI = Condition.IsIMEI,\n  IsInList = Condition.IsInList,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsISBN = Condition.IsISBN,\n  IsISIN = Condition.IsISIN,\n  IsISMN = Condition.IsISMN,\n  IsISRC = Condition.IsISRC,\n  IsISSN = Condition.IsISSN,\n  IsLanguage = Condition.IsLanguage,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsLowercase = Condition.IsLowercase,\n  IsOctal = Condition.IsOctal,\n  IsMACAddress = Condition.IsMACAddress,\n  IsMD5 = Condition.IsMD5,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsMarkdown = Condition.IsMarkdown,\n  IsMimeType = Condition.IsMimeType,\n  IsMonth = Condition.IsMonth,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPostalCode = Condition.IsPostalCode,\n  IsProvince = Condition.IsProvince,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSlug = Condition.IsSlug,\n  IsSSN = Condition.IsSSN,\n  IsState = Condition.IsState,\n  IsStreetAddress = Condition.IsStreetAddress,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsURL = Condition.IsURL,\n  IsUUID = Condition.IsUUID,\n  IsUppercase = Condition.IsUppercase,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n  IsYear = Condition.IsYear,\n}\n\nexport enum LongTextCondition {\n  Contains = Condition.Contains,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsInList = Condition.IsInList,\n  IsMarkdown = Condition.IsMarkdown,\n  IsNotInList = Condition.IsNotInList,\n  IsNumeric = Condition.IsNumeric,\n  IsLowercase = Condition.IsLowercase,\n  IsString = Condition.IsString,\n  IsUppercase = Condition.IsUppercase,\n}\n", "import { Action } from './action';\nimport { Condition } from './condition/index';\n\nexport type Allowed = 'allowed';\nexport type Blocked = 'blocked';\n\nexport enum Privilege {\n  Allowed,\n  Blocked,\n}\n\nexport type Create = Privilege;\nexport type Delete = Privilege;\nexport type Edit = Privilege;\nexport type View = Privilege;\n\nexport type Rule<T = {}> = {\n  actions?: Action[];\n  conditions: Condition[];\n  description: string;\n  name: string;\n} & T;\n", "export enum FormValidationProblem {\n  InvalidCharacters = 'invalid-characters',\n  InvalidPattern = 'invalid-pattern',\n  NotComplexEnough = 'not-complex-enough',\n  NotUnique = 'not-unique',\n  NotValidEmail = 'not-valid-email',\n  TooLong = 'too-long',\n  TooShort = 'too-short',\n  Required = 'required',\n}\n", "import { DateTime } from 'luxon';\n\nexport enum TaskStatus {\n  'Canceled' = 'Canceled',\n  'Completed' = 'Completed',\n  'Created' = 'Created',\n  'Faulted' = 'Faulted',\n  'Queued' = 'Queued',\n  'Running' = 'Running',\n  'Waiting' = 'Waiting',\n}\n\nexport type Task = {\n  created?: DateTime;\n  data: Record<string, string> | Map<string, string>;\n  name: string;\n  id?: string;\n  status?: TaskStatus;\n};\n", "import { CommunicationMedium } from '../../../communications/medium';\n\n/**\n * @enum AuthenticationStatus\n * @property Archived - User is no longer active.\n * @property Compromised - User is disabled due to a potential security threat.\n * @property Confirmed - User has been confirmed.\n * @property ForcePasswordChange - The user is confirmed and the user can sign in\n * using a temporary password, but on first sign-in, the user must change his\n * or her password to a new value before doing anything else.\n * @property ResetRequired - User is confirmed, but the user must request a\n * code and reset his or her password before he or she can sign in.\n * @property Unconfirmed - User has been created but not confirmed.\n * @property Unknown - User status is not known.\n */\nexport enum UserVerificationStatus {\n  Archived = 'ARCHIVED',\n  Compromised = 'COMPROMISED',\n  Confirmed = 'CONFIRMED',\n  ForcePasswordChange = 'FORCE_CHANGE_PASSWORD',\n  ResetRequired = 'RESET_REQUIRED',\n  Unconfirmed = 'UNCONFIRMED',\n  Unknown = 'UNKNOWN',\n}\n\nexport enum UserAuthenticationVerificationType {\n  Code = 'code',\n  Link = 'link',\n}\n\nexport type UserVerificationDetails = {\n  status: UserVerificationStatus;\n  delivery: {\n    medium: CommunicationMedium.Email;\n    destination: string;\n  };\n};\n", "export enum UserRole {\n  Owner = 'Owner',\n  Admin = 'Admin',\n  User = 'User',\n  Visitor = 'Visitor',\n}\n", "export enum PaymentIntentStatus {\n  RequiresPaymentMethod = 'requires_payment_method',\n  RequiresConfirmation = 'requires_confirmation',\n  RequiresAction = 'requires_action',\n  Processing = 'processing',\n  RequiresCapture = 'requires_capture',\n  Canceled = 'canceled',\n  Succeeded = 'succeeded',\n}\n\nexport type PaymentMethod = {\n  id: string;\n  stripe_id: string;\n  brand: string;\n  country: string;\n  last_four_digits: string;\n  exp_month: number;\n  exp_year: number;\n  three_d_secure_usage_supported: boolean;\n};\n", "import { Person } from '../../../people/person';\nimport { PaymentMethod } from '../payment-method';\nimport { Product } from '../product/index';\n\nexport enum SubscriptionStatus {\n  Incomplete = 'incomplete',\n  IncompleteExpired = 'incomplete_expired',\n  Trialing = 'trialing',\n  Active = 'active',\n  PastDue = 'past_due',\n  Canceled = 'canceled',\n  Unpaid = 'unpaid',\n}\n\nexport enum SubscriptionPlanDuration {\n  Monthly = 'monthly',\n  Quarterly = 'quarterly',\n  Yearly = 'yearly',\n  Lifetime = 'lifetime',\n}\n\nexport type Subscription = {\n  active: boolean;\n  end_date: Date;\n  canceled: boolean;\n  renewal_date: Date;\n  id: string;\n  product_id: Product['id'];\n  plan_duration: SubscriptionPlanDuration;\n  trial_membership_active: boolean;\n  trial_membership_end_date: Date;\n  status: SubscriptionStatus;\n  payment_method_id: PaymentMethod['id'];\n  person_id: Person['id'];\n};\n", "import { ISO8601String } from \"../i18n/date\";\nimport { Person } from '../people/person'\n\nexport enum ChatMessageStatus {\n  Delivered = \"delivered\",\n  Read = \"read\",\n  Sending = \"sending\",\n  Sent = \"sent\",\n}\n\n\n\nexport enum ChatMessageType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Text = \"text\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageAttachmentType {\n  Audio = \"audio\",\n  File = \"file\",\n  Image = \"image\",\n  Video = \"video\",\n}\n\nexport enum ChatMessageReactionType {\n  Angry = \"angry\",\n  Laugh = \"laugh\",\n  Like = \"like\",\n  Love = \"love\",\n  Sad = \"sad\",\n  Wow = \"wow\",\n  Wink = \"wink\",\n  Yay = \"yay\",\n}\n\n\nexport type ChatMessage = {\n  // The message attachments.\n  attachments?: {\n    // The attachment type.\n    type: ChatMessageAttachmentType;\n\n    // The attachment URL.\n    url: string;\n  }[];\n\n  // The message text.\n  body: string;\n\n  // The time the message was sent.\n  date: ISO8601String;\n\n  // Unique identifier for the message.\n  id?: string;\n\n  // The message reactions.\n  reactions?: {\n    // The reaction type.\n    type: ChatMessageReactionType;\n  }[];\n\n  recipients?: Person[];\n\n\n  // The message status.\n  status?: ChatMessageStatus;\n\n  // Subject of the message.\n  subject?: string;\n \n  // The user who sent the message.\n  sender?: {\n    avatar?: string;\n    id: string;\n    name: string;\n  };\n\n\n  \n  // The type of message.\n  type?: ChatMessageType;\n};\n\n\n", "export enum CommunicationMedium {\n  Email = 'email',\n  PhoneNumber = 'phone_number',\n}\n", "/*\n  This is a decent start, but I should make the log level TSDoc's more clear\n  of the intention and expected result from using each level.\n*/\nexport enum LogLevel {\n  /**\n   * Analytics (Business/Web) related events.\n   */\n  Analytics = 'analytics',\n  /**\n   * Exception that needs urgent review by engineers.\n   */\n  Critical = 'critical',\n  /**\n   * Logging used by developers to temporarily debug an issue.\n   */\n  Debug = 'debug',\n  /**\n   * A runtime exception that does not require immediate attention.\n   */\n  Exception = 'exception',\n  /**\n   * An HTTP request/response event. Default is 'info' level.\n   */\n  Http = 'http',\n  /**\n   * Used for logging general information regarding application processes.\n   */\n  Info = 'info',\n  /**\n   * Used to warn about possible issues.\n   */\n  Warning = 'warning',\n}\n", "// import { ExceptionObject } from '@srclaunch/exceptions';\n\nexport type HttpRequestHost = string;\nexport type HttpRequestResource = string;\nexport type HttpRequestBody = Record<string, unknown> | string | unknown | null;\n\nexport enum HttpRequestMethod {\n  Delete = 'delete',\n  Get = 'get',\n  Head = 'head',\n  Patch = 'patch',\n  Post = 'post',\n  Put = 'put',\n}\n\nexport type HttpRequestHeaders = Record<string, string>;\n\nexport type HttpResponseBody<T> = T & (Record<string, unknown> | unknown);\n\nexport type HttpResponseHeaders = Record<string, string>;\n\nexport enum HttpResponseCode {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  MULTI_STATUS = 207,\n  ALREADY_REPORTED = 208,\n  IM_USED = 226,\n  MULTIPLE_CHOICES = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  USE_PROXY = 305,\n  SWITCH_PROXY = 306,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED_REQUEST = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  LOCKED = 423,\n  FAILED_DEPENDENCY = 424,\n  TOO_EARLY = 425,\n  UPGRADE_REQUIRED = 426,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n  VARIANT_ALSO_NEGOTIATES = 506,\n  INSUFFICIENT_STORAGE = 507,\n  LOOP_DETECTED = 508,\n  BANDWIDTH_LIMIT_EXCEEDED = 509,\n  NOT_EXTENDED = 510,\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n\nexport type HttpRequest = {\n  readonly body?: HttpRequestBody;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly response?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpRequestHeaders;\n  readonly host?: HttpRequestHost;\n  readonly method: HttpRequestMethod;\n  readonly resource: HttpRequestResource;\n};\n\nexport type HttpResponse<T = Record<string, unknown>> = {\n  readonly body?: HttpResponseBody<T>;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly request?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpResponseHeaders;\n  readonly status?: {\n    readonly code: HttpResponseCode;\n  };\n};\n", "export enum Platform {\n  DesktopApplication = 'desktop-application',\n  MobileApplication = 'mobile-application',\n  Node = 'node',\n  WebApplication = 'web-application',\n}\n", "import { TimezoneRegions } from '../time/region';\nimport { TimezoneOffset } from '../time/timezone';\nimport { Timezones } from '../time/timezones';\nimport { CurrencyCode } from './../currency/index';\nimport { LocaleCode } from '.';\n\nexport enum CountryCode {\n  Afghanistan = 'AF',\n  Albania = 'AL',\n  Algeria = 'DZ',\n  AmericanSamoa = 'AS',\n  Andorra = 'AD',\n  Angola = 'AO',\n  Anguilla = 'AI',\n  Antarctica = 'AQ',\n  AntiguaAndBarbuda = 'AG',\n  Argentina = 'AR',\n  Armenia = 'AM',\n  Aruba = 'AW',\n  Australia = 'AU',\n  Austria = 'AT',\n  Azerbaijan = 'AZ',\n  Bahamas = 'BS',\n  Bahrain = 'BH',\n  Bangladesh = 'BD',\n  Barbados = 'BB',\n  Belarus = 'BY',\n  Belgium = 'BE',\n  Belize = 'BZ',\n  Benin = 'BJ',\n  Bermuda = 'BM',\n  Bhutan = 'BT',\n  Bolivia = 'BO',\n  BosniaAndHerzegovina = 'BA',\n  Botswana = 'BW',\n  BouvetIsland = 'BV',\n  Brazil = 'BR',\n  BritishIndianOceanTerritory = 'IO',\n  Brunei = 'BN',\n  Bulgaria = 'BG',\n  BurkinaFaso = 'BF',\n  Burundi = 'BI',\n  Cambodia = 'KH',\n  Cameroon = 'CM',\n  Canada = 'CA',\n  CapeVerde = 'CV',\n  CaymanIslands = 'KY',\n  CentralAfricanRepublic = 'CF',\n  Chad = 'TD',\n  Chile = 'CL',\n  China = 'CN',\n  ChristmasIsland = 'CX',\n  CocosKeelingIslands = 'CC',\n  Colombia = 'CO',\n  Comoros = 'KM',\n  Congo = 'CG',\n  CongoTheDemocraticRepublicOfThe = 'CD',\n  CookIslands = 'CK',\n  CostaRica = 'CR',\n  CoteDIvoire = 'CI',\n  Croatia = 'HR',\n  Cuba = 'CU',\n  Cyprus = 'CY',\n  CzechRepublic = 'CZ',\n  Denmark = 'DK',\n  Djibouti = 'DJ',\n  Dominica = 'DM',\n  DominicanRepublic = 'DO',\n  Ecuador = 'EC',\n  Egypt = 'EG',\n  ElSalvador = 'SV',\n  EquatorialGuinea = 'GQ',\n  Eritrea = 'ER',\n  Estonia = 'EE',\n  Ethiopia = 'ET',\n  FalklandIslands = 'FK',\n  FaroeIslands = 'FO',\n  Fiji = 'FJ',\n  Finland = 'FI',\n  France = 'FR',\n  FrenchGuiana = 'GF',\n  FrenchPolynesia = 'PF',\n  FrenchSouthernTerritories = 'TF',\n  Gabon = 'GA',\n  Gambia = 'GM',\n  Georgia = 'GE',\n  Germany = 'DE',\n  Ghana = 'GH',\n  Gibraltar = 'GI',\n  Greece = 'GR',\n  Greenland = 'GL',\n  Grenada = 'GD',\n  Guadeloupe = 'GP',\n  Guam = 'GU',\n  Guatemala = 'GT',\n  Guernsey = 'GG',\n  Guinea = 'GN',\n  GuineaBissau = 'GW',\n  Guyana = 'GY',\n  Haiti = 'HT',\n  HeardIslandMcdonaldIslands = 'HM',\n  HolySeeVaticanCityState = 'VA',\n  Honduras = 'HN',\n  HongKong = 'HK',\n  Hungary = 'HU',\n  Iceland = 'IS',\n  India = 'IN',\n  Indonesia = 'ID',\n  Iran = 'IR',\n  Iraq = 'IQ',\n  Ireland = 'IE',\n  IsleOfMan = 'IM',\n  Israel = 'IL',\n  Italy = 'IT',\n  Jamaica = 'JM',\n  Japan = 'JP',\n  Jersey = 'JE',\n  Jordan = 'JO',\n  Kazakhstan = 'KZ',\n  Kenya = 'KE',\n  Kiribati = 'KI',\n  Kuwait = 'KW',\n  Kyrgyzstan = 'KG',\n  Laos = 'LA',\n  Latvia = 'LV',\n  Lebanon = 'LB',\n  Lesotho = 'LS',\n  Liberia = 'LR',\n  Libya = 'LY',\n  Liechtenstein = 'LI',\n  Lithuania = 'LT',\n  Luxembourg = 'LU',\n  Macau = 'MO',\n  Madagascar = 'MG',\n  Malawi = 'MW',\n  Malaysia = 'MY',\n  Maldives = 'MV',\n  Mali = 'ML',\n  Malta = 'MT',\n  MarshallIslands = 'MH',\n  Martinique = 'MQ',\n  Mauritania = 'MR',\n  Mauritius = 'MU',\n  Mayotte = 'YT',\n  Mexico = 'MX',\n  MicronesiaFederatedStatesOf = 'FM',\n  Moldova = 'MD',\n  Monaco = 'MC',\n  Mongolia = 'MN',\n  Montenegro = 'ME',\n  Montserrat = 'MS',\n  Morocco = 'MA',\n  Mozambique = 'MZ',\n  Myanmar = 'MM',\n  Namibia = 'NA',\n  Nauru = 'NR',\n  Nepal = 'NP',\n  Netherlands = 'NL',\n  NetherlandsAntilles = 'AN',\n  NewCaledonia = 'NC',\n  NewZealand = 'NZ',\n  NorthKorea = 'KP',\n  Nicaragua = 'NI',\n  Niger = 'NE',\n  Nigeria = 'NG',\n  Niue = 'NU',\n  NorfolkIsland = 'NF',\n  NorthMacedonia = 'MK',\n  NorthernMarianaIslands = 'MP',\n  Norway = 'NO',\n  Oman = 'OM',\n  Pakistan = 'PK',\n  Palau = 'PW',\n  PalestinianTerritoryOccupied = 'PS',\n  Panama = 'PA',\n  PapuaNewGuinea = 'PG',\n  Paraguay = 'PY',\n  Peru = 'PE',\n  Philippines = 'PH',\n  Pitcairn = 'PN',\n  Poland = 'PL',\n  Portugal = 'PT',\n  PuertoRico = 'PR',\n  Qatar = 'QA',\n  Reunion = 'RE',\n  Romania = 'RO',\n  RussianFederation = 'RU',\n  Rwanda = 'RW',\n  SaintBarthelemy = 'BL',\n  SaintHelena = 'SH',\n  SaintKittsAndNevis = 'KN',\n  SaintLucia = 'LC',\n  SaintMartin = 'MF',\n  SaintPierreAndMiquelon = 'PM',\n  SaintVincentAndTheGrenadines = 'VC',\n  Samoa = 'WS',\n  SanMarino = 'SM',\n  SaoTomeAndPrincipe = 'ST',\n  SaudiArabia = 'SA',\n  Senegal = 'SN',\n  Serbia = 'RS',\n  SerbiaAndMontenegro = 'CS',\n  Seychelles = 'SC',\n  SierraLeone = 'SL',\n  Singapore = 'SG',\n  Slovakia = 'SK',\n  Slovenia = 'SI',\n  SolomonIslands = 'SB',\n  Somalia = 'SO',\n  SouthAfrica = 'ZA',\n  SouthGeorgiaAndTheSouthSandwichIslands = 'GS',\n  SouthKorea = 'KR',\n  Spain = 'ES',\n  SriLanka = 'LK',\n  Sudan = 'SD',\n  Suriname = 'SR',\n  SvalbardAndJanMayen = 'SJ',\n  Swaziland = 'SZ',\n  Sweden = 'SE',\n  Switzerland = 'CH',\n  Syria = 'SY',\n  Taiwan = 'TW',\n  Tajikistan = 'TJ',\n  Tanzania = 'TZ',\n  Thailand = 'TH',\n  TimorLeste = 'TL',\n  Togo = 'TG',\n  Tokelau = 'TK',\n  Tonga = 'TO',\n  TrinidadAndTobago = 'TT',\n  Tunisia = 'TN',\n  Turkey = 'TR',\n  Turkmenistan = 'TM',\n  TurksAndCaicosIslands = 'TC',\n  Tuvalu = 'TV',\n  Uganda = 'UG',\n  Ukraine = 'UA',\n  UnitedArabEmirates = 'AE',\n  UnitedKingdom = 'GB',\n  UnitedStates = 'US',\n  UnitedStatesMinorOutlyingIslands = 'UM',\n  Uruguay = 'UY',\n  Uzbekistan = 'UZ',\n  Vanuatu = 'VU',\n  Venezuela = 'VE',\n  Vietnam = 'VN',\n  VirginIslandsBritish = 'VG',\n  VirginIslandsUS = 'VI',\n  WallisAndFutuna = 'WF',\n  WesternSahara = 'EH',\n  Yemen = 'YE',\n  Zambia = 'ZM',\n  Zimbabwe = 'ZW',\n}\n\nexport type CountrySubdivision = {\n  // code: CountrySubdivisionCode;\n  name: string;\n  capital: string;\n  population: number;\n};\n\nexport type Country = {\n  i18n: {\n    calling_codes: number[];\n    currencies: CurrencyCode[];\n    languages: LocaleCode[];\n    tz: {\n      offsets: TimezoneOffset[];\n      regions: TimezoneRegions[];\n      timezones: Timezones[];\n    };\n  };\n  id: CountryCode;\n  info: {\n    flag: {\n      emoji: string;\n      emoji_unicode: string;\n      svg: string;\n    };\n    tld: string[];\n  };\n  iso: {\n    alpha2: CountryCode;\n    alpha3: string;\n    numeric: string;\n  };\n  name: {\n    alt_spellings: string[];\n    demonym: string;\n    native: {\n      endonym: string;\n    };\n    official: string;\n    short: string;\n    translations: {\n      [lang: string]: string;\n    };\n  };\n  statistics?: {\n    demographics: {\n      age: {\n        distribution: { age: string; percentage: number }[];\n        median_age: number;\n      };\n      population: {\n        largest_city: string;\n        total: number;\n      };\n    };\n    geography: {\n      area: number;\n      region: string;\n      sub_region: string;\n    };\n    government: {\n      capital: string;\n      type: string;\n    };\n  };\n};\n", "import { CountryCode } from '../locale/country.js';\n\n/**\n * ISO-4217 Currency Codes\n */\nexport enum CurrencyCode {\n  AfghanistanAfghani = 'AFN',\n  AlbaniaLek = 'ALL',\n  ArmeniaDram = 'AMD',\n  AlgeriaDinar = 'DZD',\n  AmericanSamoaTala = 'WST',\n  AngolaKwanza = 'AOA',\n  ArgentinaPeso = 'ARS',\n  AustraliaDollar = 'AUD',\n  ArubaFlorin = 'AWG',\n  AzerbaijanNewManat = 'AZN',\n  BosniaAndHerzegovinaConvertibleMark = 'BAM',\n  BahrainDinar = 'BHD',\n  BarbadosDollar = 'BBD',\n  BangladeshTaka = 'BDT',\n  BelgiumFranc = 'BGN',\n  BermudaDollar = 'BMD',\n  BruneiDollar = 'BND',\n  BoliviaBoliviano = 'BOB',\n  BrazilReal = 'BRL',\n  BahamasDollar = 'BSD',\n  BhutanNgultrum = 'BTN',\n  BotswanaPula = 'BWP',\n  BelarusRuble = 'BYN',\n  BelizeDollar = 'BZD',\n  BulgariaLev = 'BGN',\n  BurundiFranc = 'BIF',\n  BritishPound = 'GBP',\n  CanadaDollar = 'CAD',\n  CambodiaRiel = 'KHR',\n  ComorosFranc = 'KMF',\n  CaymanIslandsDollar = 'KYD',\n  ChilePeso = 'CLP',\n  ChinaYuan = 'CNY',\n  ColombiaPeso = 'COP',\n  CostaRicaColon = 'CRC',\n  CroatiaKuna = 'HRK',\n  CubaConvertiblePeso = 'CUC',\n  CubaPeso = 'CUP',\n  CapeVerdeEscudo = 'CVE',\n  CyprusPound = 'CYP',\n  CzechRepublicKoruna = 'CZK',\n  DjiboutiFranc = 'DJF',\n  DenmarkKrone = 'DKK',\n  DominicaDollar = 'XCD',\n  DominicanRepublicPeso = 'DOP',\n  EastCaribbeanDollar = 'XCD',\n  EgyptPound = 'EGP',\n  ElSalvadorColon = 'SVC',\n  EquatorialGuineaEkwele = 'GQE',\n  EritreaNakfa = 'ERN',\n  EstoniaKroon = 'EEK',\n  EthiopiaBirr = 'ETB',\n  Euro = 'EUR',\n  FijiDollar = 'FJD',\n  FalklandIslandsPound = 'FKP',\n  GambiaDalasi = 'GMD',\n  GabonFranc = 'GMD',\n  GeorgiaLari = 'GEL',\n  GhanaCedi = 'GHS',\n  GibraltarPound = 'GIP',\n  GuatemalaQuetzal = 'GTQ',\n  GuernseyPound = 'GGP',\n  GuineaBissauPeso = 'GWP',\n  GuyanaDollar = 'GYD',\n  HongKongDollar = 'HKD',\n  HondurasLempira = 'HNL',\n  HaitiGourde = 'HTG',\n  HungaryForint = 'HUF',\n  IndonesiaRupiah = 'IDR',\n  IsleOfManPound = 'IMP',\n  IsraelNewShekel = 'ILS',\n  IndiaRupee = 'INR',\n  IraqDinar = 'IQD',\n  IranRial = 'IRR',\n  IcelandKrona = 'ISK',\n  JamaicaDollar = 'JMD',\n  JapanYen = 'JPY',\n  JerseyPound = 'JEP',\n  JordanDinar = 'JOD',\n  KazakhstanTenge = 'KZT',\n  KenyaShilling = 'KES',\n  KyrgyzstanSom = 'KGS',\n  NorthKoreaWon = 'KPW',\n  SouthKoreaWon = 'KRW',\n  KuwaitDinar = 'KWD',\n  LaosKip = 'LAK',\n  LebanonPound = 'LBP',\n  LiberiaDollar = 'LRD',\n  LesothoLoti = 'LSL',\n  LibyanDinar = 'LYD',\n  LithuaniaLitas = 'LTL',\n  LatviaLats = 'LVL',\n  LibyaDinar = 'LYD',\n  MacauPataca = 'MOP',\n  MaldivesRufiyaa = 'MVR',\n  MalawiKwacha = 'MWK',\n  MaltaLira = 'MTL',\n  MauritiusRupee = 'MUR',\n  MongoliaTughrik = 'MNT',\n  MoroccoDirham = 'MAD',\n  MoldovaLeu = 'MDL',\n  MozambiqueMetical = 'MZN',\n  MadagascarAriary = 'MGA',\n  MacedoniaDenar = 'MKD',\n  MexicoPeso = 'MXN',\n  MalaysiaRinggit = 'MYR',\n  MyanmarKyat = 'MMK',\n  MicronesiaFederatedStatesDollar = 'USD',\n  NicaraguaCordoba = 'NIO',\n  NamibiaDollar = 'NAD',\n  NetherlandsAntillesGuilder = 'ANG',\n  NewCaledoniaFranc = 'XPF',\n  NigeriaNaira = 'NGN',\n  NicaraguaCordobaOro = 'NIO',\n  NigerCFAFranc = 'XOF',\n  NorwayKrone = 'NOK',\n  NepalRupee = 'NPR',\n  NewZealandDollar = 'NZD',\n  OmanRial = 'OMR',\n  PanamaBalboa = 'PAB',\n  PeruNuevoSol = 'PEN',\n  PapuaNewGuineaKina = 'PGK',\n  PhilippinesPeso = 'PHP',\n  PakistanRupee = 'PKR',\n  PeruNuevo = 'PEN',\n  PolandZloty = 'PLN',\n  ParaguayGuarani = 'PYG',\n  QatarRial = 'QAR',\n  RomaniaNewLeu = 'RON',\n  SerbiaDinar = 'RSD',\n  SriLankaRupee = 'LKR',\n  RussiaRuble = 'RUB',\n  RwandaFranc = 'RWF',\n  SaudiArabiaRiyal = 'SAR',\n  SlovakiaKoruna = 'SKK',\n  SloveniaTolar = 'SIT',\n  SolomonIslandsDollar = 'SBD',\n  SeychellesRupee = 'SCR',\n  SudanPound = 'SDG',\n  SwedenKrona = 'SEK',\n  SingaporeDollar = 'SGD',\n  SaintHelenaPound = 'SHP',\n  SierraLeoneLeone = 'SLL',\n  SomaliaShilling = 'SOS',\n  SurinameDollar = 'SRD',\n  SintMaartenPound = 'SXD',\n  SyriaPound = 'SYP',\n  SwazilandLilangeni = 'SZL',\n  SwitzerlandFranc = 'CHF',\n  ThailandBaht = 'THB',\n  TajikistanSomoni = 'TJS',\n  TurkmenistanManat = 'TMT',\n  TunisiaDinar = 'TND',\n  TongaPaanga = 'TOP',\n  TurkeyLira = 'TRY',\n  TrinidadAndTobagoDollar = 'TTD',\n  TaiwanNewDollar = 'TWD',\n  TanzaniaShilling = 'TZS',\n  UnitedArabEmiratesDirham = 'AED',\n  UkraineHryvnia = 'UAH',\n  UgandaShilling = 'UGX',\n  UnitedKingdomPound = 'GBP',\n  UnitedStatesDollar = 'USD',\n  UruguayPeso = 'UYU',\n  UzbekistanSom = 'UZS',\n  VenezuelaBolivar = 'VEF',\n  VietnamDong = 'VND',\n  VanuatuVatu = 'VUV',\n  SamoaTala = 'WST',\n  YemenRial = 'YER',\n  SouthAfricaRand = 'ZAR',\n  ZambiaKwacha = 'ZMW',\n  ZimbabweDollar = 'ZWL',\n}\n\nexport type Currency = {\n  code: CurrencyCode;\n  countries: CountryCode[];\n  symbol: string;\n  decimal_digits: number;\n  rounding: number;\n  name: string;\n  symbol_native: string;\n  decimal_separator: string;\n  thousands_separator: string;\n  positive_sign: string;\n  negative_sign: string;\n  symbol_placement: string;\n};\n\nexport const Currencies: Record<string, Currency> = {\n  AfghanistanAfghani: {\n    code: CurrencyCode.AfghanistanAfghani,\n    countries: [CountryCode.Afghanistan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Afghan Afghani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u060B',\n    symbol_native: '\u060B',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AlbaniaLek: {\n    code: CurrencyCode.AlbaniaLek,\n    countries: [CountryCode.Albania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Albanian Lek',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lek',\n    symbol_native: 'Lek',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  AlgeriaDinar: {\n    code: CurrencyCode.AlgeriaDinar,\n    countries: [CountryCode.Algeria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Algerian Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062C',\n    symbol_native: '\u062F.\u062C',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArgentinaPeso: {\n    code: CurrencyCode.ArgentinaPeso,\n    countries: [CountryCode.Argentina],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Argentine Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArmeniaDram: {\n    code: CurrencyCode.ArmeniaDram,\n    countries: [CountryCode.Armenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Armenian Dram',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0564\u0580.',\n    symbol_native: '\u0564\u0580.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ArubaFlorin: {\n    code: CurrencyCode.ArubaFlorin,\n    countries: [CountryCode.Aruba],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Aruban Florin',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AustraliaDollar: {\n    code: CurrencyCode.AustraliaDollar,\n    countries: [CountryCode.Australia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Australian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AzerbaijanManat: {\n    code: CurrencyCode.AzerbaijanNewManat,\n    countries: [CountryCode.Azerbaijan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Azerbaijani Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043C\u0430\u043D',\n    symbol_native: '\u043C\u0430\u043D',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BahrainDinar: {\n    code: CurrencyCode.BahrainDinar,\n    countries: [CountryCode.Bahrain],\n    decimal_digits: 3,\n    decimal_separator: '.',\n    name: 'Bahraini Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '.\u062F.\u0628',\n    symbol_native: '.\u062F.\u0628',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BangladeshTaka: {\n    code: CurrencyCode.BangladeshTaka,\n    countries: [CountryCode.Bangladesh],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bangladeshi Taka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u09F3',\n    symbol_native: '\u09F3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BarbadosDollar: {\n    code: CurrencyCode.BarbadosDollar,\n    countries: [CountryCode.Barbados],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Barbadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BelarusRuble: {\n    code: CurrencyCode.BelarusRuble,\n    countries: [CountryCode.Belarus],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belarusian Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BelizeDollar: {\n    code: CurrencyCode.BelizeDollar,\n    countries: [CountryCode.Belize],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belize Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'BZ$',\n    symbol_native: 'BZ$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BermudaDollar: {\n    code: CurrencyCode.BermudaDollar,\n    countries: [CountryCode.Bermuda],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bermudian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BoliviaBoliviano: {\n    code: CurrencyCode.BoliviaBoliviano,\n    countries: [CountryCode.Bolivia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bolivian Boliviano',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$b',\n    symbol_native: '$b',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BosniaAndHerzegovinaConvertibleMarka: {\n    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,\n    countries: [CountryCode.BosniaAndHerzegovina],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Bosnia and Herzegovina Convertible Marka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KM',\n    symbol_native: 'KM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BotswanaPula: {\n    code: CurrencyCode.BotswanaPula,\n    countries: [CountryCode.Botswana],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Botswana Pula',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'P',\n    symbol_native: 'P',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BrazilReal: {\n    code: CurrencyCode.BrazilReal,\n    countries: [CountryCode.Brazil],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Brazilian Real',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R$',\n    symbol_native: 'R$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BruneiDollar: {\n    code: CurrencyCode.BruneiDollar,\n    countries: [CountryCode.Brunei],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Brunei Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BulgariaLev: {\n    code: CurrencyCode.BulgariaLev,\n    countries: [CountryCode.Bulgaria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bulgarian Lev',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043B\u0432',\n    symbol_native: '\u043B\u0432',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BurundiFranc: {\n    code: CurrencyCode.BurundiFranc,\n    countries: [CountryCode.Burundi],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Burundian Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'FBu',\n    symbol_native: 'FBu',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CambodiaRiel: {\n    code: CurrencyCode.CambodiaRiel,\n    countries: [CountryCode.Cambodia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cambodian Riel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u17DB',\n    symbol_native: '\u17DB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CanadaDollar: {\n    code: CurrencyCode.CanadaDollar,\n    countries: [CountryCode.Canada],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Canadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CapeVerdeEscudo: {\n    code: CurrencyCode.CapeVerdeEscudo,\n    countries: [CountryCode.CapeVerde],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cape Verde Escudo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Esc',\n    symbol_native: 'Esc',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CaymanIslandsDollar: {\n    code: CurrencyCode.CaymanIslandsDollar,\n    countries: [CountryCode.CaymanIslands],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cayman Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChilePeso: {\n    code: CurrencyCode.ChilePeso,\n    countries: [CountryCode.Chile],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Chilean Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChinaYuanRenminbi: {\n    code: CurrencyCode.ChinaYuan,\n    countries: [CountryCode.China],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Chinese Yuan',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\u00A5',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ColombiaPeso: {\n    code: CurrencyCode.ColombiaPeso,\n    countries: [CountryCode.Colombia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Colombian Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ComorosFranc: {\n    code: CurrencyCode.ComorosFranc,\n    countries: [CountryCode.Comoros],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Comoros Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CF',\n    symbol_native: 'CF',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CostaRicaColon: {\n    code: CurrencyCode.CostaRicaColon,\n    countries: [CountryCode.CostaRica],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Costa Rican Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CroatiaKuna: {\n    code: CurrencyCode.CroatiaKuna,\n    countries: [CountryCode.Croatia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Croatian Kuna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kn',\n    symbol_native: 'kn',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaConvertiblePeso: {\n    code: CurrencyCode.CubaConvertiblePeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Convertible Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaPeso: {\n    code: CurrencyCode.CubaPeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CyprusPound: {\n    code: CurrencyCode.CyprusPound,\n    countries: [CountryCode.Cyprus],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cyprus Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CzechRepublicKoruna: {\n    code: CurrencyCode.CzechRepublicKoruna,\n    countries: [CountryCode.CzechRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Czech Republic Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K\u010D',\n    symbol_native: 'K\u010D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DenmarkKrone: {\n    code: CurrencyCode.DenmarkKrone,\n    countries: [CountryCode.Denmark],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Denmark Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DjiboutiFranc: {\n    code: CurrencyCode.DjiboutiFranc,\n    countries: [CountryCode.Djibouti],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Djibouti Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Fdj',\n    symbol_native: 'Fdj',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  DominicanRepublicPeso: {\n    code: CurrencyCode.DominicanRepublicPeso,\n    countries: [CountryCode.DominicanRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Dominican Republic Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RD$',\n    symbol_native: 'RD$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EastCaribbeanDollar: {\n    code: CurrencyCode.EastCaribbeanDollar,\n    countries: [\n      CountryCode.AntiguaAndBarbuda,\n      CountryCode.Dominica,\n      CountryCode.Grenada,\n      CountryCode.SaintKittsAndNevis,\n      CountryCode.SaintLucia,\n      CountryCode.SaintVincentAndTheGrenadines,\n    ],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'East Caribbean Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EgyptPound: {\n    code: CurrencyCode.EgyptPound,\n    countries: [CountryCode.Egypt],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Egypt Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ElSalvadorColon: {\n    code: CurrencyCode.ElSalvadorColon,\n    countries: [CountryCode.ElSalvador],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'El Salvador Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EquatorialGuineaEkwele: {\n    code: CurrencyCode.EquatorialGuineaEkwele,\n    countries: [CountryCode.EquatorialGuinea],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'GQE',\n    symbol_native: 'GQE',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EritreaNakfa: {\n    code: CurrencyCode.EritreaNakfa,\n    countries: [CountryCode.Eritrea],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Eritrea Nakfa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Nfk',\n    symbol_native: 'Nfk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EstoniaKroon: {\n    code: CurrencyCode.EstoniaKroon,\n    countries: [CountryCode.Estonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Estonia Kroon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EthiopiaBirr: {\n    code: CurrencyCode.EthiopiaBirr,\n    countries: [CountryCode.Ethiopia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ethiopia Birr',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  Euro: {\n    code: CurrencyCode.Euro,\n    countries: [\n      CountryCode.Andorra,\n      CountryCode.Austria,\n      CountryCode.Belgium,\n      CountryCode.Cyprus,\n      CountryCode.Estonia,\n      CountryCode.Finland,\n      CountryCode.France,\n      CountryCode.Germany,\n      CountryCode.Greece,\n      CountryCode.Ireland,\n      CountryCode.Italy,\n      CountryCode.Latvia,\n      CountryCode.Lithuania,\n      CountryCode.Luxembourg,\n      CountryCode.Malta,\n      CountryCode.Monaco,\n      CountryCode.Netherlands,\n      CountryCode.Portugal,\n      CountryCode.Spain,\n      CountryCode.Sweden,\n      CountryCode.UnitedKingdom,\n    ],\n\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Euro',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AC',\n    symbol_native: '\u20AC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FalklandIslandsPound: {\n    code: CurrencyCode.FalklandIslandsPound,\n    countries: [CountryCode.FalklandIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FijiDollar: {\n    code: CurrencyCode.FijiDollar,\n    countries: [CountryCode.Fiji],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Fiji Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GambiaDalasi: {\n    code: CurrencyCode.GambiaDalasi,\n    countries: [CountryCode.Gambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gambia Dalasi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'D',\n    symbol_native: 'D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GeorgiaLari: {\n    code: CurrencyCode.GeorgiaLari,\n    countries: [CountryCode.Georgia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Georgia Lari',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BE',\n    symbol_native: '\u20BE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GhanaCedi: {\n    code: CurrencyCode.GhanaCedi,\n    countries: [CountryCode.Ghana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ghana Cedi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GibraltarPound: {\n    code: CurrencyCode.GibraltarPound,\n    countries: [CountryCode.Gibraltar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gibraltar Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuatemalaQuetzal: {\n    code: CurrencyCode.GuatemalaQuetzal,\n    countries: [CountryCode.Guatemala],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guatemala Quetzal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Q',\n    symbol_native: 'Q',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuernseyPound: {\n    code: CurrencyCode.GuernseyPound,\n    countries: [CountryCode.Guernsey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guernsey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuineaBissauPeso: {\n    code: CurrencyCode.GuineaBissauPeso,\n    countries: [CountryCode.GuineaBissau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guinea-Bissau Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuyanaDollar: {\n    code: CurrencyCode.GuyanaDollar,\n    countries: [CountryCode.Guyana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guyana Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HaitiGourde: {\n    code: CurrencyCode.HaitiGourde,\n    countries: [CountryCode.Haiti],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Haiti Gourde',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'G',\n    symbol_native: 'G',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HondurasLempira: {\n    code: CurrencyCode.HondurasLempira,\n    countries: [CountryCode.Honduras],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Honduras Lempira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HongKongDollar: {\n    code: CurrencyCode.HongKongDollar,\n    countries: [CountryCode.HongKong],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hong Kong Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HungaryForint: {\n    code: CurrencyCode.HungaryForint,\n    countries: [CountryCode.Hungary],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hungary Forint',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ft',\n    symbol_native: 'Ft',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IcelandKrona: {\n    code: CurrencyCode.IcelandKrona,\n    countries: [CountryCode.Iceland],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iceland Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndianRupee: {\n    code: CurrencyCode.IndiaRupee,\n    countries: [CountryCode.India, CountryCode.Bhutan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Indian Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B9',\n    symbol_native: '\u20B9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndonesiaRupiah: {\n    code: CurrencyCode.IndonesiaRupiah,\n    countries: [CountryCode.Indonesia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Indonesia Rupiah',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rp',\n    symbol_native: 'Rp',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IranRial: {\n    code: CurrencyCode.IranRial,\n    countries: [CountryCode.Iran],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iran Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsleOfManPound: {\n    code: CurrencyCode.IsleOfManPound,\n    countries: [CountryCode.IsleOfMan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Isle of Man Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsraeliShekel: {\n    code: CurrencyCode.IsraelNewShekel,\n    countries: [CountryCode.Israel],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Israeli Shekel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AA',\n    symbol_native: '\u20AA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JamaicaDollar: {\n    code: CurrencyCode.JamaicaDollar,\n    countries: [CountryCode.Jamaica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jamaica Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'J$',\n    symbol_native: 'J$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JapanYen: {\n    code: CurrencyCode.JapanYen,\n    countries: [CountryCode.Japan],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Japan Yen',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\uFFE5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JerseyPound: {\n    code: CurrencyCode.JerseyPound,\n    countries: [CountryCode.Jersey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jersey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JordanDinar: {\n    code: CurrencyCode.JordanDinar,\n    countries: [CountryCode.Jordan],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Jordan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'JD',\n    symbol_native: 'JD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KazakhstanTenge: {\n    code: CurrencyCode.KazakhstanTenge,\n    countries: [CountryCode.Kazakhstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kazakhstan Tenge',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B8',\n    symbol_native: '\u20B8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KenyaShilling: {\n    code: CurrencyCode.KenyaShilling,\n    countries: [CountryCode.Kenya],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kenya Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KSh',\n    symbol_native: 'KSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KuwaitDinar: {\n    code: CurrencyCode.KuwaitDinar,\n    countries: [CountryCode.Kuwait],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Kuwait Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KD',\n    symbol_native: 'KD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KyrgyzstanSom: {\n    code: CurrencyCode.KyrgyzstanSom,\n    countries: [CountryCode.Kyrgyzstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kyrgyzstan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KGS',\n    symbol_native: 'KGS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LaosKip: {\n    code: CurrencyCode.LaosKip,\n    countries: [CountryCode.Laos],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Laos Kip',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AD',\n    symbol_native: '\u20AD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LatviaLats: {\n    code: CurrencyCode.LatviaLats,\n    countries: [CountryCode.Latvia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Latvia Lat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ls',\n    symbol_native: 'Ls',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LebanonPound: {\n    code: CurrencyCode.LebanonPound,\n    countries: [CountryCode.Lebanon],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Lebanon Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LesothoLoti: {\n    code: CurrencyCode.LesothoLoti,\n    countries: [CountryCode.Lesotho],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lesotho Loti',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'M',\n    symbol_native: 'M',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LiberiaDollar: {\n    code: CurrencyCode.LiberiaDollar,\n    countries: [CountryCode.Liberia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Liberia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LibyanDinar: {\n    code: CurrencyCode.LibyanDinar,\n    countries: [CountryCode.Libya],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Libyan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'LD',\n    symbol_native: 'LD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LithuaniaLitas: {\n    code: CurrencyCode.LithuaniaLitas,\n    countries: [CountryCode.Lithuania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lithuania Litas',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lt',\n    symbol_native: 'Lt',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacauPataca: {\n    code: CurrencyCode.MacauPataca,\n    countries: [CountryCode.Macau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macau Pataca',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MOP$',\n    symbol_native: 'MOP$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacedoniaDenar: {\n    code: CurrencyCode.MacedoniaDenar,\n    countries: [CountryCode.NorthMacedonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macedonia Denar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0434\u0435\u043D',\n    symbol_native: '\u0434\u0435\u043D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MadagascarAriary: {\n    code: CurrencyCode.MadagascarAriary,\n    countries: [CountryCode.Madagascar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Madagascar Ariary',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ar',\n    symbol_native: 'Ar',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalawiKwacha: {\n    code: CurrencyCode.MalawiKwacha,\n    countries: [CountryCode.Malawi],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malawi Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MK',\n    symbol_native: 'MK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalaysiaRinggit: {\n    code: CurrencyCode.MalaysiaRinggit,\n    countries: [CountryCode.Malaysia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malaysia Ringgit',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RM',\n    symbol_native: 'RM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaldivesRufiyaa: {\n    code: CurrencyCode.MaldivesRufiyaa,\n    countries: [CountryCode.Maldives],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Maldives Rufiyaa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rf',\n    symbol_native: 'Rf',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaltaLira: {\n    code: CurrencyCode.MaltaLira,\n    countries: [CountryCode.Malta],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malta Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lm',\n    symbol_native: 'Lm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MauritiusRupee: {\n    code: CurrencyCode.MauritiusRupee,\n    countries: [CountryCode.Mauritius],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mauritius Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MexicoPeso: {\n    code: CurrencyCode.MexicoPeso,\n    countries: [CountryCode.Mexico],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mexico Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoldovaLeu: {\n    code: CurrencyCode.MoldovaLeu,\n    countries: [CountryCode.Moldova],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Moldova Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MongoliaTughrik: {\n    code: CurrencyCode.MongoliaTughrik,\n    countries: [CountryCode.Mongolia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mongolia Tughrik',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AE',\n    symbol_native: '\u20AE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoroccoDirham: {\n    code: CurrencyCode.MoroccoDirham,\n    countries: [CountryCode.Morocco],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Morocco Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'DH',\n    symbol_native: 'DH',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MozambiqueMetical: {\n    code: CurrencyCode.MozambiqueMetical,\n    countries: [CountryCode.Mozambique],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mozambique Metical',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MT',\n    symbol_native: 'MT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MyanmarKyat: {\n    code: CurrencyCode.MyanmarKyat,\n    countries: [CountryCode.Myanmar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Myanmar Kyat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K',\n    symbol_native: 'K',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NamibiaDollar: {\n    code: CurrencyCode.NamibiaDollar,\n    countries: [CountryCode.Namibia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Namibia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NepalRupee: {\n    code: CurrencyCode.NepalRupee,\n    countries: [CountryCode.Nepal],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nepal Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NetherlandsAntillesGuilder: {\n    code: CurrencyCode.NetherlandsAntillesGuilder,\n    countries: [CountryCode.NetherlandsAntilles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Netherlands Antilles Guilder',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewCaledoniaFranc: {\n    code: CurrencyCode.NewCaledoniaFranc,\n    countries: [CountryCode.NewCaledonia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'New Caledonia Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A3',\n    symbol_native: '\u20A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewZealandDollar: {\n    code: CurrencyCode.NewZealandDollar,\n    countries: [CountryCode.NewZealand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'New Zealand Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NicaraguaCordoba: {\n    code: CurrencyCode.NicaraguaCordoba,\n    countries: [CountryCode.Nicaragua],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nicaragua Cordoba',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'C$',\n    symbol_native: 'C$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigerCFAFranc: {\n    code: CurrencyCode.NigerCFAFranc,\n    countries: [CountryCode.Niger],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Niger CFA Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CFA',\n    symbol_native: 'CFA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigeriaNaira: {\n    code: CurrencyCode.NigeriaNaira,\n    countries: [CountryCode.Nigeria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nigeria Naira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A6',\n    symbol_native: '\u20A6',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorthKoreaWon: {\n    code: CurrencyCode.NorthKoreaWon,\n    countries: [CountryCode.NorthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'North Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorwayKrone: {\n    code: CurrencyCode.NorwayKrone,\n    countries: [CountryCode.Norway],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Norway Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  OmanRial: {\n    code: CurrencyCode.OmanRial,\n    countries: [CountryCode.Oman],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Oman Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PakistanRupee: {\n    code: CurrencyCode.PakistanRupee,\n    countries: [CountryCode.Pakistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Pakistan Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PanamaBalboa: {\n    code: CurrencyCode.PanamaBalboa,\n    countries: [CountryCode.Panama],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Panama Balboa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'B/.',\n    symbol_native: 'B/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ParaguayGuarani: {\n    code: CurrencyCode.ParaguayGuarani,\n    countries: [CountryCode.Paraguay],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Paraguay Guarani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Gs',\n    symbol_native: 'Gs',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PeruvianNuevo: {\n    code: CurrencyCode.PeruNuevo,\n    countries: [CountryCode.Peru],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Peruvian Nuevo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S/.',\n    symbol_native: 'S/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PhilippinesPeso: {\n    code: CurrencyCode.PhilippinesPeso,\n    countries: [CountryCode.Philippines],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Philippines Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B1',\n    symbol_native: '\u20B1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PolandZloty: {\n    code: CurrencyCode.PolandZloty,\n    countries: [CountryCode.Poland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Poland Zloty',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'z\u0142',\n    symbol_native: 'z\u0142',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  QatarRial: {\n    code: CurrencyCode.QatarRial,\n    countries: [CountryCode.Qatar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Qatar Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RomaniaNewLeu: {\n    code: CurrencyCode.RomaniaNewLeu,\n    countries: [CountryCode.Romania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Romania New Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'lei',\n    symbol_native: 'lei',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RussiaRuble: {\n    code: CurrencyCode.RussiaRuble,\n    countries: [CountryCode.RussianFederation],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Russia Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BD',\n    symbol_native: '\u20BD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RwandaFranc: {\n    code: CurrencyCode.RwandaFranc,\n    countries: [CountryCode.Rwanda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Rwanda Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RF',\n    symbol_native: 'RF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SaudiArabiaRiyal: {\n    code: CurrencyCode.SaudiArabiaRiyal,\n    countries: [CountryCode.SaudiArabia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Saudi Arabia Riyal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SerbiaDinar: {\n    code: CurrencyCode.SerbiaDinar,\n    countries: [CountryCode.Serbia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Serbia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0414\u0438\u043D.',\n    symbol_native: '\u0414\u0438\u043D.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SeychellesRupee: {\n    code: CurrencyCode.SeychellesRupee,\n    countries: [CountryCode.Seychelles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Seychelles Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SingaporeDollar: {\n    code: CurrencyCode.SingaporeDollar,\n    countries: [CountryCode.Singapore],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Singapore Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SlovakiaKoruna: {\n    code: CurrencyCode.SlovakiaKoruna,\n    countries: [CountryCode.Slovakia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovakia Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Sk',\n    symbol_native: 'Sk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SloveniaTolar: {\n    code: CurrencyCode.SloveniaTolar,\n    countries: [CountryCode.Slovenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovenia Tolar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'SIT',\n    symbol_native: 'SIT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SolomonIslandsDollar: {\n    code: CurrencyCode.SolomonIslandsDollar,\n    countries: [CountryCode.SolomonIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Solomon Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SomaliaShilling: {\n    code: CurrencyCode.SomaliaShilling,\n    countries: [CountryCode.Somalia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Somalia Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S',\n    symbol_native: 'S',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthAfricaRand: {\n    code: CurrencyCode.SouthAfricaRand,\n    countries: [CountryCode.SouthAfrica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'South Africa Rand',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R',\n    symbol_native: 'R',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthKoreaWon: {\n    code: CurrencyCode.SouthKoreaWon,\n    countries: [CountryCode.SouthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'South Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SriLankaRupee: {\n    code: CurrencyCode.SriLankaRupee,\n    countries: [CountryCode.SriLanka],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sri Lanka Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SudanPound: {\n    code: CurrencyCode.SudanPound,\n    countries: [CountryCode.Sudan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sudan Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SurinameDollar: {\n    code: CurrencyCode.SurinameDollar,\n    countries: [CountryCode.Suriname],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Suriname Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwazilandLilangeni: {\n    code: CurrencyCode.SwazilandLilangeni,\n    countries: [CountryCode.Swaziland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Swaziland Lilangeni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'E',\n    symbol_native: 'E',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwedenKrona: {\n    code: CurrencyCode.SwedenKrona,\n    countries: [CountryCode.Sweden],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sweden Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwitzerlandFranc: {\n    code: CurrencyCode.SwitzerlandFranc,\n    countries: [CountryCode.Switzerland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Switzerland Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CHF',\n    symbol_native: 'CHF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SyriaPound: {\n    code: CurrencyCode.SyriaPound,\n    countries: [CountryCode.Syria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Syria Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TaiwanNewDollar: {\n    code: CurrencyCode.TaiwanNewDollar,\n    countries: [CountryCode.Taiwan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Taiwan New Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'NT$',\n    symbol_native: 'NT$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TajikistanSomoni: {\n    code: CurrencyCode.TajikistanSomoni,\n    countries: [CountryCode.Tajikistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tajikistan Somoni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TJS',\n    symbol_native: 'TJS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TanzaniaShilling: {\n    code: CurrencyCode.TanzaniaShilling,\n    countries: [CountryCode.Tanzania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tanzania Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TSh',\n    symbol_native: 'TSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ThailandBaht: {\n    code: CurrencyCode.ThailandBaht,\n    countries: [CountryCode.Thailand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Thailand Baht',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0E3F',\n    symbol_native: '\u0E3F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TunisiaDinar: {\n    code: CurrencyCode.TunisiaDinar,\n    countries: [CountryCode.Tunisia],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Tunisia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062A',\n    symbol_native: '\u062F.\u062A',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkeyLira: {\n    code: CurrencyCode.TurkeyLira,\n    countries: [CountryCode.Turkey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkey Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BA',\n    symbol_native: '\u20BA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkmenistanManat: {\n    code: CurrencyCode.TurkmenistanManat,\n    countries: [CountryCode.Turkmenistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkmenistan Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'm',\n    symbol_native: 'm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UgandaShilling: {\n    code: CurrencyCode.UgandaShilling,\n    countries: [CountryCode.Uganda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Uganda Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'USh',\n    symbol_native: 'USh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UkraineHryvnia: {\n    code: CurrencyCode.UkraineHryvnia,\n    countries: [CountryCode.Ukraine],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ukraine Hryvnia',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B4',\n    symbol_native: '\u20B4',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedArabEmiratesDirham: {\n    code: CurrencyCode.UnitedArabEmiratesDirham,\n    countries: [CountryCode.UnitedArabEmirates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Arab Emirates Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u0625',\n    symbol_native: '\u062F.\u0625',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedKingdomPound: {\n    code: CurrencyCode.UnitedKingdomPound,\n    countries: [CountryCode.UnitedKingdom],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Kingdom Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedStatesDollar: {\n    code: CurrencyCode.UnitedStatesDollar,\n    countries: [CountryCode.UnitedStates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United States Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UruguayPeso: {\n    code: CurrencyCode.UruguayPeso,\n    countries: [CountryCode.Uruguay],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uruguay Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$U',\n    symbol_native: '$U',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UzbekistanSom: {\n    code: CurrencyCode.UzbekistanSom,\n    countries: [CountryCode.Uzbekistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uzbekistan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'UZS',\n    symbol_native: 'UZS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VanuatuVatu: {\n    code: CurrencyCode.VanuatuVatu,\n    countries: [CountryCode.Vanuatu],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vanuatu Vatu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'VT',\n    symbol_native: 'VT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VenezuelaBolivar: {\n    code: CurrencyCode.VenezuelaBolivar,\n    countries: [CountryCode.Venezuela],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Venezuela Bolivar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Bs. F',\n    symbol_native: 'Bs. F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VietnamDong: {\n    code: CurrencyCode.VietnamDong,\n    countries: [CountryCode.Vietnam],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vietnam Dong',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  YemenRial: {\n    code: CurrencyCode.YemenRial,\n    countries: [CountryCode.Yemen],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Yemen Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZambiaKwacha: {\n    code: CurrencyCode.ZambiaKwacha,\n    countries: [CountryCode.Zambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zambia Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'ZK',\n    symbol_native: 'ZK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZimbabweDollar: {\n    code: CurrencyCode.ZimbabweDollar,\n    countries: [CountryCode.Zimbabwe],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zimbabwe Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n};\n\nexport enum CryptoCurrency {\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  Litecoin = 'LTC',\n  Ripple = 'XRP',\n  Dash = 'DASH',\n  Zcash = 'ZEC',\n  Dogecoin = 'DOGE',\n  Monero = 'XMR',\n  BitcoinCash = 'BCH',\n  EOS = 'EOS',\n  Binance = 'BNB',\n  Stellar = 'XLM',\n  Cardano = 'ADA',\n  IOTA = 'IOTA',\n  Tezos = 'XTZ',\n  NEO = 'NEO',\n  TRON = 'TRX',\n  EOSClassic = 'EOSC',\n  Ontology = 'ONT',\n  VeChain = 'VEN',\n  QTUM = 'QTUM',\n  Lisk = 'LSK',\n  Waves = 'WAVES',\n  OmiseGO = 'OMG',\n  Zilliqa = 'ZIL',\n  BitcoinGold = 'BTG',\n  Decred = 'DCR',\n  Stratis = 'STRAT',\n  Populous = 'PPT',\n  Augur = 'REP',\n  Golem = 'GNT',\n  Siacoin = 'SC',\n  BasicAttentionToken = 'BAT',\n  ZCoin = 'XZC',\n  StratisHedged = 'SNT',\n  VeChainHedged = 'VEN',\n  PowerLedger = 'POWR',\n  WavesHedged = 'WAVE',\n  ZilliqaHedged = 'ZRX',\n  BitcoinDiamond = 'BCD',\n  DigiByte = 'DGB',\n  DigiByteHedged = 'DGB',\n  Bytecoin = 'BCN',\n  BytecoinHedged = 'BCN',\n}\n", "export enum LanguageCode {\n  Afrikaans = 'af',\n  Albanian = 'sq',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Armenian = 'hy',\n  Azerbaijani = 'az',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  Belarusian = 'be',\n  Bengali = 'bn',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  Bihari = 'bh',\n  Bislama = 'bi',\n  Bosnian = 'bs',\n  Breten = 'br',\n  Bulgarian = 'bg',\n  Burmese = 'my',\n  Cantonese = 'yue',\n  Catalan = 'ca',\n  Chinese = 'zh',\n  Chuvash = 'cv',\n  Corsican = 'co',\n  Croatian = 'hr',\n  Czech = 'cs',\n  Danish = 'da',\n  Dari = 'prs',\n  Divehi = 'dv',\n  Dutch = 'nl',\n  English = 'en',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  Faroese = 'fo',\n  Farsi = 'fa',\n  Filipino = 'fil',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Galician = 'gl',\n  Georgian = 'ka',\n  German = 'de',\n  Greek = 'el',\n  Greenlandic = 'kl',\n  Gujarati = 'gu',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  Hebrew = 'he',\n  Hindi = 'hi',\n  Hungarian = 'hu',\n  Icelandic = 'is',\n  Igbo = 'ig',\n  Indonesian = 'id',\n  Irish = 'ga',\n  Italian = 'it',\n  Japanese = 'ja',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Komi = 'kv',\n  Konkani = 'kok',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Lao = 'lo',\n  Latin = 'la',\n  Latvian = 'lv',\n  Lithuanian = 'lt',\n  Luxembourgish = 'lb',\n  Ossetian = 'os',\n  Macedonian = 'mk',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  Malayalam = 'ml',\n  Maltese = 'mt',\n  Maori = 'mi',\n  Marathi = 'mr',\n  Mari = 'mhr',\n  Mongolian = 'mn',\n  Montenegrin = 'me',\n  Nepali = 'ne',\n  NorthernSotho = 'nso',\n  Norwegian = 'no',\n  NorwegianBokmal = 'nb',\n  NorwegianNynorsk = 'nn',\n  Oriya = 'or',\n  Pashto = 'ps',\n  Persian = 'fa',\n  Polish = 'pl',\n  Portuguese = 'pt',\n  Punjabi = 'pa',\n  Quechua = 'qu',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Sakha = 'sah',\n  Sami = 'se',\n  Samoan = 'sm',\n  Sanskrit = 'sa',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianCyrillic = 'sr-Cyrl',\n  Sesotho = 'st',\n  Shona = 'sn',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Somali = 'so',\n  Spanish = 'es',\n  Sudanese = 'su',\n  Sutu = 'sx',\n  Swahili = 'sw',\n  Swedish = 'sv',\n  Syriac = 'syr',\n  Tagalog = 'tl',\n  Tajik = 'tg',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  Tatar = 'tt',\n  Telugu = 'te',\n  Thai = 'th',\n  Tibetan = 'bo',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  Turkish = 'tr',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Welsh = 'cy',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  Zulu = 'zu',\n}\n\nexport type Language = {\n  code: LanguageCode;\n  name: string;\n  native_name: string;\n};\n", "import { LanguageCode } from '../language';\nimport { CountryCode } from './country';\n\n/**\n * Locale code in form of `[language]-[region]-[variant]`\n *\n * @example\n * ```\n * const localeCode: Locale.EnglishUnitedStates = 'en-US'\n * ```\n *\n */\nexport enum LocaleCode {\n  Afrikaans = 'af',\n  AfrikaansSouthAfrica = 'af-ZA',\n  Albanian = 'sq',\n  AlbanianAlbania = 'sq-AL',\n  Amharic = 'am',\n  AmharicEthiopia = 'am-ET',\n  Arabic = 'ar',\n  ArabicAlgeria = 'ar-DZ',\n  ArabicBahrain = 'ar-BH',\n  ArabicEgypt = 'ar-EG',\n  ArabicIraq = 'ar-IQ',\n  ArabicJordan = 'ar-JO',\n  ArabicKuwait = 'ar-KW',\n  ArabicLebanon = 'ar-LB',\n  ArabicLibya = 'ar-LY',\n  ArabicMorocco = 'ar-MA',\n  ArabicOman = 'ar-OM',\n  ArabicQatar = 'ar-QA',\n  ArabicSaudiArabia = 'ar-SA',\n  ArabicSyria = 'ar-SY',\n  ArabicTunisia = 'ar-TN',\n  ArabicUnitedArabEmirates = 'ar-AE',\n  ArabicYemen = 'ar-YE',\n  Armenian = 'hy',\n  ArmenianArmenia = 'hy-AM',\n  Azerbaijani = 'az',\n  AzerbaijaniAzerbaijan = 'az-AZ',\n  AzerbaijaniCyrillicAzerbaijan = 'az-Cyrl-AZ',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  BasqueSpain = 'eu-ES',\n  Belarusian = 'be',\n  BelarusianBelarus = 'be-BY',\n  Bengali = 'bn',\n  BengaliBangladesh = 'bn-BD',\n  BengaliIndia = 'bn-IN',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  BhutaniBhutan = 'dz-BT',\n  Bosnian = 'bs',\n  BosnianBosniaAndHerzegovina = 'bs-BA',\n  Breton = 'br',\n  Bulgarian = 'bg',\n  BulgarianBosniaAndHerzegovina = 'bg-BG',\n  BulgarianBulgaria = 'bg-BG',\n  Burmese = 'my',\n  BurmeseMyanmar = 'my-MM',\n  Cantonese = 'yue',\n  CantoneseHongKong = 'yue-HK',\n  Catalan = 'ca',\n  CatalanSpain = 'ca-ES',\n  Chechen = 'ce',\n  Cherokee = 'chr',\n  Chinese = 'zh',\n  ChineseSimplified = 'zh-Hans',\n  ChineseSimplifiedChina = 'zh-Hans-CN',\n  ChineseSimplifiedHongKong = 'zh-Hans-HK',\n  ChineseSimplifiedMacau = 'zh-Hans-MO',\n  ChineseSimplifiedSingapore = 'zh-Hans-SG',\n  ChineseTraditional = 'zh-Hant',\n  ChineseTraditionalHongKong = 'zh-Hant-HK',\n  ChineseTraditionalMacau = 'zh-Hant-MO',\n  ChineseTraditionalSingapore = 'zh-Hant-SG',\n  ChineseTraditionalTaiwan = 'zh-Hant-TW',\n  Chuvash = 'cv',\n  CorsicanFrance = 'co-FR',\n  Croatian = 'hr',\n  CroatianBosniaAndHerzegovina = 'hr-BA',\n  CroatianCroatia = 'hr-HR',\n  Czech = 'cs',\n  CzechCzechRepublic = 'cs-CZ',\n  Danish = 'da',\n  DanishDenmark = 'da-DK',\n  Dari = 'prs',\n  DariAfghanistan = 'prs-AF',\n  Divehi = 'dv',\n  DivehiMaldives = 'dv-MV',\n  Dutch = 'nl',\n  DutchBelgium = 'nl-BE',\n  DutchNetherlands = 'nl-NL',\n  English = 'en',\n  EnglishAustralia = 'en-AU',\n  EnglishBelgium = 'en-BE',\n  EnglishBelize = 'en-BZ',\n  EnglishCanada = 'en-CA',\n  EnglishCaribbean = 'en-029',\n  EnglishIreland = 'en-IE',\n  EnglishJamaica = 'en-JM',\n  EnglishNewZealand = 'en-NZ',\n  EnglishPhilippines = 'en-PH',\n  EnglishSingapore = 'en-SG',\n  EnglishSouthAfrica = 'en-ZA',\n  EnglishTrinidadAndTobago = 'en-TT',\n  EnglishUnitedKingdom = 'en-GB',\n  EnglishUnitedStates = 'en-US',\n  EnglishZimbabwe = 'en-ZW',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  EstonianEstonia = 'et-EE',\n  Faroese = 'fo',\n  FaroeseFaroeIslands = 'fo-FO',\n  Farsi = 'fa',\n  FarsiIran = 'fa-IR',\n  Filipino = 'fil',\n  FilipinoPhilippines = 'fil-PH',\n  Finnish = 'fi',\n  FinnishFinland = 'fi-FI',\n  French = 'fr',\n  FrenchBelgium = 'fr-BE',\n  FrenchCanada = 'fr-CA',\n  FrenchFrance = 'fr-FR',\n  FrenchLuxembourg = 'fr-LU',\n  FrenchMonaco = 'fr-MC',\n  FrenchReunion = 'fr-RE',\n  FrenchSwitzerland = 'fr-CH',\n  Frisian = 'fy',\n  FrisianNetherlands = 'fy-NL',\n  Galician = 'gl',\n  GalicianSpain = 'gl-ES',\n  Georgian = 'ka',\n  GeorgianGeorgia = 'ka-GE',\n  German = 'de',\n  GermanAustria = 'de-AT',\n  GermanBelgium = 'de-BE',\n  GermanGermany = 'de-DE',\n  GermanLiechtenstein = 'de-LI',\n  GermanLuxembourg = 'de-LU',\n  GermanSwitzerland = 'de-CH',\n  Greenlandic = 'kl',\n  GreenlandicGreenland = 'kl-GL',\n  Greek = 'el',\n  GreekGreece = 'el-GR',\n  Gujarati = 'gu',\n  GujaratiIndia = 'gu-IN',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  HausaGhana = 'ha-GH',\n  HausaNiger = 'ha-NE',\n  HausaNigeria = 'ha-NG',\n  Hebrew = 'he',\n  HebrewIsrael = 'he-IL',\n  Hindi = 'hi',\n  HindiIndia = 'hi-IN',\n  Hungarian = 'hu',\n  HungarianHungary = 'hu-HU',\n  Icelandic = 'is',\n  IcelandicIceland = 'is-IS',\n  Igbo = 'ig',\n  IgboNigeria = 'ig-NG',\n  Indonesian = 'id',\n  IndonesianIndonesia = 'id-ID',\n  Irish = 'ga',\n  IrishIreland = 'ga-IE',\n  Italian = 'it',\n  ItalianItaly = 'it-IT',\n  ItalianSwitzerland = 'it-CH',\n  Japanese = 'ja',\n  JapaneseJapan = 'ja-JP',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  KannadaIndia = 'kn-IN',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  KazakhKazakhstan = 'kk-KZ',\n  Khmer = 'km',\n  KhmerCambodia = 'km-KH',\n  KinyarwandaRwanda = 'rw-RW',\n  Komi = 'kv',\n  Konkani = 'kok',\n  KonkaniIndia = 'kok-IN',\n  Korean = 'ko',\n  KoreanSouthKorea = 'ko-KR',\n  Kurdish = 'ku',\n  KurdishIraq = 'ku-IQ',\n  KurdishTurkey = 'ku-TR',\n  Kyrgyz = 'ky',\n  KyrgyzKyrgyzstan = 'ky-KG',\n  Lao = 'lo',\n  LaoLaos = 'lo-LA',\n  Latin = 'la',\n  Latvian = 'lv',\n  LatvianLatvia = 'lv-LV',\n  Lithuanian = 'lt',\n  LithuanianLithuania = 'lt-LT',\n  Luxembourgish = 'lb',\n  LuxembourgishBelgium = 'lb-LU',\n  LuxembourgishLuxembourg = 'lb-LU',\n  Macedonian = 'mk',\n  MacedonianNorthMacedonia = 'mk-MK',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  MalayBrunei = 'ms-BN',\n  MalayIndia = 'ms-IN',\n  MalayMalaysia = 'ms-MY',\n  MalaySingapore = 'ms-SG',\n  Malayalam = 'ml',\n  MalayalamIndia = 'ml-IN',\n  Maltese = 'mt',\n  MalteseMalta = 'mt-MT',\n  Maori = 'mi',\n  MaoriNewZealand = 'mi-NZ',\n  Marathi = 'mr',\n  MarathiIndia = 'mr-IN',\n  Mari = 'chm',\n  Mongolian = 'mn',\n  MongolianMongolia = 'mn-MN',\n  Montenegrin = 'me',\n  MontenegrinMontenegro = 'me-ME',\n  Nepali = 'ne',\n  NepaliNepal = 'ne-NP',\n  NorthernSotho = 'ns',\n  NorthernSothoSouthAfrica = 'ns-ZA',\n  Norwegian = 'nb',\n  NorwegianBokmalNorway = 'nb-NO',\n  NorwegianNynorskNorway = 'nn-NO',\n  Oriya = 'or',\n  OriyaIndia = 'or-IN',\n  Ossetian = 'os',\n  Pashto = 'ps',\n  PashtoAfghanistan = 'ps-AF',\n  Persian = 'fa',\n  PersianIran = 'fa-IR',\n  Polish = 'pl',\n  PolishPoland = 'pl-PL',\n  Portuguese = 'pt',\n  PortugueseBrazil = 'pt-BR',\n  PortuguesePortugal = 'pt-PT',\n  Punjabi = 'pa',\n  PunjabiIndia = 'pa-IN',\n  PunjabiPakistan = 'pa-PK',\n  Quechua = 'qu',\n  QuechuaBolivia = 'qu-BO',\n  QuechuaEcuador = 'qu-EC',\n  QuechuaPeru = 'qu-PE',\n  Romanian = 'ro',\n  RomanianRomania = 'ro-RO',\n  Russian = 'ru',\n  RussianKazakhstan = 'ru-KZ',\n  RussianKyrgyzstan = 'ru-KG',\n  RussianRussia = 'ru-RU',\n  RussianUkraine = 'ru-UA',\n  Sakha = 'sah',\n  Sanskrit = 'sa',\n  SanskritIndia = 'sa-IN',\n  Sami = 'se',\n  SamiNorway = 'se-NO',\n  SamiSweden = 'se-SE',\n  SamiFinland = 'se-FI',\n  Samoan = 'sm',\n  SamoanSamoa = 'sm-WS',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianBosniaAndHerzegovina = 'sr-BA',\n  SerbianSerbiaAndMontenegro = 'sr-SP',\n  SerbianCyrillic = 'sr-SP-Cyrl',\n  SerbianCyrillicBosniaAndHerzegovina = 'sr-Cyrl-BA',\n  SerbianCyrillicSerbiaAndMontenegro = 'sr-Cyrl-SP',\n  Sesotho = 'st',\n  SesothoSouthAfrica = 'st-ZA',\n  Shona = 'sn',\n  ShonaZimbabwe = 'sn-ZW',\n  Sindhi = 'sd',\n  SindhiPakistan = 'sd-PK',\n  Sinhala = 'si',\n  SinhalaSriLanka = 'si-LK',\n  Slovak = 'sk',\n  SlovakSlovakia = 'sk-SK',\n  Slovenian = 'sl',\n  SlovenianSlovenia = 'sl-SI',\n  Somali = 'so',\n  SomaliSomalia = 'so-SO',\n  Spanish = 'es',\n  SpanishArgentina = 'es-AR',\n  SpanishBolivia = 'es-BO',\n  SpanishChile = 'es-CL',\n  SpanishColombia = 'es-CO',\n  SpanishCostaRica = 'es-CR',\n  SpanishCuba = 'es-CU',\n  SpanishDominicanRepublic = 'es-DO',\n  SpanishEcuador = 'es-EC',\n  SpanishEquatorialGuinea = 'es-GQ',\n  SpanishElSalvador = 'es-SV',\n  SpanishGuatemala = 'es-GT',\n  SpanishHonduras = 'es-HN',\n  SpanishMexico = 'es-MX',\n  SpanishNicaragua = 'es-NI',\n  SpanishPanama = 'es-PA',\n  SpanishParaguay = 'es-PY',\n  SpanishPeru = 'es-PE',\n  SpanishPuertoRico = 'es-PR',\n  SpanishSpain = 'es-ES',\n  SpanishUnitedStates = 'es-US',\n  SpanishUruguay = 'es-UY',\n  SpanishVenezuela = 'es-VE',\n  Sudanese = 'su',\n  Sutu = 'st',\n  SutuSouthAfrica = 'st-ZA',\n  Swahili = 'sw',\n  SwahiliKenya = 'sw-KE',\n  Swedish = 'sv',\n  SwedishFinland = 'sv-FI',\n  SwedishSweden = 'sv-SE',\n  Syriac = 'syr',\n  SyriacSyria = 'syr-SY',\n  Tajik = 'tg',\n  TajikTajikistan = 'tg-TJ',\n  Tagalog = 'tl',\n  TagalogPhilippines = 'tl-PH',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  TamilIndia = 'ta-IN',\n  Tatar = 'tt',\n  Telugu = 'te',\n  TeluguIndia = 'te-IN',\n  Thai = 'th',\n  ThaiThailand = 'th-TH',\n  Tibetan = 'bo',\n  TibetanBhutan = 'bo-BT',\n  TibetanChina = 'bo-CN',\n  TibetanIndia = 'bo-IN',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  TswanaSouthAfrica = 'tn-ZA',\n  Turkish = 'tr',\n  TurkishTurkey = 'tr-TR',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  UkrainianUkraine = 'uk-UA',\n  Urdu = 'ur',\n  UrduAfghanistan = 'ur-AF',\n  UrduIndia = 'ur-IN',\n  UrduPakistan = 'ur-PK',\n  Uzbek = 'uz',\n  UzbekCyrillic = 'uz-Cyrl-UZ',\n  UzbekLatin = 'uz-Latn-UZ',\n  UzbekUzbekistan = 'uz-UZ',\n  Vietnamese = 'vi',\n  VietnameseVietnam = 'vi-VN',\n  Welsh = 'cy',\n  WelshUnitedKingdom = 'cy-GB',\n  Xhosa = 'xh',\n  XhosaSouthAfrica = 'xh-ZA',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  YorubaNigeria = 'yo-NG',\n  ZhuyinMandarinChina = 'yue-Hant-CN',\n  Zulu = 'zu',\n  ZuluSouthAfrica = 'zu-ZA',\n}\n\nexport type Locale = {\n  country?: {\n    code: CountryCode;\n    name: string;\n    native: string;\n  };\n  id: LocaleCode;\n  language: {\n    code: LanguageCode;\n    name: string;\n    native: string;\n  };\n  name: string;\n  native_name: string;\n  rtl: boolean;\n};\n", "import { TimezoneOffset } from './timezone';\nimport { Timezones } from './timezones';\n\nexport enum TimezoneRegions {\n  AfricaAbidjan = 'Africa/Abidjan',\n  AfricaAccra = 'Africa/Accra',\n  AfricaAddisAbaba = 'Africa/Addis_Ababa',\n  AfricaAlgiers = 'Africa/Algiers',\n  AfricaAsmara = 'Africa/Asmara',\n  AfricaBamako = 'Africa/Bamako',\n  AfricaBangui = 'Africa/Bangui',\n  AfricaBanjul = 'Africa/Banjul',\n  AfricaBissau = 'Africa/Bissau',\n  AfricaBlantyre = 'Africa/Blantyre',\n  AfricaBrazzaville = 'Africa/Brazzaville',\n  AfricaBujumbura = 'Africa/Bujumbura',\n  AfricaCairo = 'Africa/Cairo',\n  AfricaCasablanca = 'Africa/Casablanca',\n  AfricaCeuta = 'Africa/Ceuta',\n  AfricaConakry = 'Africa/Conakry',\n  AfricaDakar = 'Africa/Dakar',\n  AfricaDarEsSalaam = 'Africa/Dar_es_Salaam',\n  AfricaDjibouti = 'Africa/Djibouti',\n  AfricaDouala = 'Africa/Douala',\n  AfricaElAaiun = 'Africa/El_Aaiun',\n  AfricaFreetown = 'Africa/Freetown',\n  AfricaGaborone = 'Africa/Gaborone',\n  AfricaHarare = 'Africa/Harare',\n  AfricaJohannesburg = 'Africa/Johannesburg',\n  AfricaJuba = 'Africa/Juba',\n  AfricaKampala = 'Africa/Kampala',\n  AfricaKhartoum = 'Africa/Khartoum',\n  AfricaKigali = 'Africa/Kigali',\n  AfricaKinshasa = 'Africa/Kinshasa',\n  AfricaLagos = 'Africa/Lagos',\n  AfricaLibreville = 'Africa/Libreville',\n  AfricaLome = 'Africa/Lome',\n  AfricaLuanda = 'Africa/Luanda',\n  AfricaLubumbashi = 'Africa/Lubumbashi',\n  AfricaLusaka = 'Africa/Lusaka',\n  AfricaMalabo = 'Africa/Malabo',\n  AfricaMaputo = 'Africa/Maputo',\n  AfricaMaseru = 'Africa/Maseru',\n  AfricaMbabane = 'Africa/Mbabane',\n  AfricaMogadishu = 'Africa/Mogadishu',\n  AfricaMonrovia = 'Africa/Monrovia',\n  AfricaNairobi = 'Africa/Nairobi',\n  AfricaNdjamena = 'Africa/Ndjamena',\n  AfricaNiamey = 'Africa/Niamey',\n  AfricaNouakchott = 'Africa/Nouakchott',\n  AfricaOuagadougou = 'Africa/Ouagadougou',\n  AfricaPortoNovo = 'Africa/Porto-Novo',\n  AfricaSaoTome = 'Africa/Sao_Tome',\n  AfricaTripoli = 'Africa/Tripoli',\n  AfricaTunis = 'Africa/Tunis',\n  AfricaWindhoek = 'Africa/Windhoek',\n  AmericaAdak = 'America/Adak',\n  AmericaAnchorage = 'America/Anchorage',\n  AmericaAnguilla = 'America/Anguilla',\n  AmericaAntigua = 'America/Antigua',\n  AmericaAraguaina = 'America/Araguaina',\n  AmericaArgentinaBuenosAires = 'America/Argentina/Buenos_Aires',\n  AmericaArgentinaCatamarca = 'America/Argentina/Catamarca',\n  AmericaArgentinaCordoba = 'America/Argentina/Cordoba',\n  AmericaArgentinaJujuy = 'America/Argentina/Jujuy',\n  AmericaArgentinaLaRioja = 'America/Argentina/La_Rioja',\n  AmericaArgentinaMendoza = 'America/Argentina/Mendoza',\n  AmericaArgentinaRioGallegos = 'America/Argentina/Rio_Gallegos',\n  AmericaArgentinaSalta = 'America/Argentina/Salta',\n  AmericaArgentinaSanJuan = 'America/Argentina/San_Juan',\n  AmericaArgentinaSanLuis = 'America/Argentina/San_Luis',\n  AmericaArgentinaTucuman = 'America/Argentina/Tucuman',\n  AmericaArgentinaUshuaia = 'America/Argentina/Ushuaia',\n  AmericaAruba = 'America/Aruba',\n  AmericaAsuncion = 'America/Asuncion',\n  AmericaAtikokan = 'America/Atikokan',\n  AmericaAtka = 'America/Atka',\n  AmericaBahia = 'America/Bahia',\n  AmericaBahiaBanderas = 'America/Bahia_Banderas',\n  AmericaBarbados = 'America/Barbados',\n  AmericaBelem = 'America/Belem',\n  AmericaBelize = 'America/Belize',\n  AmericaBlancSablon = 'America/Blanc-Sablon',\n  AmericaBoaVista = 'America/Boa_Vista',\n  AmericaBogota = 'America/Bogota',\n  AmericaBoise = 'America/Boise',\n  AmericaCambridgeBay = 'America/Cambridge_Bay',\n  AmericaCampoGrande = 'America/Campo_Grande',\n  AmericaCancun = 'America/Cancun',\n  AmericaCaracas = 'America/Caracas',\n  AmericaCayenne = 'America/Cayenne',\n  AmericaCayman = 'America/Cayman',\n  AmericaChicago = 'America/Chicago',\n  AmericaChihuahua = 'America/Chihuahua',\n  AmericaCoralHarbour = 'America/Coral_Harbour',\n  AmericaCordoba = 'America/Cordoba',\n  AmericaCostaRica = 'America/Costa_Rica',\n  AmericaCreston = 'America/Creston',\n  AmericaCuiaba = 'America/Cuiaba',\n  AmericaCuracao = 'America/Curacao',\n  AmericaDanmarkshavn = 'America/Danmarkshavn',\n  AmericaDawson = 'America/Dawson',\n  AmericaDawsonCreek = 'America/Dawson_Creek',\n  AmericaDenver = 'America/Denver',\n  AmericaDetroit = 'America/Detroit',\n  AmericaDominica = 'America/Dominica',\n  AmericaEdmonton = 'America/Edmonton',\n  AmericaEirunepe = 'America/Eirunepe',\n  AmericaElSalvador = 'America/El_Salvador',\n  AmericaFortaleza = 'America/Fortaleza',\n  AmericaGlaceBay = 'America/Glace_Bay',\n  AmericaGodthab = 'America/Godthab',\n  AmericaGooseBay = 'America/Goose_Bay',\n  AmericaGrandTurk = 'America/Grand_Turk',\n  AmericaGrenada = 'America/Grenada',\n  AmericaGuadeloupe = 'America/Guadeloupe',\n  AmericaGuatemala = 'America/Guatemala',\n  AmericaGuayaquil = 'America/Guayaquil',\n  AmericaGuyana = 'America/Guyana',\n  AmericaHalifax = 'America/Halifax',\n  AmericaHavana = 'America/Havana',\n  AmericaHermosillo = 'America/Hermosillo',\n  AmericaIndianaIndianapolis = 'America/Indiana/Indianapolis',\n  AmericaIndianaKnox = 'America/Indiana/Knox',\n  AmericaIndianaMarengo = 'America/Indiana/Marengo',\n  AmericaIndianaPetersburg = 'America/Indiana/Petersburg',\n  AmericaIndianaTellCity = 'America/Indiana/Tell_City',\n  AmericaIndianaVevay = 'America/Indiana/Vevay',\n  AmericaIndianaVincennes = 'America/Indiana/Vincennes',\n  AmericaIndianaWinamac = 'America/Indiana/Winamac',\n  AmericaInuvik = 'America/Inuvik',\n  AmericaIqaluit = 'America/Iqaluit',\n  AmericaJamaica = 'America/Jamaica',\n  AmericaJuneau = 'America/Juneau',\n  AmericaKentuckyLouisville = 'America/Kentucky/Louisville',\n  AmericaKentuckyMonticello = 'America/Kentucky/Monticello',\n  AmericaKralendijk = 'America/Kralendijk',\n  AmericaLaPaz = 'America/La_Paz',\n  AmericaLima = 'America/Lima',\n  AmericaLosAngeles = 'America/Los_Angeles',\n  AmericaLouisville = 'America/Louisville',\n  AmericaLowerPrinces = 'America/Lower_Princes',\n  AmericaMaceio = 'America/Maceio',\n  AmericaManagua = 'America/Managua',\n  AmericaManaus = 'America/Manaus',\n  AmericaMarigot = 'America/Marigot',\n  AmericaMartinique = 'America/Martinique',\n  AmericaMatamoros = 'America/Matamoros',\n  AmericaMazatlan = 'America/Mazatlan',\n  AmericaMenominee = 'America/Menominee',\n  AmericaMerida = 'America/Merida',\n  AmericaMetlakatla = 'America/Metlakatla',\n  AmericaMexicoCity = 'America/Mexico_City',\n  AmericaMiquelon = 'America/Miquelon',\n  AmericaMoncton = 'America/Moncton',\n  AmericaMonterrey = 'America/Monterrey',\n  AmericaMontevideo = 'America/Montevideo',\n  AmericaMontserrat = 'America/Montserrat',\n  AmericaMontreal = 'America/Montreal',\n  AmericaNassau = 'America/Nassau',\n  AmericaNewYork = 'America/New_York',\n  AmericaNipigon = 'America/Nipigon',\n  AmericaNome = 'America/Nome',\n  AmericaNoronha = 'America/Noronha',\n  AmericaNorthDakotaBeulah = 'America/North_Dakota/Beulah',\n  AmericaNorthDakotaCenter = 'America/North_Dakota/Center',\n  AmericaNorthDakotaNewSalem = 'America/North_Dakota/New_Salem',\n  AmericaOjinaga = 'America/Ojinaga',\n  AmericaPanama = 'America/Panama',\n  AmericaPangnirtung = 'America/Pangnirtung',\n  AmericaParamaribo = 'America/Paramaribo',\n  AmericaPhoenix = 'America/Phoenix',\n  AmericaPortAuPrince = 'America/Port-au-Prince',\n  AmericaPortOfSpain = 'America/Port_of_Spain',\n  AmericaPortoVelho = 'America/Porto_Velho',\n  AmericaPuertoRico = 'America/Puerto_Rico',\n  AmericaRainyRiver = 'America/Rainy_River',\n  AmericaRankinInlet = 'America/Rankin_Inlet',\n  AmericaRecife = 'America/Recife',\n  AmericaRegina = 'America/Regina',\n  AmericaResolute = 'America/Resolute',\n  AmericaRioBranco = 'America/Rio_Branco',\n  AmericaSantaIsabel = 'America/Santa_Isabel',\n  AmericaSantarem = 'America/Santarem',\n  AmericaSantiago = 'America/Santiago',\n  AmericaSantoDomingo = 'America/Santo_Domingo',\n  AmericaSaoPaulo = 'America/Sao_Paulo',\n  AmericaScoresbysund = 'America/Scoresbysund',\n  AmericaShiprock = 'America/Shiprock',\n  AmericaSitka = 'America/Sitka',\n  AmericaStBarthelemy = 'America/St_Barthelemy',\n  AmericaStJohns = 'America/St_Johns',\n  AmericaStKitts = 'America/St_Kitts',\n  AmericaStLucia = 'America/St_Lucia',\n  AmericaStThomas = 'America/St_Thomas',\n  AmericaStVincent = 'America/St_Vincent',\n  AmericaSwiftCurrent = 'America/Swift_Current',\n  AmericaTegucigalpa = 'America/Tegucigalpa',\n  AmericaThule = 'America/Thule',\n  AmericaThunderBay = 'America/Thunder_Bay',\n  AmericaTijuana = 'America/Tijuana',\n  AmericaToronto = 'America/Toronto',\n  AmericaTortola = 'America/Tortola',\n  AmericaVancouver = 'America/Vancouver',\n  AmericaWhitehorse = 'America/Whitehorse',\n  AmericaWinnipeg = 'America/Winnipeg',\n  AmericaYakutat = 'America/Yakutat',\n  AmericaYellowknife = 'America/Yellowknife',\n  AntarcticaCasey = 'Antarctica/Casey',\n  AntarcticaDavis = 'Antarctica/Davis',\n  AntarcticaDumontDUrville = 'Antarctica/DumontDUrville',\n  AntarcticaMacquarie = 'Antarctica/Macquarie',\n  AntarcticaMawson = 'Antarctica/Mawson',\n  AntarcticaMcMurdo = 'Antarctica/McMurdo',\n  AntarcticaPalmer = 'Antarctica/Palmer',\n  AntarcticaRothera = 'Antarctica/Rothera',\n  AntarcticaSyowa = 'Antarctica/Syowa',\n  AntarcticaTroll = 'Antarctica/Troll',\n  AntarcticaVostok = 'Antarctica/Vostok',\n  ArcticLongyearbyen = 'Arctic/Longyearbyen',\n  AsiaAden = 'Asia/Aden',\n  AsiaAlmaty = 'Asia/Almaty',\n  AsiaAmman = 'Asia/Amman',\n  AsiaAnadyr = 'Asia/Anadyr',\n  AsiaAqtau = 'Asia/Aqtau',\n  AsiaAqtobe = 'Asia/Aqtobe',\n  AsiaAshgabat = 'Asia/Ashgabat',\n  AsiaBaghdad = 'Asia/Baghdad',\n  AsiaBahrain = 'Asia/Bahrain',\n  AsiaBaku = 'Asia/Baku',\n  AsiaBangkok = 'Asia/Bangkok',\n  AsiaBarnaul = 'Asia/Barnaul',\n  AsiaBeirut = 'Asia/Beirut',\n  AsiaBishkek = 'Asia/Bishkek',\n  AsiaBrunei = 'Asia/Brunei',\n  AsiaChita = 'Asia/Chita',\n  AsiaChoibalsan = 'Asia/Choibalsan',\n  AsiaColombo = 'Asia/Colombo',\n  AsiaDamascus = 'Asia/Damascus',\n  AsiaDhaka = 'Asia/Dhaka',\n  AsiaDili = 'Asia/Dili',\n  AsiaDubai = 'Asia/Dubai',\n  AsiaDushanbe = 'Asia/Dushanbe',\n  AsiaFamagusta = 'Asia/Famagusta',\n  AsiaGaza = 'Asia/Gaza',\n  AsiaHebron = 'Asia/Hebron',\n  AsiaHoChiMinh = 'Asia/Ho_Chi_Minh',\n  AsiaHongKong = 'Asia/Hong_Kong',\n  AsiaHovd = 'Asia/Hovd',\n  AsiaIrkutsk = 'Asia/Irkutsk',\n  AsiaJakarta = 'Asia/Jakarta',\n  AsiaJayapura = 'Asia/Jayapura',\n  AsiaJerusalem = 'Asia/Jerusalem',\n  AsiaKabul = 'Asia/Kabul',\n  AsiaKamchatka = 'Asia/Kamchatka',\n  AsiaKarachi = 'Asia/Karachi',\n  AsiaKathmandu = 'Asia/Kathmandu',\n  AsiaKhandyga = 'Asia/Khandyga',\n  AsiaKolkata = 'Asia/Kolkata',\n  AsiaKrasnoyarsk = 'Asia/Krasnoyarsk',\n  AsiaKualaLumpur = 'Asia/Kuala_Lumpur',\n  AsiaKuching = 'Asia/Kuching',\n  AsiaKuwait = 'Asia/Kuwait',\n  AsiaMacau = 'Asia/Macau',\n  AsiaMagadan = 'Asia/Magadan',\n  AsiaMakassar = 'Asia/Makassar',\n  AsiaManila = 'Asia/Manila',\n  AsiaMuscat = 'Asia/Muscat',\n  AsiaNicosia = 'Asia/Nicosia',\n  AsiaNovokuznetsk = 'Asia/Novokuznetsk',\n  AsiaNovosibirsk = 'Asia/Novosibirsk',\n  AsiaOmsk = 'Asia/Omsk',\n  AsiaOral = 'Asia/Oral',\n  AsiaPhnomPenh = 'Asia/Phnom_Penh',\n  AsiaPontianak = 'Asia/Pontianak',\n  AsiaPyongyang = 'Asia/Pyongyang',\n  AsiaQatar = 'Asia/Qatar',\n  AsiaQyzylorda = 'Asia/Qyzylorda',\n  AsiaRangoon = 'Asia/Rangoon',\n  AsiaRiyadh = 'Asia/Riyadh',\n  AsiaSakhalin = 'Asia/Sakhalin',\n  AsiaSamarkand = 'Asia/Samarkand',\n  AsiaSeoul = 'Asia/Seoul',\n  AsiaShanghai = 'Asia/Shanghai',\n  AsiaSingapore = 'Asia/Singapore',\n  AsiaSrednekolymsk = 'Asia/Srednekolymsk',\n  AsiaTaipei = 'Asia/Taipei',\n  AsiaTashkent = 'Asia/Tashkent',\n  AsiaTbilisi = 'Asia/Tbilisi',\n  AsiaTehran = 'Asia/Tehran',\n  AsiaThimphu = 'Asia/Thimphu',\n  AsiaTokyo = 'Asia/Tokyo',\n  AsiaTomsk = 'Asia/Tomsk',\n  AsiaUlaanbaatar = 'Asia/Ulaanbaatar',\n  AsiaUrumqi = 'Asia/Urumqi',\n  AsiaUstNera = 'Asia/Ust-Nera',\n  AsiaVientiane = 'Asia/Vientiane',\n  AsiaVladivostok = 'Asia/Vladivostok',\n  AsiaYakutsk = 'Asia/Yakutsk',\n  AsiaYekaterinburg = 'Asia/Yekaterinburg',\n  AsiaYerevan = 'Asia/Yerevan',\n  AtlanticAzores = 'Atlantic/Azores',\n  AtlanticBermuda = 'Atlantic/Bermuda',\n  AtlanticCanary = 'Atlantic/Canary',\n  AtlanticCapeVerde = 'Atlantic/Cape_Verde',\n  AtlanticFaroe = 'Atlantic/Faroe',\n  AtlanticMadeira = 'Atlantic/Madeira',\n  AtlanticReykjavik = 'Atlantic/Reykjavik',\n  AtlanticSouthGeorgia = 'Atlantic/South_Georgia',\n  AtlanticStHelena = 'Atlantic/St_Helena',\n  AtlanticStanley = 'Atlantic/Stanley',\n  AustraliaAdelaide = 'Australia/Adelaide',\n  AustraliaBrisbane = 'Australia/Brisbane',\n  AustraliaBrokenHill = 'Australia/Broken_Hill',\n  AustraliaCanberra = 'Australia/Canberra',\n  AustraliaCurrie = 'Australia/Currie',\n  AustraliaDarwin = 'Australia/Darwin',\n  AustraliaEucla = 'Australia/Eucla',\n  AustraliaHobart = 'Australia/Hobart',\n  AustraliaLindeman = 'Australia/Lindeman',\n  AustraliaLordHowe = 'Australia/Lord_Howe',\n  AustraliaMelbourne = 'Australia/Melbourne',\n  AustraliaPerth = 'Australia/Perth',\n  AustraliaSydney = 'Australia/Sydney',\n  EuropeAmsterdam = 'Europe/Amsterdam',\n  EuropeAndorra = 'Europe/Andorra',\n  EuropeAthens = 'Europe/Athens',\n  EuropeBelgrade = 'Europe/Belgrade',\n  EuropeBerlin = 'Europe/Berlin',\n  EuropeBratislava = 'Europe/Bratislava',\n  EuropeBrussels = 'Europe/Brussels',\n  EuropeBucharest = 'Europe/Bucharest',\n  EuropeBudapest = 'Europe/Budapest',\n  EuropeBusingen = 'Europe/Busingen',\n  EuropeChisinau = 'Europe/Chisinau',\n  EuropeCopenhagen = 'Europe/Copenhagen',\n  EuropeDublin = 'Europe/Dublin',\n  EuropeGibraltar = 'Europe/Gibraltar',\n  EuropeGuernsey = 'Europe/Guernsey',\n  EuropeHelsinki = 'Europe/Helsinki',\n  EuropeIsleOfMan = 'Europe/Isle_of_Man',\n  EuropeIstanbul = 'Europe/Istanbul',\n  EuropeJersey = 'Europe/Jersey',\n  EuropeKaliningrad = 'Europe/Kaliningrad',\n  EuropeKiev = 'Europe/Kiev',\n  EuropeKirov = 'Europe/Kirov',\n  EuropeLisbon = 'Europe/Lisbon',\n  EuropeLjubljana = 'Europe/Ljubljana',\n  EuropeLondon = 'Europe/London',\n  EuropeLuxembourg = 'Europe/Luxembourg',\n  EuropeMadrid = 'Europe/Madrid',\n  EuropeMalta = 'Europe/Malta',\n  EuropeMariehamn = 'Europe/Mariehamn',\n  EuropeMinsk = 'Europe/Minsk',\n  EuropeMonaco = 'Europe/Monaco',\n  EuropeMoscow = 'Europe/Moscow',\n  EuropeOslo = 'Europe/Oslo',\n  EuropeParis = 'Europe/Paris',\n  EuropePodgorica = 'Europe/Podgorica',\n  EuropePrague = 'Europe/Prague',\n  EuropeRiga = 'Europe/Riga',\n  EuropeRome = 'Europe/Rome',\n  EuropeSamara = 'Europe/Samara',\n  EuropeSanMarino = 'Europe/San_Marino',\n  EuropeSarajevo = 'Europe/Sarajevo',\n  EuropeSimferopol = 'Europe/Simferopol',\n  EuropeSkopje = 'Europe/Skopje',\n  EuropeSofia = 'Europe/Sofia',\n  EuropeStockholm = 'Europe/Stockholm',\n  EuropeTallinn = 'Europe/Tallinn',\n  EuropeTirane = 'Europe/Tirane',\n  EuropeUzhgorod = 'Europe/Uzhgorod',\n  EuropeVaduz = 'Europe/Vaduz',\n  EuropeVatican = 'Europe/Vatican',\n  EuropeVienna = 'Europe/Vienna',\n  EuropeVilnius = 'Europe/Vilnius',\n  EuropeVolgograd = 'Europe/Volgograd',\n  EuropeWarsaw = 'Europe/Warsaw',\n  EuropeZagreb = 'Europe/Zagreb',\n  EuropeZaporozhye = 'Europe/Zaporozhye',\n  EuropeZurich = 'Europe/Zurich',\n  GMT = 'GMT',\n  IndianAntananarivo = 'Indian/Antananarivo',\n  IndianChagos = 'Indian/Chagos',\n  IndianChristmas = 'Indian/Christmas',\n  IndianCocos = 'Indian/Cocos',\n  IndianComoro = 'Indian/Comoro',\n  IndianKerguelen = 'Indian/Kerguelen',\n  IndianMahe = 'Indian/Mahe',\n  IndianMaldives = 'Indian/Maldives',\n  IndianMauritius = 'Indian/Mauritius',\n  IndianMayotte = 'Indian/Mayotte',\n  IndianReunion = 'Indian/Reunion',\n  PacificApia = 'Pacific/Apia',\n  PacificAuckland = 'Pacific/Auckland',\n  PacificBougainville = 'Pacific/Bougainville',\n  PacificChatham = 'Pacific/Chatham',\n  PacificChuuk = 'Pacific/Chuuk',\n  PacificEaster = 'Pacific/Easter',\n  PacificEfate = 'Pacific/Efate',\n  PacificEnderbury = 'Pacific/Enderbury',\n  PacificFakaofo = 'Pacific/Fakaofo',\n  PacificFiji = 'Pacific/Fiji',\n  PacificFunafuti = 'Pacific/Funafuti',\n  PacificGalapagos = 'Pacific/Galapagos',\n  PacificGambier = 'Pacific/Gambier',\n  PacificGuadalcanal = 'Pacific/Guadalcanal',\n  PacificGuam = 'Pacific/Guam',\n  PacificHonolulu = 'Pacific/Honolulu',\n  PacificJohnston = 'Pacific/Johnston',\n  PacificKiritimati = 'Pacific/Kiritimati',\n  PacificKosrae = 'Pacific/Kosrae',\n  PacificKwajalein = 'Pacific/Kwajalein',\n  PacificMajuro = 'Pacific/Majuro',\n  PacificMarquesas = 'Pacific/Marquesas',\n  PacificMidway = 'Pacific/Midway',\n  PacificNauru = 'Pacific/Nauru',\n  PacificNiue = 'Pacific/Niue',\n  PacificNorfolk = 'Pacific/Norfolk',\n  PacificNoumea = 'Pacific/Noumea',\n  PacificPagoPago = 'Pacific/Pago_Pago',\n  PacificPalau = 'Pacific/Palau',\n  PacificPitcairn = 'Pacific/Pitcairn',\n  PacificPohnpei = 'Pacific/Pohnpei',\n  PacificPonape = 'Pacific/Ponape',\n  PacificPortMoresby = 'Pacific/Port_Moresby',\n  PacificRarotonga = 'Pacific/Rarotonga',\n  PacificSaipan = 'Pacific/Saipan',\n  PacificSamoa = 'Pacific/Samoa',\n  PacificTahiti = 'Pacific/Tahiti',\n  PacificTarawa = 'Pacific/Tarawa',\n  PacificTongatapu = 'Pacific/Tongatapu',\n  PacificTruk = 'Pacific/Truk',\n  PacificWake = 'Pacific/Wake',\n  PacificWallis = 'Pacific/Wallis',\n  PacificYap = 'Pacific/Yap',\n  // USAlaska = 'US/Alaska',\n  // USAleutian = 'US/Aleutian',\n  // USArizona = 'US/Arizona',\n  // USCentral = 'US/Central',\n  // USCentralStandard = 'US/Central Standard',\n  // USCentralDaylight = 'US/Central Daylight',\n  // USEastern = 'US/Eastern',\n  // USEasternStandard = 'US/Eastern Standard',\n  // USEasternDaylight = 'US/Eastern Daylight',\n  // USHawaii = 'US/Hawaii',\n  // USMountain = 'US/Mountain',\n  // USMountainStandard = 'US/Mountain Standard',\n  // USMountainDaylight = 'US/Mountain Daylight',\n  // USPacific = 'US/Pacific',\n  // USPacificStandard = 'US/Pacific Standard',\n  // USPacificDaylight = 'US/Pacific Daylight',\n  // USPacificIsland = 'US/Pacific-Island',\n}\n\nexport type TimezoneRegion = {\n  id: TimezoneRegions;\n  name: string;\n  offset: TimezoneOffset;\n  timezone: Timezones;\n};\n", "import { Timezones } from './timezones';\n\nexport enum TimezoneOffset {\n  UTC_MINUS_12 = 'UTC-12',\n  UTC_MINUS_11_30 = 'UTC-11:30',\n  UTC_MINUS_11 = 'UTC-11',\n  UTC_MINUS_10_30 = 'UTC-10:30',\n  UTC_MINUS_10 = 'UTC-10',\n  UTC_MINUS_9_30 = 'UTC-9:30',\n  UTC_MINUS_9 = 'UTC-09',\n  UTC_MINUS_8_45 = 'UTC-8:45',\n  UTC_MINUS_8 = 'UTC-08',\n  UTC_MINUS_7 = 'UTC-07',\n  UTC_MINUS_6_30 = 'UTC-6:30',\n  UTC_MINUS_6 = 'UTC-06',\n  UTC_MINUS_5_45 = 'UTC-5:45',\n  UTC_MINUS_5_30 = 'UTC-5:30',\n  UTC_MINUS_5 = 'UTC-05',\n  UTC_MINUS_4_30 = 'UTC-4:30',\n  UTC_MINUS_4 = 'UTC-04',\n  UTC_MINUS_3_30 = 'UTC-3:30',\n  UTC_MINUS_3 = 'UTC-03',\n  UTC_MINUS_2_30 = 'UTC-2:30',\n  UTC_MINUS_2 = 'UTC-02',\n  UTC_MINUS_1 = 'UTC-01',\n  UTC_0 = 'UTC+00',\n  UTC_PLUS_1 = 'UTC+01',\n  UTC_PLUS_2 = 'UTC+02',\n  UTC_PLUS_3 = 'UTC+03',\n  UTC_PLUS_3_30 = 'UTC+3:30',\n  UTC_PLUS_4 = 'UTC+04',\n  UTC_PLUS_4_30 = 'UTC+4:30',\n  UTC_PLUS_5 = 'UTC+05',\n  UTC_PLUS_5_30 = 'UTC+5:30',\n  UTC_PLUS_5_45 = 'UTC+5:45',\n  UTC_PLUS_6 = 'UTC+06',\n  UTC_PLUS_6_30 = 'UTC+6:30',\n  UTC_PLUS_7 = 'UTC+07',\n  UTC_PLUS_8 = 'UTC+08',\n  UTC_PLUS_8_45 = 'UTC+8:45',\n  UTC_PLUS_9 = 'UTC+09',\n  UTC_PLUS_9_30 = 'UTC+9:30',\n  UTC_PLUS_10 = 'UTC+10',\n  UTC_PLUS_10_30 = 'UTC+10:30',\n  UTC_PLUS_11 = 'UTC+11',\n  UTC_PLUS_11_30 = 'UTC+11:30',\n  UTC_PLUS_12 = 'UTC+12',\n  UTC_PLUS_12_45 = 'UTC+12:45',\n  UTC_PLUS_13 = 'UTC+13',\n  UTC_PLUS_13_45 = 'UTC+13:45',\n  UTC_PLUS_14 = 'UTC+14',\n}\n\nexport type TimezoneDetails = {\n  dst: {\n    is: boolean;\n    uses: boolean;\n  };\n  id: Timezones;\n  name: string;\n  offset: TimezoneOffset;\n};\n", "import { TimezoneOffset } from './timezone.js';\nimport { TimezoneDetails } from './timezone';\n\nexport enum Timezones {\n  AcreTime = 'ACT',\n  AfghanistanTime = 'AFT',\n  AIXCentralEuropeanTime = 'DFT',\n  AlaskaDaylightTime = 'AKDT',\n  AlaskaStandardTime = 'AKST',\n  AlmaAtaTime = 'ALMT',\n  AmazonSummerTime = 'AMST',\n  AmazonTime = 'AMT',\n  AnadyrTime = 'ANAT',\n  AqtobeTime = 'AQTT',\n  ArabiaStandardTime = 'AST',\n  ArgentinaTime = 'ART',\n  ArmeniaTime = 'AMT',\n  ASEANCommonTime = 'ASEAN',\n  AtlanticDaylightTime = 'ADT',\n  AtlanticStandardTime = 'AST',\n  AustralianCentralDaylightSavingTime = 'ACDT',\n  AustralianCentralStandardTime = 'ACST',\n  AustralianCentralWesternStandardTime = 'ACWST',\n  AustralianEasternDaylightSavingTime = 'AEDT',\n  AustralianEasternStandardTime = 'AEST',\n  AustralianEasternTime = 'AET',\n  AustralianWesternStandardTime = 'AWST',\n  AzerbaijanTime = 'AZT',\n  AzoresStandardTime = 'AZOT',\n  AzoresSummerTime = 'AZOST',\n  BakerIslandTime = 'BIT',\n  BangladeshStandardTime = 'BST',\n  BhutanTime = 'BTT',\n  BoliviaTime = 'BOT',\n  BougainvilleStandardTime = 'BST',\n  BrasiliaSummerTime = 'BRST',\n  BrasiliaTime = 'BRT',\n  BritishIndianOceanTime = 'BIOT',\n  BritishSummerTime = 'BST',\n  BruneiTime = 'BNT',\n  CapeVerdeTime = 'CVT',\n  CentralAfricaTime = 'CAT',\n  CentralDaylightTime = 'CDT',\n  CentralEuropeanSummerTime = 'CEST',\n  CentralEuropeanTime = 'CET',\n  CentralIndonesiaTime = 'WITA',\n  CentralStandardTime = 'CST',\n  CentralTime = 'CT',\n  CentralWesternStandardTime = 'CWST',\n  ChamorroStandardTime = 'CHST',\n  ChathamDaylightTime = 'CHADT',\n  ChathamStandardTime = 'CHAST',\n  ChileStandardTime = 'CLT',\n  ChileSummerTime = 'CLST',\n  ChinaStandardTime = 'CST',\n  ChoibalsanStandardTime = 'CHOT',\n  ChoibalsanSummerTime = 'CHOST',\n  ChristmasIslandTime = 'CXT',\n  ChuukTime = 'CHUT',\n  ClipptertonIslandStandardTime = 'CIST',\n  CocosIslandsTime = 'CCT',\n  ColombiaSummerTime = 'COST',\n  ColombiaTime = 'COT',\n  CookIslandTime = 'CKT',\n  CoordinatedUniversalTime = 'UTC',\n  CubaDaylightTime = 'CDT',\n  CubaStandardTime = 'CST',\n  DavisTime = 'DAVT',\n  DumontDUrvilleTime = 'DDUT',\n  EastAfricaTime = 'EAT',\n  EasterIslandStandardTime = 'EAST',\n  EasterIslandSummerTime = 'EASST',\n  EasternCaribbeanTime = 'ECT',\n  EasternDaylightTime = 'EDT',\n  EasternEuropeanSummerTime = 'EEST',\n  EasternEuropeanTime = 'EET',\n  EasternGreenlandSummerTime = 'EGST',\n  EasternGreenlandTime = 'EGT',\n  EasternIndonesianTime = 'WIT',\n  EasternStandardTime = 'EST',\n  EasternTime = 'ET',\n  EcuadorTime = 'ECT',\n  FalklandIslandsSummerTime = 'FKST',\n  FalklandIslandsTime = 'FKT',\n  FernandoDeNoronhaTime = 'FNT',\n  FijiTime = 'FJT',\n  FrenchGuianaTime = 'GFT',\n  FrenchSouthernAndAntarcticTime = 'TFT',\n  FurtherEasternEuropeanTime = 'FET',\n  GalapagosTime = 'GALT',\n  GambierIslandTime = 'GIT',\n  GambierIslandsTime = 'GAMT',\n  GeorgiaStandardTime = 'GET',\n  GilbertIslandTime = 'GILT',\n  GreenwichMeanTime = 'GMT',\n  GulfStandardTime = 'GST',\n  GuyanaTime = 'GYT',\n  HawaiiAleutianDaylightTime = 'HDT',\n  HawaiiAleutianStandardTime = 'HST',\n  HeardAndMcDonaldIslandsTime = 'HMT',\n  HeureAvanceeDEuropeCentraleTime = 'HAEC',\n  HongKongTime = 'HKT',\n  HovdSummerTime = 'HOVST',\n  HovdTime = 'HOVT',\n  IndianOceanTime = 'IOT',\n  IndianStandardTime = 'IST',\n  IndochinaTime = 'ICT',\n  InternationalDayLineWestTime = 'IDLW',\n  IranDaylightTime = 'IRDT',\n  IranStandardTime = 'IRST',\n  IrishStandardTime = 'IST',\n  IrkutskSummerTime = 'IRKST',\n  IrkutskTime = 'IRKT',\n  IsraelDaylightTime = 'IDT',\n  IsraelStandardTime = 'IST',\n  JapanStandardTime = 'JST',\n  KaliningradTime = 'KALT',\n  KamchatkaTime = 'KAMT',\n  KoreaStandardTime = 'KST',\n  KosraeTime = 'KOST',\n  KrasnoyarskSummerTime = 'KRAST',\n  KrasnoyarskTime = 'KRAT',\n  KyrgyzstanTime = 'KGT',\n  LineIslandsTime = 'LINT',\n  KazakhstanStandardTime = 'KAST',\n  LordHoweStandardTime = 'LHST',\n  LordHoweSummerTime = 'LHST',\n  MacquarieIslandStationTime = 'MIST',\n  MagadanTime = 'MAGT',\n  MalaysiaStandardTime = 'MST',\n  MalaysiaTime = 'MYT',\n  MaldivesTime = 'MVT',\n  MarquesasIslandsTime = 'MART',\n  MarshallIslandsTime = 'MHT',\n  MauritiusTime = 'MUT',\n  MawsonStationTime = 'MAWT',\n  MiddleEuropeanSummerTime = 'MEDT',\n  MiddleEuropeanTime = 'MET',\n  MoscowTime = 'MSK',\n  MountainDaylightTime = 'MDT',\n  MountainStandardTime = 'MST',\n  MyanmarStandardTime = 'MMT',\n  NepalTime = 'NCT',\n  NauruTime = 'NRT',\n  NewCaledoniaTime = 'NCT',\n  NewZealandDaylightTime = 'NZDT',\n  NewZealandStandardTime = 'NZST',\n  NewfoundlandDaylightTime = 'NDT',\n  NewfoundlandStandardTime = 'NST',\n  NewfoundlandTime = 'NT',\n  NiueTime = 'NUT',\n  NorfolkIslandTime = 'NFT',\n  NovosibirskTime = 'NOVT',\n  OmskTime = 'OMST',\n  OralTime = 'ORAT',\n  PacificDaylightTime = 'PDT',\n  PacificStandardTime = 'PST',\n  PakistanStandardTime = 'PKT',\n  PalauTime = 'PWT',\n  PapuaNewGuineaTime = 'PGT',\n  ParaguaySummerTime = 'PYST',\n  ParaguayTime = 'PYT',\n  PeruTime = 'PET',\n  PhilippineStandardTime = 'PHST',\n  PhilippineTime = 'PHT',\n  PhoenixIslandTime = 'PHOT',\n  PitcairnTime = 'PST',\n  PohnpeiStandardTime = 'PONT',\n  ReunionTime = 'RET',\n  RotheraResearchStationTime = 'ROTT',\n  SaintPierreAndMiquelonDaylightTime = 'PMDT',\n  SaintPierreAndMiquelonStandardTime = 'PMST',\n  SakhalinIslandTime = 'SAKT',\n  SamaraTime = 'SAMT',\n  SamoaDaylightTime = 'SDT',\n  SamoaStandardTime = 'SST',\n  SeychellesTime = 'SCT',\n  ShowaStationTime = 'SYOT',\n  SingaporeStandardTime = 'SST',\n  SingaporeTime = 'SGT',\n  SolomonIslandsTime = 'SBT',\n  SouthAfricanStandardTime = 'SAST',\n  SouthGeorgiaAndTheSouthSandwichIslandsTime = 'GST',\n  SrednekolymskTime = 'SRET',\n  SriLankaStandardTime = 'SLST',\n  SurinameTime = 'SRT',\n  TahitiTime = 'TAHT',\n  TajikistanTime = 'TJT',\n  ThailandStandardTime = 'THA',\n  TimorLesteTime = 'TLT',\n  TokelauTime = 'TKT',\n  TongaTime = 'TOT',\n  TurkeyTime = 'TRT',\n  TurkmenistanTime = 'TMT',\n  TuvaluTime = 'TVT',\n  UlaanbaatarStandardTime = 'ULAT',\n  UlaanbaatarSummerTime = 'ULAST',\n  UruguayStandardTime = 'UYT',\n  UruguaySummerTime = 'UYST',\n  UzbekistanTime = 'UZT',\n  VanuatuTime = 'VUT',\n  VenezuelaStandardTime = 'VET',\n  VladivostokTime = 'VLAT',\n  VolgogradTime = 'VOLT',\n  VostokStationTime = 'VOST',\n  WakeIslandTime = 'WAKT',\n  WestAfricaSummerTime = 'WAST',\n  WestAfricaTime = 'WAT',\n  WestGreenlandSummerTime = 'WGST',\n  WestGreenlandTime = 'WGT',\n  WestKazakhstanTime = 'WKT',\n  WesternEuropeanSummerTime = 'WEDT',\n  WesternEuropeanTime = 'WET',\n  WesternIndonesianTime = 'WIT',\n  WesternStandardTime = 'WST',\n  YakutskTime = 'YAKT',\n  YekaterinburgTime = 'YEKT',\n}\n\nexport const AcreTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AcreTime,\n  name: 'Acre Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const AfghanistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AfghanistanTime,\n  name: 'Afghanistan Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const AIXCentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AIXCentralEuropeanTime,\n  name: 'AIX Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const AlaskaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AlaskaDaylightTime,\n  name: 'Alaska Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const AlaskaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlaskaStandardTime,\n  name: 'Alaska Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const AlmaAtaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlmaAtaTime,\n  name: 'Alma-Ata Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const AmazonSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonSummerTime,\n  name: 'Amazon Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AmazonTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonTime,\n  name: 'Amazon Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AnadyrTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AnadyrTime,\n  name: 'Anadyr Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const AqtobeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AqtobeTime,\n  name: 'Aqtobe Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ArabiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArabiaStandardTime,\n  name: 'Arabia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const ArgentinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArgentinaTime,\n  name: 'Argentina Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ArmeniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArmeniaTime,\n  name: 'Armenia Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AtlanticDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AtlanticDaylightTime,\n  name: 'Atlantic Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AtlanticStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AtlanticStandardTime,\n  name: 'Atlantic Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AustralianCentralDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralDaylightSavingTime,\n  name: 'Australian Central Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const AustralianCentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralStandardTime,\n  name: 'Australian Central Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const AustralianCentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralWesternStandardTime,\n  name: 'Australian Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const AustralianEasternDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternDaylightSavingTime,\n  name: 'Australian Eastern Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const AustralianEasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternStandardTime,\n  name: 'Australian Eastern Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianEasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternTime,\n  name: 'Australian Eastern Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianWesternStandardTime,\n  name: 'Australian Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const AzerbaijanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzerbaijanTime,\n  name: 'Azerbaijan Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AzoresStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzoresStandardTime,\n  name: 'Azores Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const AzoresSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AzoresSummerTime,\n  name: 'Azores Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const BakerIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BakerIslandTime,\n  name: 'Baker Island Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const BangladeshStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BangladeshStandardTime,\n  name: 'Bangladesh Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BhutanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BhutanTime,\n  name: 'Bhutan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BoliviaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BoliviaTime,\n  name: 'Bolivia Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const BougainvilleStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BougainvilleStandardTime,\n  name: 'Bougainville Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const BrasiliaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BrasiliaSummerTime,\n  name: 'Brasilia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const BrasiliaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BrasiliaTime,\n  name: 'Brasilia Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const BritishIndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BritishIndianOceanTime,\n  name: 'British Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BritishSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BritishSummerTime,\n  name: 'British Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const BruneiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BruneiTime,\n  name: 'Brunei Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CapeVerdeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CapeVerdeTime,\n  name: 'Cape Verde Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const CentralAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralAfricaTime,\n  name: 'Central Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralDaylightTime,\n  name: 'Central Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanSummerTime,\n  name: 'Central European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanTime,\n  name: 'Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const CentralIndonesiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralIndonesiaTime,\n  name: 'Central Indonesia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralStandardTime,\n  name: 'Central Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const CentralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralTime,\n  name: 'Central Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralWesternStandardTime,\n  name: 'Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const ChamorroStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChamorroStandardTime,\n  name: 'Chamorro Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ChathamDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChathamDaylightTime,\n  name: 'Chatham Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13_45,\n};\n\nexport const ChathamStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChathamStandardTime,\n  name: 'Chatham Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12_45,\n};\n\nexport const ChileStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChileStandardTime,\n  name: 'Chile Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ChileSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChileSummerTime,\n  name: 'Chile Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ChinaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChinaStandardTime,\n  name: 'China Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanStandardTime,\n  name: 'Choibalsan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanSummerTime,\n  name: 'Choibalsan Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const ChristmasIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChristmasIslandTime,\n  name: 'Christmas Island Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const ChuukTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChuukTime,\n  name: 'Chuuk Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ClipptertonIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ClipptertonIslandStandardTime,\n  name: 'Clippterton Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const CocosIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CocosIslandsTime,\n  name: 'Cocos Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const ColombiaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ColombiaSummerTime,\n  name: 'Colombia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ColombiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ColombiaTime,\n  name: 'Colombia Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CookIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CookIslandTime,\n  name: 'Cook Island Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const CoordinatedUniversalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CoordinatedUniversalTime,\n  name: 'Coordinated Universal Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const CubaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CubaDaylightTime,\n  name: 'Cuba Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const CubaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CubaStandardTime,\n  name: 'Cuba Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const DavisTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DavisTime,\n  name: 'Davis Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const DumontDUrvilleTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DumontDUrvilleTime,\n  name: \"Dumont D'Urville Time\",\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const EastAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EastAfricaTime,\n  name: 'East Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasterIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasterIslandStandardTime,\n  name: 'Easter Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const EasterIslandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasterIslandSummerTime,\n  name: 'Easter Island Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternCaribbeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternCaribbeanTime,\n  name: 'Eastern Caribbean Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternDaylightTime,\n  name: 'Eastern Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanSummerTime,\n  name: 'Eastern European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanTime,\n  name: 'Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const EasternGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandSummerTime,\n  name: 'Eastern Greenland Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const EasternGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandTime,\n  name: 'Eastern Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const EasternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternIndonesianTime,\n  name: 'Eastern Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const EasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternStandardTime,\n  name: 'Eastern Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternTime,\n  name: 'Eastern Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EcuadorTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EcuadorTime,\n  name: 'Ecuador Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const FalklandIslandsSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsSummerTime,\n  name: 'Falkland Islands Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FalklandIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsTime,\n  name: 'Falkland Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const FernandoDeNoronhaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FernandoDeNoronhaTime,\n  name: 'Fernando de Noronha Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const FijiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FijiTime,\n  name: 'Fiji Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const FrenchGuianaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchGuianaTime,\n  name: 'French Guiana Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FrenchSouthernAndAntarcticTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchSouthernAndAntarcticTime,\n  name: 'French Southern and Antarctic Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const FurtherEasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FurtherEasternEuropeanTime,\n  name: 'Further Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const GalapagosTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GalapagosTime,\n  name: 'Galapagos Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const GambierIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandTime,\n  name: 'Gambier Island Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GambierIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandsTime,\n  name: 'Gambier Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GeorgiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GeorgiaStandardTime,\n  name: 'Georgia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GilbertIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GilbertIslandTime,\n  name: 'Gilbert Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const GreenwichMeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GreenwichMeanTime,\n  name: 'Greenwich Mean Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const GulfStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GulfStandardTime,\n  name: 'Gulf Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GuyanaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GuyanaTime,\n  name: 'Guyana Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const HawaiiAleutianDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianDaylightTime,\n  name: 'Hawaii-Aleutian Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const HawaiiAleutianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianStandardTime,\n  name: 'Hawaii-Aleutian Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const HeardAndMcDonaldIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HeardAndMcDonaldIslandsTime,\n  name: 'Heard and McDonald Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const HongKongTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HongKongTime,\n  name: 'Hong Kong Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HovdSummerTime,\n  name: 'Hovd Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HovdTime,\n  name: 'Hovd Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const IndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianOceanTime,\n  name: 'Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IndianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianStandardTime,\n  name: 'Indian Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const IndochinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndochinaTime,\n  name: 'Indochina Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const InternationalDayLineWestTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.InternationalDayLineWestTime,\n  name: 'International Day Line West Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const IranDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IranDaylightTime,\n  name: 'Iran Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const IranStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IranStandardTime,\n  name: 'Iran Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3_30,\n};\n\nexport const IrishStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrishStandardTime,\n  name: 'Irish Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const IrkutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrkutskTime,\n  name: 'Irkutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const IsraelDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IsraelDaylightTime,\n  name: 'Israel Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IsraelStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IsraelStandardTime,\n  name: 'Israel Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const JapanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.JapanStandardTime,\n  name: 'Japan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KaliningradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KaliningradTime,\n  name: 'Kaliningrad Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const KamchatkaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KamchatkaTime,\n  name: 'Kamchatka Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const KoreaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KoreaStandardTime,\n  name: 'Korea Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KosraeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KosraeTime,\n  name: 'Kosrae Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const KrasnoyarskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KrasnoyarskTime,\n  name: 'Krasnoyarsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const KyrgyzstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KyrgyzstanTime,\n  name: 'Kyrgyzstan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const LineIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LineIslandsTime,\n  name: 'Line Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_14,\n};\n\nexport const LordHoweStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweStandardTime,\n  name: 'Lord Howe Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const LordHoweSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweSummerTime,\n  name: 'Lord Howe Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MacquarieIslandStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MacquarieIslandStationTime,\n  name: 'Macquarie Island Station Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MagadanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MagadanTime,\n  name: 'Magadan Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MalaysiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaStandardTime,\n  name: 'Malaysia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MalaysiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaTime,\n  name: 'Malaysia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MaldivesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MaldivesTime,\n  name: 'Maldives Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MarquesasIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarquesasIslandsTime,\n  name: 'Marquesas Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const MarshallIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarshallIslandsTime,\n  name: 'Marshall Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MauritiusTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MauritiusTime,\n  name: 'Mauritius Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const MawsonStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MawsonStationTime,\n  name: 'Mawson Station Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MiddleEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanSummerTime,\n  name: 'Middle European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const MiddleEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanTime,\n  name: 'Middle European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const MoscowTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MoscowTime,\n  name: 'Moscow Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const MountainDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainDaylightTime,\n  name: 'Mountain Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const MountainStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainStandardTime,\n  name: 'Mountain Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const MyanmarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MyanmarStandardTime,\n  name: 'Myanmar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const NepalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NepalTime,\n  name: 'Nepal Time',\n  offset: TimezoneOffset.UTC_PLUS_5_45,\n};\n\nexport const NauruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NauruTime,\n  name: 'Nauru Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewCaledoniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewCaledoniaTime,\n  name: 'New Caledonia Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NewZealandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandDaylightTime,\n  name: 'New Zealand Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const NewZealandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandStandardTime,\n  name: 'New Zealand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewfoundlandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewfoundlandDaylightTime,\n  name: 'Newfoundland Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2_30,\n};\n\nexport const NewfoundlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NewfoundlandTime,\n  name: 'Newfoundland Time',\n  offset: TimezoneOffset.UTC_MINUS_3_30,\n};\n\nexport const NiueTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NiueTime,\n  name: 'Niue Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const NorfolkIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NorfolkIslandTime,\n  name: 'Norfolk Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NovosibirskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NovosibirskTime,\n  name: 'Novosibirsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const OmskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OmskTime,\n  name: 'Omsk Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const OralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OralTime,\n  name: 'Oral Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PacificDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificDaylightTime,\n  name: 'Pacific Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const PacificStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificStandardTime,\n  name: 'Pacific Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PakistanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PakistanStandardTime,\n  name: 'Pakistan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PalauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PalauTime,\n  name: 'Palau Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const PapuaNewGuineaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PapuaNewGuineaTime,\n  name: 'Papua New Guinea Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ParaguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguaySummerTime,\n  name: 'Paraguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ParaguayTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguayTime,\n  name: 'Paraguay Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const PeruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PeruTime,\n  name: 'Peru Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const PhilippineStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineStandardTime,\n  name: 'Philippine Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhillipineTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineTime,\n  name: 'Philippine Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhoenixIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhoenixIslandTime,\n  name: 'Phoenix Island Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const PitcairnTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PitcairnTime,\n  name: 'Pitcairn Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PohnpeiStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PohnpeiStandardTime,\n  name: 'Pohnpei Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const ReunionTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ReunionTime,\n  name: 'Reunion Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const RotheraResearchStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.RotheraResearchStationTime,\n  name: 'Rothera Research Station Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SaintPierreAndMiquelonDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonDaylightTime,\n  name: 'Saint Pierre and Miquelon Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SaintPierreAndMiquelonStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonStandardTime,\n  name: 'Saint Pierre and Miquelon Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SakhalinIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SakhalinIslandTime,\n  name: 'Sakhalin Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SamaraTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamaraTime,\n  name: 'Samara Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const SamoaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaDaylightTime,\n  name: 'Samoa Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const SamoaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaStandardTime,\n  name: 'Samoa Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const SeychellesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SeychellesTime,\n  name: 'Seychelles Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const ShowaStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ShowaStationTime,\n  name: 'Showa Station Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const SingaporeStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeStandardTime,\n  name: 'Singapore Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SingaporeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeTime,\n  name: 'Singapore Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SolomonIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SolomonIslandsTime,\n  name: 'Solomon Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SouthAfricanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthAfricanStandardTime,\n  name: 'South African Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const SouthGeorgiaAndTheSouthSandwichIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,\n  name: 'South Georgia and the South Sandwich Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SrednekolymskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SrednekolymskTime,\n  name: 'Srednekolymsk Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SriLankaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SriLankaStandardTime,\n  name: 'Sri Lanka Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const SurinameTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SurinameTime,\n  name: 'Suriname Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const TahitiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TahitiTime,\n  name: 'Tahiti Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const TajikistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TajikistanTime,\n  name: 'Tajikistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ThailandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ThailandStandardTime,\n  name: 'Thailand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const TimorLesteTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TimorLesteTime,\n  name: 'Timor-Leste Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const TokelauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TokelauTime,\n  name: 'Tokelau Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TongaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TongaTime,\n  name: 'Tonga Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TurkeyTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkeyTime,\n  name: 'Turkey Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const TurkmenistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkmenistanTime,\n  name: 'Turkmenistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const TuvaluTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TuvaluTime,\n  name: 'Tuvalu Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const UlaanbaatarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarStandardTime,\n  name: 'Ulaanbaatar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const UlaanbaatarSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarSummerTime,\n  name: 'Ulaanbaatar Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const UruguayStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguayStandardTime,\n  name: 'Uruguay Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const UruguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguaySummerTime,\n  name: 'Uruguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const UzbekistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UzbekistanTime,\n  name: 'Uzbekistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const VanuatuTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VanuatuTime,\n  name: 'Vanuatu Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const VenezuelaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VenezuelaStandardTime,\n  name: 'Venezuela Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const VladivostokTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VladivostokTime,\n  name: 'Vladivostok Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const VolgogradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VolgogradTime,\n  name: 'Volgograd Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const VostokStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VostokStationTime,\n  name: 'Vostok Station Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const WakeIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WakeIslandTime,\n  name: 'Wake Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const WestAfricaSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaSummerTime,\n  name: 'West Africa Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const WestAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaTime,\n  name: 'West Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WestGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandSummerTime,\n  name: 'West Greenland Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const WestGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandTime,\n  name: 'West Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const WestKazakhstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestKazakhstanTime,\n  name: 'West Kazakhstan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const WesternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanSummerTime,\n  name: 'Western European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WesternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanTime,\n  name: 'Western European Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const WesternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternIndonesianTime,\n  name: 'Western Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const WesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternStandardTime,\n  name: 'Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const YakutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YakutskTime,\n  name: 'Yakutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const YekaterinburgTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YekaterinburgTime,\n  name: 'Yekaterinburg Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n", "export enum Region {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n  Polar = 'Polar',\n}\n\nexport enum SubRegion {\n  CentralAmerica = 'Central America',\n  EasternAsia = 'Eastern Asia',\n  EasternEurope = 'Eastern Europe',\n  EasternAfrica = 'Eastern Africa',\n  MiddleAfrica = 'Middle Africa',\n  MiddleEast = 'Middle East',\n  NorthernAfrica = 'Northern Africa',\n  NorthernAmerica = 'Northern America',\n  NorthernEurope = 'Northern Europe',\n  Polynesia = 'Polynesia',\n  SouthAmerica = 'South America',\n  SouthernAfrica = 'Southern Africa',\n  SouthernAsia = 'Southern Asia',\n  SouthernEurope = 'Southern Europe',\n  WesternAfrica = 'Western Africa',\n  WesternAsia = 'Western Asia',\n  WesternEurope = 'Western Europe',\n  WesternAustralia = 'Western Australia',\n}\n", "import { CurrencyCode } from '../currency/index.js';\nimport { LocaleCode } from '../locale/index.js';\nimport { TimezoneRegions } from '../time/region.js';\nimport { TimezoneOffset } from '../time/timezone.js';\nimport { Timezones } from '../time/timezones.js';\nimport { CountryCode } from './country.js';\nimport { Country } from './country';\nimport { Region, SubRegion } from './region.js';\n\nexport const Countries: Record<Country['name']['short'], Country> = {\n  Afghanistan: {\n    i18n: {\n      calling_codes: [93],\n      currencies: [CurrencyCode.AfghanistanAfghani],\n      languages: [\n        LocaleCode.Pashto,\n        LocaleCode.Dari,\n        LocaleCode.Turkmen,\n        LocaleCode.Uzbek,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4_30],\n        regions: [TimezoneRegions.AsiaKabul],\n        timezones: [Timezones.AfghanistanTime],\n      },\n    },\n    id: CountryCode.Afghanistan,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEB',\n        emoji_unicode: 'U+1F1E6 U+1F1EB',\n        svg: 'https://www.countryflags.io/af/flat/64.svg',\n      },\n      tld: ['.af'],\n    },\n    iso: {\n      alpha2: CountryCode.Afghanistan,\n      alpha3: 'AFG',\n      numeric: '004',\n    },\n    name: {\n      alt_spellings: ['AF', 'Af\u0121\u0101nist\u0101n'],\n      demonym: 'Afghan',\n      native: {\n        endonym: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n      },\n      official: 'Islamic Republic of Afghanistan',\n      short: 'Afghanistan',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Afghanistan',\n        [LocaleCode.Albanian]: 'Shqip\u00EBri',\n        [LocaleCode.Amharic]: '\u12A0\u134D\u130B\u1295',\n        [LocaleCode.Arabic]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Basque]: 'Afganist\u00E1n',\n        [LocaleCode.Belarusian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Bengali]: '\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8',\n        [LocaleCode.Berber]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D',\n        [LocaleCode.Bosnian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Breton]: 'Afganistan',\n        [LocaleCode.Bulgarian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Afganistan',\n        [LocaleCode.Chinese]: '\u963F\u5BCC\u6C57',\n        [LocaleCode.Croatian]: 'Afganistan',\n        [LocaleCode.Czech]: 'Afganistan',\n        [LocaleCode.Danish]: 'Afghanistan',\n        [LocaleCode.Dutch]: 'Afghanistan',\n        [LocaleCode.English]: 'Afghanistan',\n        [LocaleCode.Esperanto]: 'Afganistan',\n        [LocaleCode.Estonian]: 'Afganistan',\n        [LocaleCode.Finnish]: 'Afghanistan',\n        [LocaleCode.French]: 'Afghanistan',\n        [LocaleCode.Frisian]: 'Afghanistan',\n        [LocaleCode.Galician]: 'Afganist\u00E1n',\n        [LocaleCode.Georgian]: '\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8',\n        [LocaleCode.German]: 'Afghanistan',\n        [LocaleCode.Greenlandic]: 'Afghanistan',\n        [LocaleCode.Greek]: '\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD',\n        [LocaleCode.Gujarati]: '\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8',\n        [LocaleCode.Haitian]: 'Afghanistan',\n        [LocaleCode.Hausa]: 'Afghanistan',\n        [LocaleCode.Hebrew]: '\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF',\n        [LocaleCode.Hindi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Hungarian]: 'Afganistan',\n        [LocaleCode.Icelandic]: 'Afghanistan',\n        [LocaleCode.Igbo]: 'Afghanistan',\n        [LocaleCode.Indonesian]: 'Afghanistan',\n        [LocaleCode.Irish]: 'Afghanistan',\n        [LocaleCode.Italian]: 'Afghanistan',\n        [LocaleCode.Japanese]: '\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3',\n        [LocaleCode.Javanese]: 'Afghanistan',\n        [LocaleCode.Kannada]: '\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8',\n        [LocaleCode.Kazakh]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780',\n        [LocaleCode.Korean]: '\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4',\n        [LocaleCode.Kurdish]: 'Afghanistan',\n        [LocaleCode.Kyrgyz]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99',\n        [LocaleCode.Latin]: 'Afghanistan',\n        [LocaleCode.Latvian]: 'Afghanistan',\n        [LocaleCode.Lithuanian]: 'Afganistanas',\n        [LocaleCode.Luxembourgish]: 'Afghanistan',\n        [LocaleCode.Macedonian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Malagasy]: 'Afghanistan',\n        [LocaleCode.Malay]: 'Afghanistan',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28',\n        [LocaleCode.Maltese]: 'Afghanistan',\n        [LocaleCode.Maori]: 'Afghanistan',\n        [LocaleCode.Marathi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Mongolian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Nepali]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Norwegian]: 'Afghanistan',\n        [LocaleCode.Pashto]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Persian]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Portuguese]: 'Afghanistan',\n        [LocaleCode.Punjabi]: 'Afghanistan',\n        [LocaleCode.Romanian]: 'Afghanistan',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Russian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Samoan]: 'Afghanistan',\n        [LocaleCode.Sanskrit]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Scots]: 'Afghanistan',\n        [LocaleCode.Serbian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Sesotho]: 'Afghanistan',\n        [LocaleCode.Shona]: 'Afghanistan',\n        [LocaleCode.Sindhi]: 'Afghanistan',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Afganistan',\n        [LocaleCode.Slovenian]: 'Afganistan',\n        [LocaleCode.Somali]: 'Afghanistan',\n        [LocaleCode.Spanish]: 'Afganist\u00E1n',\n        [LocaleCode.Sudanese]: 'Afghanistan',\n        [LocaleCode.Swahili]: 'Afghanistan',\n        [LocaleCode.Swedish]: 'Afghanistan',\n        [LocaleCode.Tagalog]: 'Afghanistan',\n        [LocaleCode.Tajik]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tatar]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tamil]: '\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD',\n        [LocaleCode.Telugu]: '\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D',\n        [LocaleCode.Turkish]: 'Afganistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Urdu]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Vietnamese]: 'Afghanistan',\n        [LocaleCode.Welsh]: 'Afghanistan',\n        [LocaleCode.Xhosa]: 'Afghanistan',\n        [LocaleCode.Yiddish]: 'Afghanistan',\n        [LocaleCode.Yoruba]: 'Afghanistan',\n        [LocaleCode.Zulu]: 'Afghanistan',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Kabul',\n          total: 34100000,\n        },\n      },\n      geography: {\n        area: 652230,\n        region: Region.Asia,\n        sub_region: SubRegion.SouthernAsia,\n      },\n      government: {\n        capital: 'Kabul',\n        type: 'Islamic Emirate',\n      },\n    },\n  },\n  Albania: {\n    i18n: {\n      calling_codes: [355],\n      currencies: [CurrencyCode.AlbaniaLek],\n      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1],\n        regions: [TimezoneRegions.EuropeBrussels],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Albania,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF1',\n        emoji_unicode: 'U+1F1E6 U+1F1F1',\n        svg: 'https://www.countryflags.io/al/flat/64.svg',\n      },\n      tld: ['.al'],\n    },\n    iso: {\n      alpha2: CountryCode.Albania,\n      alpha3: 'ALB',\n      numeric: '008',\n    },\n    name: {\n      alt_spellings: ['AL', 'Shqip\u00EBri', 'Shqip\u00EBria', 'Shqipnia'],\n      demonym: 'Albanian',\n      native: {\n        endonym: 'Shqip\u00EBri',\n      },\n      official: 'Republic of Albania',\n      short: 'Albania',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Albania',\n        [LocaleCode.Albanian]: 'Albania',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1263\u1295\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Albania',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B',\n        [LocaleCode.Bosnian]: 'Albanija',\n        [LocaleCode.Breton]: 'Albania',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Alb\u00E0nia',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u5DF4\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Albanija',\n        [LocaleCode.Czech]: 'Alb\u00E1nie',\n        [LocaleCode.Danish]: 'Albanien',\n        [LocaleCode.Dutch]: 'Albani\u00EB',\n        [LocaleCode.English]: 'Albania',\n        [LocaleCode.Esperanto]: 'Albanio',\n        [LocaleCode.Estonian]: 'Albaania',\n        [LocaleCode.Finnish]: 'Albania',\n        [LocaleCode.French]: 'Albanie',\n        [LocaleCode.Frisian]: 'Albani\u00EB',\n        [LocaleCode.Galician]: 'Alb\u00E2nia',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0',\n        [LocaleCode.German]: 'Albanien',\n        [LocaleCode.Greenlandic]: 'Albania',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Albanais',\n        [LocaleCode.Hausa]: 'Albania',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alb\u00E1nia',\n        [LocaleCode.Icelandic]: 'Alb\u00FAnir',\n        [LocaleCode.Igbo]: 'Albania',\n        [LocaleCode.Indonesian]: 'Albania',\n        [LocaleCode.Irish]: 'Alb\u00E1in',\n        [LocaleCode.Italian]: 'Albania',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30D0\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Albania',\n        [LocaleCode.Kannada]: '\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uBC14\uB2C8\uC544',\n        [LocaleCode.Kurdish]: '\u0622\u0644\u0628\u0627\u0646\u06CC\u0627',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5',\n        [LocaleCode.Latin]: 'Albania',\n        [LocaleCode.Latvian]: 'Alb\u0101nija',\n        [LocaleCode.Lithuanian]: 'Albanija',\n        [LocaleCode.Luxembourgish]: 'Albani\u00EB',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Albania',\n        [LocaleCode.Malay]: 'Albania',\n        [LocaleCode.Malayalam]: '\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E',\n        [LocaleCode.Maltese]: 'Albania',\n        [LocaleCode.Maori]: 'Albania',\n        [LocaleCode.Marathi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Albania',\n        [LocaleCode.Pashto]: '\u0627\u0627\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Persian]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Polish]: 'Albania',\n        [LocaleCode.Portuguese]: 'Alb\u00E2nia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Alb\u0103n',\n        [LocaleCode.Russian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Albania',\n        [LocaleCode.Sanskrit]: 'Albani',\n        [LocaleCode.Scots]: 'Alb\u00E0inia',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Albania',\n        [LocaleCode.Shona]: 'Albania',\n        [LocaleCode.Sindhi]: 'Albania',\n        [LocaleCode.Sinhala]: '\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Alb\u00E1nsko',\n        [LocaleCode.Slovenian]: 'Albanija',\n        [LocaleCode.Somali]: 'Albania',\n        [LocaleCode.Spanish]: 'Albania',\n        [LocaleCode.Sudanese]: 'Albania',\n        [LocaleCode.Swahili]: 'Albania',\n        [LocaleCode.Swedish]: 'Albanien',\n        [LocaleCode.Tagalog]: 'Albania',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Albaniye',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0431\u0430\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Albanie',\n        [LocaleCode.Welsh]: 'Albania',\n        [LocaleCode.Xhosa]: 'Albania',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9',\n        [LocaleCode.Yoruba]: 'Albania',\n        [LocaleCode.Zulu]: 'Albania',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Tirana',\n          total: 2853000,\n        },\n      },\n      geography: {\n        area: 28748,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Tirana',\n        type: 'Republic',\n      },\n    },\n  },\n  Algeria: {\n    i18n: {\n      calling_codes: [213],\n      currencies: [CurrencyCode.AlgeriaDinar],\n      languages: [\n        LocaleCode.Arabic,\n        LocaleCode.French,\n        LocaleCode.Berber,\n        LocaleCode.Tamazight,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.AfricaAlgiers],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n\n    id: CountryCode.Algeria,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE9\uD83C\uDDFF',\n        emoji_unicode: 'U+1F1E9 U+1F1FF',\n        svg: 'https://www.countryflags.io/dz/flat/64.svg',\n      },\n      tld: ['.dz', '.\u062C\u0632\u0627\u0626\u0631'],\n    },\n    iso: {\n      alpha2: CountryCode.Algeria,\n      alpha3: 'DZA',\n      numeric: '012',\n    },\n    name: {\n      alt_spellings: ['DZ', 'Dzayer', 'Alg\u00E9rie'],\n      demonym: 'Algerian',\n      native: {\n        endonym: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n      },\n      official: \"People's Democratic Republic of Algeria\",\n      short: 'Algeria',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Algerije',\n        [LocaleCode.Albanian]: 'Algeria',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1300\u122D\u1235',\n        [LocaleCode.Arabic]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Armenian]: '\u0531\u056C\u0563\u0578\u0580\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Basque]: 'Algeria',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u099C\u09C7\u09B0',\n        [LocaleCode.Berber]: '\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Bhutani]: '\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41',\n        [LocaleCode.Bosnian]: 'Al\u017Eir',\n        [LocaleCode.Breton]: 'Algeria',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Burmese]: '\u1021\u102C\u101B\u1015\u103A',\n        [LocaleCode.Catalan]: 'Alg\u00E8ria',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u53CA\u5229\u4E9A',\n        [LocaleCode.Croatian]: 'Al\u017Eir',\n        [LocaleCode.Czech]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Danish]: 'Algeriet',\n        [LocaleCode.Dutch]: 'Algerije',\n        [LocaleCode.English]: 'Algeria',\n        [LocaleCode.Esperanto]: 'Al\u011Derio',\n        [LocaleCode.Estonian]: 'Al\u017Eira',\n        [LocaleCode.Finnish]: 'Algeria',\n        [LocaleCode.French]: 'Alg\u00E9rie',\n        [LocaleCode.Frisian]: 'Algeri\u00EB',\n        [LocaleCode.Galician]: 'Alxeria',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8',\n        [LocaleCode.German]: 'Algerien',\n        [LocaleCode.Greenlandic]: 'Algeria',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Alg\u00E9rie',\n        [LocaleCode.Hausa]: 'Algeria',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alg\u00E1r',\n        [LocaleCode.Icelandic]: 'Alg\u00FAra',\n        [LocaleCode.Igbo]: 'Algeria',\n        [LocaleCode.Indonesian]: 'Aljir',\n        [LocaleCode.Irish]: 'Alg\u00E9rie',\n        [LocaleCode.Italian]: 'Algeria',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2',\n        [LocaleCode.Javanese]: 'Aljir',\n        [LocaleCode.Kannada]: '\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uC81C\uB9AC',\n        [LocaleCode.Kurdish]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99',\n        [LocaleCode.Latin]: 'Algeria',\n        [LocaleCode.Latvian]: 'Al\u017E\u012Brija',\n        [LocaleCode.Lithuanian]: 'Al\u017Eyras',\n        [LocaleCode.Luxembourgish]: 'Algeria',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Malagasy]: 'Alg\u00E9rie',\n        [LocaleCode.Malay]: 'Aljir',\n        [LocaleCode.Malayalam]: '\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B',\n        [LocaleCode.Maltese]: 'Alg\u00E9rie',\n        [LocaleCode.Maori]: 'Algeria',\n        [LocaleCode.Marathi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Nepali]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Algeria',\n        [LocaleCode.Pashto]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Persian]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628',\n        [LocaleCode.Polish]: 'Algieria',\n        [LocaleCode.Portuguese]: 'Alg\u00E9ria',\n        [LocaleCode.Punjabi]: '\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Algeria',\n        [LocaleCode.Russian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Samoan]: 'Algeria',\n        [LocaleCode.Sanskrit]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Scots]: 'Algeria',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Sesotho]: 'Algeria',\n        [LocaleCode.Shona]: 'Algeria',\n        [LocaleCode.Sindhi]: 'Algeria',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Slovenian]: 'Al\u017Eir',\n        [LocaleCode.Somali]: 'Algeria',\n        [LocaleCode.Spanish]: 'Algeria',\n        [LocaleCode.Sudanese]: 'Aljir',\n        [LocaleCode.Swahili]: 'Aljir',\n        [LocaleCode.Swedish]: 'Algeriet',\n        [LocaleCode.Tagalog]: 'Algeria',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Tamil]: '\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Telugu]: '\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Cezayir',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Urdu]: '\u0622\u0644\u062C\u06CC\u0631',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Vietnamese]: '\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5',\n        [LocaleCode.Welsh]: 'Algeria',\n        [LocaleCode.Xhosa]: 'Algeria',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Algeria',\n        [LocaleCode.Zulu]: 'Algeria',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Oran',\n          total: 37100000,\n        },\n      },\n      geography: {\n        area: 2381740,\n        region: Region.Africa,\n        sub_region: SubRegion.NorthernAfrica,\n      },\n      government: {\n        capital: 'Algiers',\n        type: 'Republic',\n      },\n    },\n  },\n  AmericanSamoa: {\n    i18n: {\n      calling_codes: [1684],\n      currencies: [CurrencyCode.AmericanSamoaTala],\n\n      languages: [LocaleCode.English, LocaleCode.Samoan],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_11],\n        regions: [TimezoneRegions.PacificSamoa],\n        timezones: [Timezones.SamoaStandardTime],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF8',\n        emoji_unicode: 'U+1F1E6 U+1F1F8',\n        svg: 'https://www.countryflags.io/as/flat/64.svg',\n      },\n      tld: ['.as'],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: 'ASM',\n      numeric: '016',\n    },\n    name: {\n      alt_spellings: ['AS', 'Amerika S\u0101moa', 'Amelika S\u0101moa', 'S\u0101moa Amelika'],\n      demonym: 'American Samoan',\n      native: {\n        endonym: 'American Samoa',\n      },\n      official: 'American Samoa',\n      short: 'American Samoa',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Amerikaans Samoa',\n        [LocaleCode.Albanian]: 'Samoa Amerikane',\n        [LocaleCode.Amharic]: '\u1233\u121E\u12A0\u122D',\n        [LocaleCode.Arabic]: '\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Armenian]: '\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Samoa Amerikana',\n        [LocaleCode.Bashkir]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Basque]: 'Samoa Amerikana',\n        [LocaleCode.Belarusian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Bengali]: '\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Bhutani]: '\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D',\n        [LocaleCode.Bosnian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Breton]: 'Samoa Amerikan',\n        [LocaleCode.Bulgarian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C',\n        [LocaleCode.Catalan]: 'Samoa Americana',\n        [LocaleCode.Chinese]: '\u7F8E\u5C5E\u8428\u6469\u4E9A',\n        [LocaleCode.Croatian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Czech]: 'Americk\u00E1 Samoa',\n        [LocaleCode.Danish]: 'Amerikansk Samoa',\n        [LocaleCode.Dutch]: 'Amerikaans Samoa',\n        [LocaleCode.English]: 'American Samoa',\n        [LocaleCode.Esperanto]: 'Samoa Amerika',\n        [LocaleCode.Estonian]: 'Ameerika Samoa',\n        [LocaleCode.Finnish]: 'Amerikka Samoa',\n        [LocaleCode.French]: 'American Samoa',\n        [LocaleCode.Frisian]: 'Amerikaans Samoa',\n        [LocaleCode.Galician]: 'Samoa Americana',\n        [LocaleCode.Georgian]: '\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0',\n        [LocaleCode.German]: 'Amerikanisch-Samoa',\n        [LocaleCode.Greenlandic]: 'Amerikaans Samoa',\n        [LocaleCode.Greek]: '\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Amerikaans Samoa',\n        [LocaleCode.Hausa]: 'Amerikaans Samoa',\n        [LocaleCode.Hebrew]: '\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Hungarian]: 'Amerikai Szamoa',\n        [LocaleCode.Icelandic]: 'Amerikai Szamoa',\n        [LocaleCode.Igbo]: 'Ikina Amerika',\n        [LocaleCode.Indonesian]: 'Samoa Amerika',\n        [LocaleCode.Irish]: 'Samoa Amerikana',\n        [LocaleCode.Italian]: 'Samoa Americane',\n        [LocaleCode.Japanese]: '\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2',\n        [LocaleCode.Javanese]: 'Samoa Amerika',\n        [LocaleCode.Kannada]: '\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86',\n        [LocaleCode.Kazakh]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB',\n        [LocaleCode.Korean]: '\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544',\n        [LocaleCode.Kurdish]: 'Amerikaans Samoa',\n        [LocaleCode.Kyrgyz]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94',\n        [LocaleCode.Latin]: 'Samoa Amerikana',\n        [LocaleCode.Latvian]: 'Amerikas Samoa',\n        [LocaleCode.Lithuanian]: 'Amerikos Samoa',\n        [LocaleCode.Luxembourgish]: 'Amerikaans Samoa',\n        [LocaleCode.Macedonian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Malagasy]: 'Samoa Amerika',\n        [LocaleCode.Malay]: 'Amerika Samo',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06',\n        [LocaleCode.Maltese]: 'Samoa Amerika',\n        [LocaleCode.Maori]: 'Samoa Amerika',\n        [LocaleCode.Marathi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Mongolian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Nepali]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Norwegian]: 'Amerikansk Samoa',\n        [LocaleCode.Pashto]: '\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Persian]: '\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Polish]: 'Samoa Ameryka\u0144skie',\n        [LocaleCode.Portuguese]: 'Samoa Americana',\n        [LocaleCode.Punjabi]: '\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06',\n        [LocaleCode.Romanian]: 'Samoa americane',\n        [LocaleCode.Russian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Samoan]: 'Samoa Amerika',\n        [LocaleCode.Sanskrit]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Scots]: 'Amerikaans Samoa',\n        [LocaleCode.Serbian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Sesotho]: 'Amerikaans Samoa',\n        [LocaleCode.Shona]: 'Amerikaans Samoa',\n        [LocaleCode.Sindhi]: 'Amerikaans Samoa',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0',\n        [LocaleCode.Slovak]: 'Amerikaans Samoa',\n        [LocaleCode.Slovenian]: 'Amerikaans Samoa',\n        [LocaleCode.Somali]: 'Amerikaans Samoa',\n        [LocaleCode.Spanish]: 'Samoa Americana',\n        [LocaleCode.Sudanese]: 'Amerikaans Samoa',\n        [LocaleCode.Swahili]: 'Amerikaans Samoa',\n        [LocaleCode.Swedish]: 'Amerikansk Samoa',\n        [LocaleCode.Tagalog]: 'Amerikaans Samoa',\n        [LocaleCode.Tajik]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E',\n        [LocaleCode.Thai]: '\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40',\n        [LocaleCode.Turkish]: 'Amerikan Samoas\u0131',\n        [LocaleCode.Ukrainian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Vietnamese]: 'Amerikaans Samoa',\n        [LocaleCode.Welsh]: 'Amerikaans Samoa',\n        [LocaleCode.Xhosa]: 'Amerikaans Samoa',\n        [LocaleCode.Yiddish]: 'Amerikaans Samoa',\n        [LocaleCode.Yoruba]: 'Amerikaans Samoa',\n        [LocaleCode.Zulu]: 'Amerikaans Samoa',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Pago Pago',\n          total: 558000,\n        },\n      },\n      geography: {\n        area: 199,\n        region: Region.Oceania,\n        sub_region: SubRegion.Polynesia,\n      },\n      government: {\n        capital: 'Pago Pago',\n        type: 'Nonmetropolitan Territory of the US',\n      },\n    },\n  },\n  Andorra: {\n    i18n: {\n      calling_codes: [376],\n      currencies: [CurrencyCode.Euro],\n      languages: [LocaleCode.Catalan, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.EuropeAndorra],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Andorra,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF4',\n        emoji_unicode: 'U+1F1E6 U+1F1F4',\n        svg: 'https://www.countryflags.io/ad/flat/64.svg',\n      },\n      tld: ['.ad'],\n    },\n    iso: {\n      alpha2: CountryCode.Andorra,\n      alpha3: 'AND',\n      numeric: '020',\n    },\n    name: {\n      alt_spellings: ['AD', 'Principality of Andorra', \"Principat d'Andorra\"],\n      demonym: 'Andorran',\n      native: {\n        endonym: 'Andorra',\n      },\n      official: 'Principality of Andorra',\n      short: 'Andorra',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Andorra',\n        [LocaleCode.Albanian]: 'Andorra',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584',\n        [LocaleCode.Azerbaijani]: 'Andorra',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Basque]: 'Andorra',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Andora',\n        [LocaleCode.Breton]: 'Andorra',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038',\n        [LocaleCode.Catalan]: 'Andorra',\n        [LocaleCode.Chinese]: '\u5B89\u9053\u5C14',\n        [LocaleCode.Croatian]: 'Andora',\n        [LocaleCode.Czech]: 'Andorra',\n        [LocaleCode.Danish]: 'Andorra',\n        [LocaleCode.Dutch]: 'Andorra',\n        [LocaleCode.English]: 'Andorra',\n        [LocaleCode.Esperanto]: 'Andora',\n        [LocaleCode.Estonian]: 'Andorra',\n        [LocaleCode.Finnish]: 'Andorra',\n        [LocaleCode.French]: 'Andorra',\n        [LocaleCode.Frisian]: 'Andorra',\n        [LocaleCode.Galician]: 'Andorra',\n        [LocaleCode.Georgian]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.German]: 'Andorra',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B4\u03CC\u03C1\u03B1',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Hungarian]: 'Andorra',\n        [LocaleCode.Icelandic]: 'Andorra',\n        [LocaleCode.Igbo]: 'Andorra',\n        [LocaleCode.Indonesian]: 'Andorra',\n        [LocaleCode.Irish]: 'Andorra',\n        [LocaleCode.Italian]: 'Andorra',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30C9\u30E9',\n        [LocaleCode.Javanese]: 'Andorra',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6',\n        [LocaleCode.Korean]: '\uC548\uB3C4\uB77C',\n        [LocaleCode.Kurdish]: 'Andorra',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2',\n        [LocaleCode.Latin]: 'Andorra',\n        [LocaleCode.Latvian]: 'Andora',\n        [LocaleCode.Lithuanian]: 'Andora',\n        [LocaleCode.Luxembourgish]: 'Andorra',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Malagasy]: 'Andorra',\n        [LocaleCode.Malay]: 'Andorra',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D',\n        [LocaleCode.Maltese]: 'Andorra',\n        [LocaleCode.Maori]: 'Andorra',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Norwegian]: 'Andorra',\n        [LocaleCode.Pashto]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Polish]: 'Andora',\n        [LocaleCode.Portuguese]: 'Andorra',\n        [LocaleCode.Punjabi]: '\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E',\n        [LocaleCode.Romanian]: 'Andorra',\n        [LocaleCode.Russian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Samoan]: 'Andorra',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Scots]: 'Andorra',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Sesotho]: 'Andorra',\n        [LocaleCode.Shona]: 'Andorra',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DAF\u0DDA',\n        [LocaleCode.Slovak]: 'Andorra',\n        [LocaleCode.Slovenian]: 'Andora',\n        [LocaleCode.Somali]: 'Andorra',\n        [LocaleCode.Spanish]: 'Andorra',\n        [LocaleCode.Sudanese]: 'Andorra',\n        [LocaleCode.Swahili]: 'Andorra',\n        [LocaleCode.Swedish]: 'Andorra',\n        [LocaleCode.Tagalog]: 'Andorra',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Andora',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Urdu]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Vietnamese]: 'Andorra',\n        [LocaleCode.Welsh]: 'Andorra',\n        [LocaleCode.Xhosa]: 'Andorra',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Yoruba]: 'Andorra',\n        [LocaleCode.Zulu]: 'Andorra',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Andorra la Vella',\n          total: 78000,\n        },\n      },\n      geography: {\n        area: 468,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Andorra la Vella',\n        type: 'Constitutional Monarchy',\n      },\n    },\n  },\n  Angola: {\n    i18n: {\n      calling_codes: [244],\n      currencies: [CurrencyCode.AngolaKwanza],\n      languages: [\n        LocaleCode.Portuguese,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Italian,\n        LocaleCode.German,\n        LocaleCode.English,\n      ],\n      tz: {\n        offsets: [\n          TimezoneOffset.UTC_0,\n          TimezoneOffset.UTC_PLUS_1,\n          TimezoneOffset.UTC_PLUS_2,\n        ],\n        regions: [TimezoneRegions.AfricaLuanda],\n        timezones: [Timezones.WestAfricaTime],\n      },\n    },\n    id: CountryCode.Angola,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ao/flat/64.svg',\n      },\n      tld: ['.ao'],\n    },\n    iso: {\n      alpha2: CountryCode.Angola,\n      alpha3: 'AGO',\n      numeric: '024',\n    },\n    name: {\n      alt_spellings: ['AO', 'Rep\u00FAblica de Angola', '\u0281\u025Bpublika de an'],\n      demonym: 'Angolan',\n      native: {\n        endonym: 'Angola',\n      },\n      official: 'Republic of Angola',\n      short: 'Angola',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Angola',\n        [LocaleCode.Albanian]: 'Ang\u00F2la',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u130E\u120A\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561',\n        [LocaleCode.Azerbaijani]: 'Ang\u0259l',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Basque]: 'Angola',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09B2\u09BE',\n        [LocaleCode.Berber]: 'Angola',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n        [LocaleCode.Bosnian]: 'Angola',\n        [LocaleCode.Breton]: 'Angola',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angola',\n        [LocaleCode.Chinese]: '\u5B89\u54E5\u62C9',\n        [LocaleCode.Croatian]: 'Angola',\n        [LocaleCode.Czech]: 'Angola',\n        [LocaleCode.Danish]: 'Angola',\n        [LocaleCode.Dutch]: 'Angola',\n        [LocaleCode.English]: 'Angola',\n        [LocaleCode.Esperanto]: 'Angolo',\n        [LocaleCode.Estonian]: 'Angola',\n        [LocaleCode.Finnish]: 'Angola',\n        [LocaleCode.French]: 'Angola',\n        [LocaleCode.Frisian]: 'Angola',\n        [LocaleCode.Galician]: 'Angola',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0',\n        [LocaleCode.German]: 'Angola',\n        [LocaleCode.Greenlandic]: 'Angola',\n        [LocaleCode.Greek]: '\u0391\u03B3\u03BA\u03CC\u03BB\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Angola',\n        [LocaleCode.Hausa]: 'Angola',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Angola',\n        [LocaleCode.Icelandic]: 'Angola',\n        [LocaleCode.Igbo]: 'Angola',\n        [LocaleCode.Indonesian]: 'Angola',\n        [LocaleCode.Irish]: 'Angola',\n        [LocaleCode.Italian]: 'Angola',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30B4\u30E9',\n        [LocaleCode.Javanese]: 'Anggol',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F',\n        [LocaleCode.Korean]: '\uC559\uACE8\uB77C',\n        [LocaleCode.Kurdish]: 'Angola',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2',\n        [LocaleCode.Latin]: 'Angola',\n        [LocaleCode.Latvian]: 'Angola',\n        [LocaleCode.Lithuanian]: 'Angola',\n        [LocaleCode.Luxembourgish]: 'Angola',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Malagasy]: 'Angola',\n        [LocaleCode.Malay]: 'Angola',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E',\n        [LocaleCode.Maltese]: 'Angola',\n        [LocaleCode.Maori]: 'Angola',\n        [LocaleCode.Marathi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Angola',\n        [LocaleCode.Pashto]: '\u0627\u0646\u06AB\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Angola',\n        [LocaleCode.Portuguese]: 'Angola',\n        [LocaleCode.Punjabi]: '\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Angole',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Samoan]: 'Angola',\n        [LocaleCode.Sanskrit]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Scots]: 'Angola',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Sesotho]: 'Angola',\n        [LocaleCode.Shona]: 'Angola',\n        [LocaleCode.Sindhi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Angola',\n        [LocaleCode.Slovenian]: 'Angola',\n        [LocaleCode.Somali]: 'Angola',\n        [LocaleCode.Spanish]: 'Angola',\n        [LocaleCode.Sudanese]: 'Angola',\n        [LocaleCode.Swahili]: 'Angola',\n        [LocaleCode.Swedish]: 'Angola',\n        [LocaleCode.Tagalog]: 'Angola',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Angola',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: 'Angola',\n        [LocaleCode.Vietnamese]: 'Angola',\n        [LocaleCode.Xhosa]: 'Angola',\n        [LocaleCode.Welsh]: 'Angola',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Yoruba]: 'Angola',\n        [LocaleCode.Zulu]: 'Angola',\n      },\n    },\n  },\n  Anguilla: {\n    i18n: {\n      calling_codes: [1264],\n      currencies: [\n        CurrencyCode.DominicaDollar,\n        CurrencyCode.EastCaribbeanDollar,\n        CurrencyCode.Euro,\n        CurrencyCode.UnitedStatesDollar,\n        CurrencyCode.BritishPound,\n      ],\n      languages: [LocaleCode.English, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_4],\n        regions: [TimezoneRegions.AmericaAnguilla],\n        timezones: [Timezones.AtlanticStandardTime],\n      },\n    },\n    id: CountryCode.Anguilla,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ai/flat/64.svg',\n      },\n      tld: ['.ai'],\n    },\n    iso: {\n      alpha2: CountryCode.Anguilla,\n      alpha3: 'AIA',\n      numeric: '660',\n    },\n    name: {\n      alt_spellings: ['AI'],\n      demonym: 'Anguillian',\n      native: {\n        endonym: 'Anguilla',\n      },\n      official: 'Anguilla',\n      short: 'Anguilla',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Anguilla',\n        [LocaleCode.Albanian]: 'Anguilla',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1309\u120B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0531\u0576\u0563\u056B\u056C\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Basque]: 'Angila',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Angila',\n        [LocaleCode.Breton]: 'Angila',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angilla',\n        [LocaleCode.Chinese]: '\u5B89\u572D\u62C9',\n        [LocaleCode.Croatian]: 'Angila',\n        [LocaleCode.Czech]: 'Anguilla',\n        [LocaleCode.Danish]: 'Anguilla',\n        [LocaleCode.Dutch]: 'Anguilla',\n        [LocaleCode.English]: 'Anguilla',\n        [LocaleCode.Esperanto]: 'Angila',\n        [LocaleCode.Estonian]: 'Anguilla',\n        [LocaleCode.Finnish]: 'Anguilla',\n        [LocaleCode.French]: 'Anguilla',\n        [LocaleCode.Frisian]: 'Angila',\n        [LocaleCode.Galician]: 'Anguilla',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0',\n        [LocaleCode.German]: 'Anguilla',\n        [LocaleCode.Greenlandic]: 'Anguilla',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Anguilla',\n        [LocaleCode.Hausa]: 'Anguilla',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Anguilla',\n        [LocaleCode.Icelandic]: 'Anguilla',\n        [LocaleCode.Igbo]: 'Anguilla',\n        [LocaleCode.Indonesian]: 'Anguilla',\n        [LocaleCode.Irish]: 'Anguilla',\n        [LocaleCode.Italian]: 'Anguilla',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30AE\u30E9',\n        [LocaleCode.Javanese]: 'Anguilla',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798',\n        [LocaleCode.Korean]: '\uC575\uADC8\uB77C',\n        [LocaleCode.Kurdish]: 'Anguilla',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3',\n        [LocaleCode.Latin]: 'Anguilla',\n        [LocaleCode.Latvian]: 'Anguilla',\n        [LocaleCode.Lithuanian]: 'Anguilla',\n        [LocaleCode.Luxembourgish]: 'Angilla',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Malagasy]: 'Angila',\n        [LocaleCode.Malay]: 'Anguilla',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E',\n        [LocaleCode.Maltese]: 'Anguilla',\n        [LocaleCode.Maori]: 'Anguilla',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Anguilla',\n        [LocaleCode.Pashto]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Anguilla',\n        [LocaleCode.Portuguese]: 'Anguilla',\n        [LocaleCode.Punjabi]: '\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Anguilla',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Samoan]: 'Anguilla',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Scots]: 'Anguilla',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Sesotho]: 'Anguilla',\n        [LocaleCode.Shona]: 'Anguilla',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Anguilla',\n        [LocaleCode.Slovenian]: 'Anguilla',\n        [LocaleCode.Somali]: 'Anguilla',\n        [LocaleCode.Spanish]: 'Anguilla',\n        [LocaleCode.Sudanese]: 'Anguilla',\n        [LocaleCode.Swahili]: 'Anguilla',\n        [LocaleCode.Swedish]: 'Anguilla',\n        [LocaleCode.Tagalog]: 'Anguilla',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Turkish]: 'Anguilla',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Urdu]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Vietnamese]: 'Anguilla',\n        [LocaleCode.Welsh]: 'Anguilla',\n        [LocaleCode.Xhosa]: 'Anguilla',\n        [LocaleCode.Yiddish]: 'Anguilla',\n        [LocaleCode.Yoruba]: 'Anguilla',\n        [LocaleCode.Zulu]: 'Anguilla',\n      },\n    },\n  },\n  Antarctica: {\n    i18n: {\n      calling_codes: [672],\n      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],\n      languages: [\n        LocaleCode.English,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Portuguese,\n        LocaleCode.Italian,\n        LocaleCode.Dutch,\n        LocaleCode.German,\n        LocaleCode.Swedish,\n        LocaleCode.Norwegian,\n        LocaleCode.Danish,\n        LocaleCode.Finnish,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [\n          TimezoneRegions.AntarcticaCasey,\n          TimezoneRegions.AntarcticaDavis,\n          TimezoneRegions.AntarcticaMcMurdo,\n          TimezoneRegions.AntarcticaPalmer,\n          TimezoneRegions.AntarcticaRothera,\n        ],\n        timezones: [\n          Timezones.AtlanticStandardTime,\n          Timezones.CentralTime,\n          Timezones.EasternTime,\n          Timezones.AtlanticStandardTime,\n          Timezones.AzoresStandardTime,\n          Timezones.NewfoundlandStandardTime,\n        ],\n      },\n    },\n    id: CountryCode.Antarctica,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF6',\n        emoji_unicode: 'U+1F1E6 U+1F1F6',\n        svg: 'https://www.countryflags.io/aq/flat/64.svg',\n      },\n      tld: ['.aq'],\n    },\n    iso: {\n      alpha2: CountryCode.Antarctica,\n      alpha3: 'ATA',\n      numeric: '010',\n    },\n    name: {\n      alt_spellings: ['AQ'],\n      demonym: 'Antarctican',\n      native: {\n        endonym: 'Antarctica',\n      },\n      official: 'Antarctica',\n      short: 'Antarctica',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Antarctica',\n        [LocaleCode.Albanian]: 'Antarktika',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1272\u120D\u12AB\u1293',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Basque]: 'Antarktika',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0',\n        [LocaleCode.Berber]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Bosnian]: 'Antarktika',\n        [LocaleCode.Breton]: 'Antarktika',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038',\n        [LocaleCode.Catalan]: 'Ant\u00E0rtida',\n        [LocaleCode.Chinese]: '\u5357\u6781\u6D32',\n        [LocaleCode.Croatian]: 'Antarktika',\n        [LocaleCode.Czech]: 'Antarktida',\n        [LocaleCode.Danish]: 'Antarktis',\n        [LocaleCode.Dutch]: 'Antarctica',\n        [LocaleCode.English]: 'Antarctica',\n        [LocaleCode.Esperanto]: 'Antarktika',\n        [LocaleCode.Estonian]: 'Antarktika',\n        [LocaleCode.Finnish]: 'Antarktis',\n        [LocaleCode.French]: 'Antarctica',\n        [LocaleCode.Frisian]: 'Antarktis',\n        [LocaleCode.Galician]: 'Ant\u00E1rtida',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0',\n        [LocaleCode.German]: 'Antarktis',\n        [LocaleCode.Greenlandic]: 'Antarktis',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE',\n        [LocaleCode.Gujarati]: '\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0',\n        [LocaleCode.Haitian]: 'Antarctica',\n        [LocaleCode.Hausa]: 'Antarktika',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930',\n        [LocaleCode.Hungarian]: 'Antarktika',\n        [LocaleCode.Icelandic]: 'Antarktis',\n        [LocaleCode.Igbo]: 'Antarktika',\n        [LocaleCode.Indonesian]: 'Antarktika',\n        [LocaleCode.Irish]: 'Antarktika',\n        [LocaleCode.Italian]: 'Antartide',\n        [LocaleCode.Japanese]: '\u5357\u6975',\n        [LocaleCode.Javanese]: 'Antarktika',\n        [LocaleCode.Kannada]: '\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799',\n        [LocaleCode.Korean]: '\uC564\uD2F0\uCE74\uD1A0\uB2C9',\n        [LocaleCode.Kurdish]: 'Antarktika',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0',\n        [LocaleCode.Latin]: 'Antarctica',\n        [LocaleCode.Latvian]: 'Antarktika',\n        [LocaleCode.Lithuanian]: 'Antarktis',\n        [LocaleCode.Luxembourgish]: 'Antarktis',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Malagasy]: 'Antarctica',\n        [LocaleCode.Malay]: 'Antarktika',\n        [LocaleCode.Malayalam]: '\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F',\n        [LocaleCode.Maltese]: 'Antarktika',\n        [LocaleCode.Maori]: 'Antarktika',\n        [LocaleCode.Marathi]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Norwegian]: 'Antarktis',\n        [LocaleCode.Pashto]: '\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Polish]: 'Antarktyka',\n        [LocaleCode.Portuguese]: 'Ant\u00E1rtida',\n        [LocaleCode.Punjabi]: '\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E',\n        [LocaleCode.Romanian]: 'Antarctica',\n        [LocaleCode.Russian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Samoan]: 'Antarktika',\n        [LocaleCode.Sanskrit]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Scots]: 'Antarktika',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Sesotho]: 'Antarktika',\n        [LocaleCode.Shona]: 'Antarktika',\n        [LocaleCode.Sindhi]: 'Antarktika',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Antarktika',\n        [LocaleCode.Slovenian]: 'Antarktika',\n        [LocaleCode.Somali]: 'Antarktika',\n        [LocaleCode.Spanish]: 'Ant\u00E1rtida',\n        [LocaleCode.Sudanese]: 'Antarktika',\n        [LocaleCode.Swahili]: 'Antarktika',\n        [LocaleCode.Swedish]: 'Antarktis',\n        [LocaleCode.Tagalog]: 'Antarktika',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E',\n        [LocaleCode.Thai]: '\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72',\n        [LocaleCode.Turkish]: 'Antarktika',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Vietnamese]: '\u0110\u1EA5t Antarktik',\n        [LocaleCode.Welsh]: 'Antarktika',\n        [LocaleCode.Xhosa]: 'Antarktika',\n        [LocaleCode.Yiddish]: 'Antarktika',\n        [LocaleCode.Yoruba]: 'Antarktika',\n        [LocaleCode.Zulu]: 'Antarktika',\n      },\n    },\n  },\n  Armenia: {\n    i18n: {\n      calling_codes: [374],\n      currencies: [CurrencyCode.ArmeniaDram],\n      languages: [LocaleCode.Armenian],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4],\n        regions: [TimezoneRegions.AsiaJakarta],\n        timezones: [Timezones.ArmeniaTime],\n      },\n    },\n    id: CountryCode.Armenia,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF2',\n        emoji_unicode: 'U+1F1E6 U+1F1F2',\n        svg: 'https://www.countryflags.io/am/flat/64.svg',\n      },\n      tld: ['.am'],\n    },\n    iso: {\n      alpha2: CountryCode.Armenia,\n      alpha3: 'ARM',\n      numeric: '051',\n    },\n    name: {\n      alt_spellings: ['AM', 'Hayastan', 'Republic of Armenia', '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576'],\n      demonym: 'Armenian',\n      native: {\n        endonym: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n      },\n      official: 'Republic of Armenia',\n      short: 'Armenia',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Armeni\u00EB',\n        [LocaleCode.Albanian]: 'Armenia',\n        [LocaleCode.Amharic]: '\u12A0\u121B\u122D\u129B',\n        [LocaleCode.Arabic]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Arm\u00E9nia',\n        [LocaleCode.Belarusian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF',\n        [LocaleCode.Berber]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42',\n        [LocaleCode.Bosnian]: 'Armenija',\n        [LocaleCode.Breton]: 'Armeni\u00EB',\n        [LocaleCode.Bulgarian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1010\u102D\u1010\u1039',\n        [LocaleCode.Catalan]: 'Arm\u00E8nia',\n        [LocaleCode.Chinese]: '\u4E9A\u7F8E\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Armenija',\n        [LocaleCode.Czech]: 'Arm\u00E9nie',\n        [LocaleCode.Danish]: 'Armenien',\n        [LocaleCode.Dutch]: 'Armeni\u00EB',\n        [LocaleCode.English]: 'Armenia',\n        [LocaleCode.Esperanto]: 'Armenia',\n        [LocaleCode.Estonian]: 'Armeenia',\n        [LocaleCode.Finnish]: 'Armenia',\n        [LocaleCode.French]: 'Armenia',\n        [LocaleCode.Frisian]: 'Armeenia',\n        [LocaleCode.Galician]: 'Arm\u00E9nia',\n        [LocaleCode.Georgian]: '\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8',\n        [LocaleCode.German]: 'Armenien',\n        [LocaleCode.Greenlandic]: 'Armenia',\n        [LocaleCode.Greek]: '\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF',\n        [LocaleCode.Haitian]: 'Armenia',\n        [LocaleCode.Hausa]: 'Armenia',\n        [LocaleCode.Hebrew]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: '\u00D6rm\u00E9nyorsz\u00E1g',\n        [LocaleCode.Icelandic]: 'Armenia',\n        [LocaleCode.Igbo]: 'Armenia',\n        [LocaleCode.Indonesian]: 'Armenia',\n        [LocaleCode.Irish]: 'Armenia',\n        [LocaleCode.Italian]: 'Armenia',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30E1\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Armenia',\n        [LocaleCode.Kannada]: '\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8',\n        [LocaleCode.Korean]: '\uC544\uB974\uBA54\uB2C8\uC544',\n        [LocaleCode.Kurdish]: 'Armenia',\n        [LocaleCode.Kyrgyz]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2',\n        [LocaleCode.Latin]: 'Armenia',\n        [LocaleCode.Latvian]: 'Armeenia',\n        [LocaleCode.Lithuanian]: 'Arm\u0117nija',\n        [LocaleCode.Luxembourgish]: 'Armenien',\n        [LocaleCode.Macedonian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Armenia',\n        [LocaleCode.Malay]: 'Armenia',\n        [LocaleCode.Malayalam]: '\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F',\n        [LocaleCode.Maltese]: 'Armenia',\n        [LocaleCode.Maori]: 'Armenia',\n        [LocaleCode.Marathi]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Mongolian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Norwegian]: 'Armenia',\n        [LocaleCode.Pashto]: '\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627',\n        [LocaleCode.Persian]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Armenia',\n        [LocaleCode.Portuguese]: 'Armenia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40',\n        [LocaleCode.Romanian]: 'Armenia',\n        [LocaleCode.Russian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Armenia',\n        [LocaleCode.Sanskrit]: 'Armenia',\n        [LocaleCode.Scots]: 'Armenia',\n        [LocaleCode.Serbian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Armenia',\n        [LocaleCode.Shona]: 'Armenia',\n        [LocaleCode.Sindhi]: 'Armenia',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2',\n        [LocaleCode.Slovak]: 'Armenia',\n        [LocaleCode.Slovenian]: 'Armenija',\n        [LocaleCode.Somali]: 'Armenia',\n        [LocaleCode.Spanish]: 'Armenia',\n        [LocaleCode.Sudanese]: 'Armenia',\n        [LocaleCode.Swahili]: 'Armenia',\n        [LocaleCode.Swedish]: 'Armenien',\n        [LocaleCode.Tagalog]: 'Armenia',\n        [LocaleCode.Tajik]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D',\n        [LocaleCode.Turkish]: 'Ermenistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0440\u043C\u0435\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Armenia',\n        [LocaleCode.Welsh]: 'Armenia',\n        [LocaleCode.Xhosa]: 'Armenia',\n        [LocaleCode.Yiddish]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Armenia',\n        [LocaleCode.Zulu]: 'Armenia',\n      },\n    },\n  },\n\n  SomeCountry: {\n    i18n: {\n      calling_codes: [],\n      currencies: [],\n      languages: [],\n      tz: {\n        offsets: [],\n        regions: [],\n        timezones: [],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '',\n        emoji_unicode: '',\n        svg: '',\n      },\n      tld: [],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: '',\n      numeric: '',\n    },\n    name: {\n      alt_spellings: [],\n      demonym: '',\n      native: {\n        endonym: '',\n      },\n      official: '',\n      short: '',\n      translations: {\n        [LocaleCode.Afrikaans]: '',\n        [LocaleCode.Albanian]: '',\n        [LocaleCode.Amharic]: '',\n        [LocaleCode.Arabic]: '',\n        [LocaleCode.Armenian]: '',\n        [LocaleCode.Azerbaijani]: '',\n        [LocaleCode.Bashkir]: '',\n        [LocaleCode.Basque]: '',\n        [LocaleCode.Belarusian]: '',\n        [LocaleCode.Bengali]: '',\n        [LocaleCode.Berber]: '',\n        [LocaleCode.Bhutani]: '',\n        [LocaleCode.Bosnian]: '',\n        [LocaleCode.Breton]: '',\n        [LocaleCode.Bulgarian]: '',\n        [LocaleCode.Burmese]: '',\n        [LocaleCode.Catalan]: '',\n        [LocaleCode.Chinese]: '',\n        [LocaleCode.Croatian]: '',\n        [LocaleCode.Czech]: '',\n        [LocaleCode.Danish]: '',\n        [LocaleCode.Dutch]: '',\n        [LocaleCode.English]: '',\n        [LocaleCode.Esperanto]: '',\n        [LocaleCode.Estonian]: '',\n        [LocaleCode.Finnish]: '',\n        [LocaleCode.French]: '',\n        [LocaleCode.Frisian]: '',\n        [LocaleCode.Galician]: '',\n        [LocaleCode.Georgian]: '',\n        [LocaleCode.German]: '',\n        [LocaleCode.Greenlandic]: '',\n        [LocaleCode.Greek]: '',\n        [LocaleCode.Gujarati]: '',\n        [LocaleCode.Haitian]: '',\n        [LocaleCode.Hausa]: '',\n        [LocaleCode.Hebrew]: '',\n        [LocaleCode.Hindi]: '',\n        [LocaleCode.Hungarian]: '',\n        [LocaleCode.Icelandic]: '',\n        [LocaleCode.Igbo]: '',\n        [LocaleCode.Indonesian]: '',\n        [LocaleCode.Irish]: '',\n        [LocaleCode.Italian]: '',\n        [LocaleCode.Japanese]: '',\n        [LocaleCode.Javanese]: '',\n        [LocaleCode.Kannada]: '',\n        [LocaleCode.Kazakh]: '',\n        [LocaleCode.Khmer]: '',\n        [LocaleCode.Korean]: '',\n        [LocaleCode.Kurdish]: '',\n        [LocaleCode.Kyrgyz]: '',\n        [LocaleCode.Lao]: '',\n        [LocaleCode.Latin]: '',\n        [LocaleCode.Latvian]: '',\n        [LocaleCode.Lithuanian]: '',\n        [LocaleCode.Luxembourgish]: '',\n        [LocaleCode.Macedonian]: '',\n        [LocaleCode.Malagasy]: '',\n        [LocaleCode.Malay]: '',\n        [LocaleCode.Malayalam]: '',\n        [LocaleCode.Maltese]: '',\n        [LocaleCode.Maori]: '',\n        [LocaleCode.Marathi]: '',\n        [LocaleCode.Mongolian]: '',\n        [LocaleCode.Nepali]: '',\n        [LocaleCode.Norwegian]: '',\n        [LocaleCode.Pashto]: '',\n        [LocaleCode.Persian]: '',\n        [LocaleCode.Polish]: '',\n        [LocaleCode.Portuguese]: '',\n        [LocaleCode.Punjabi]: '',\n        [LocaleCode.Romanian]: '',\n        [LocaleCode.Russian]: '',\n        [LocaleCode.Samoan]: '',\n        [LocaleCode.Sanskrit]: '',\n        [LocaleCode.Scots]: '',\n        [LocaleCode.Serbian]: '',\n        [LocaleCode.Sesotho]: '',\n        [LocaleCode.Shona]: '',\n        [LocaleCode.Sindhi]: '',\n        [LocaleCode.Sinhala]: '',\n        [LocaleCode.Slovak]: '',\n        [LocaleCode.Slovenian]: '',\n        [LocaleCode.Somali]: '',\n        [LocaleCode.Spanish]: '',\n        [LocaleCode.Sudanese]: '',\n        [LocaleCode.Swahili]: '',\n        [LocaleCode.Swedish]: '',\n        [LocaleCode.Tagalog]: '',\n        [LocaleCode.Tajik]: '',\n        [LocaleCode.Tamil]: '',\n        [LocaleCode.Tatar]: '',\n        [LocaleCode.Telugu]: '',\n        [LocaleCode.Thai]: '',\n        [LocaleCode.Tibetan]: '',\n        [LocaleCode.Turkish]: '',\n        [LocaleCode.Ukrainian]: '',\n        [LocaleCode.Urdu]: '',\n        [LocaleCode.Uzbek]: '',\n        [LocaleCode.Vietnamese]: '',\n        [LocaleCode.Welsh]: '',\n        [LocaleCode.Xhosa]: '',\n        [LocaleCode.Yiddish]: '',\n        [LocaleCode.Yoruba]: '',\n        [LocaleCode.Zulu]: '',\n      },\n    },\n  },\n};\n", "import { LanguageCode } from '../language/index.js';\nimport { LocaleCode } from './index.js';\nimport { Locale } from '.';\nimport { CountryCode } from './country.js';\n\nexport const Afrikaans: Locale = {\n  id: LocaleCode.Afrikaans,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans',\n  native_name: 'Afrikaans',\n  rtl: false,\n};\n\nexport const AfrikaansSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.AfrikaansSouthAfrica,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans (South Africa)',\n  native_name: 'Afrikaans (Suid-Afrika)',\n  rtl: false,\n};\n\nexport const Albanian: Locale = {\n  id: LocaleCode.Albanian,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian',\n  native_name: 'Shqip',\n  rtl: false,\n};\n\nexport const AlbanianAlbania: Locale = {\n  country: {\n    code: CountryCode.Albania,\n    name: 'Albania',\n    native: 'Shqip\u00EBria',\n  },\n  id: LocaleCode.AlbanianAlbania,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian (Albania)',\n  native_name: 'Shqip (Shqip\u00EBria)',\n  rtl: false,\n};\n\nexport const Amharic: Locale = {\n  id: LocaleCode.Amharic,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic',\n  native_name: '\u12A0\u121B\u122D\u129B',\n  rtl: false,\n};\n\nexport const AmharicEthiopia: Locale = {\n  country: {\n    code: CountryCode.Ethiopia,\n    name: 'Ethiopia',\n    native: '\u12A2\u1275\u12EE\u1335\u12EB',\n  },\n  id: LocaleCode.AmharicEthiopia,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic (Ethiopia)',\n  native_name: '\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)',\n  rtl: false,\n};\n\nexport const Arabic: Locale = {\n  id: LocaleCode.Arabic,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  rtl: true,\n};\n\nexport const ArabicAlgeria: Locale = {\n  country: {\n    code: CountryCode.Algeria,\n    name: 'Algeria',\n    native: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n  },\n  id: LocaleCode.ArabicAlgeria,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Algeria)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)',\n  rtl: true,\n};\n\nexport const ArabicBahrain: Locale = {\n  country: {\n    code: CountryCode.Bahrain,\n    name: 'Bahrain',\n    native: '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',\n  },\n  id: LocaleCode.ArabicBahrain,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Bahrain)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)',\n  rtl: true,\n};\n\nexport const ArabicEgypt: Locale = {\n  country: {\n    code: CountryCode.Egypt,\n    name: 'Egypt',\n    native: '\u0645\u0635\u0631',\n  },\n  id: LocaleCode.ArabicEgypt,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Egypt)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)',\n  rtl: true,\n};\n\nexport const ArabicIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.ArabicIraq,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Iraq)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: true,\n};\n\nexport const ArabicJordan: Locale = {\n  country: {\n    code: CountryCode.Jordan,\n    name: 'Jordan',\n    native: '\u0627\u0644\u0623\u0631\u062F\u0646',\n  },\n  id: LocaleCode.ArabicJordan,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Jordan)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)',\n  rtl: true,\n};\n\nexport const ArabicKuwait: Locale = {\n  country: {\n    code: CountryCode.Kuwait,\n    name: 'Kuwait',\n    native: '\u0627\u0644\u0643\u0648\u064A\u062A',\n  },\n\n  id: LocaleCode.ArabicKuwait,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Kuwait)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)',\n  rtl: true,\n};\n\nexport const ArabicLebanon: Locale = {\n  country: {\n    code: CountryCode.Lebanon,\n    name: 'Lebanon',\n    native: '\u0644\u0628\u0646\u0627\u0646',\n  },\n  id: LocaleCode.ArabicLebanon,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Lebanon)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicLibya: Locale = {\n  country: {\n    code: CountryCode.Libya,\n    name: 'Libya',\n    native: '\u0644\u064A\u0628\u064A\u0627',\n  },\n  id: LocaleCode.ArabicLibya,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Libya)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)',\n  rtl: true,\n};\n\nexport const ArabicMorocco: Locale = {\n  country: {\n    code: CountryCode.Morocco,\n    name: 'Morocco',\n    native: '\u0627\u0644\u0645\u063A\u0631\u0628',\n  },\n  id: LocaleCode.ArabicMorocco,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Morocco)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)',\n  rtl: true,\n};\n\nexport const ArabicOman: Locale = {\n  country: {\n    code: CountryCode.Oman,\n    name: 'Oman',\n    native: '\u0639\u0645\u0627\u0646',\n  },\n  id: LocaleCode.ArabicOman,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Oman)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicQatar: Locale = {\n  country: {\n    code: CountryCode.Qatar,\n    name: 'Qatar',\n    native: '\u0642\u0637\u0631',\n  },\n  id: LocaleCode.ArabicQatar,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Qatar)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)',\n  rtl: true,\n};\n\nexport const ArabicSaudiArabia: Locale = {\n  country: {\n    code: CountryCode.SaudiArabia,\n    name: 'Saudi Arabia',\n    native: '\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n  },\n  id: LocaleCode.ArabicSaudiArabia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Saudi Arabia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)',\n  rtl: true,\n};\n\nexport const ArabicTunisia: Locale = {\n  country: {\n    code: CountryCode.Tunisia,\n    name: 'Tunisia',\n    native: '\u062A\u0648\u0646\u0633',\n  },\n  id: LocaleCode.ArabicTunisia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Tunisia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)',\n  rtl: true,\n};\n\nexport const ArabicUnitedArabEmirates: Locale = {\n  country: {\n    code: CountryCode.UnitedArabEmirates,\n    name: 'United Arab Emirates',\n    native: '\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n  },\n  id: LocaleCode.ArabicUnitedArabEmirates,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (United Arab Emirates)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)',\n  rtl: true,\n};\n\nexport const ArabicYemen: Locale = {\n  country: {\n    code: CountryCode.Yemen,\n    name: 'Yemen',\n    native: '\u0627\u0644\u064A\u0645\u0646',\n  },\n  id: LocaleCode.ArabicYemen,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Yemen)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)',\n  rtl: true,\n};\n\nexport const Armenian: Locale = {\n  id: LocaleCode.Armenian,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian',\n  native_name: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  rtl: false,\n};\n\nexport const ArmenianArmenia: Locale = {\n  country: { code: CountryCode.Armenia, name: 'Armenia', native: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576' },\n  id: LocaleCode.ArmenianArmenia,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian (Armenia)',\n  native_name: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)',\n  rtl: false,\n};\n\nexport const Azerbaijani = {\n  id: LocaleCode.Azerbaijani,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azeribaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri',\n  native_name: 'Az\u0259rbaycan',\n  rtl: false,\n};\n\nexport const AzerbaijaniAzerbaijan: Locale = {\n  country: {\n    code: CountryCode.Azerbaijan,\n    name: 'Azerbaijan',\n    native: 'Az\u0259rbaycan',\n  },\n  id: LocaleCode.AzerbaijaniAzerbaijan,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azerbaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri (Azerbaijan)',\n  native_name: 'Az\u0259rbaycan (Az\u0259rbaycan)',\n  rtl: false,\n};\n\nexport const Basque: Locale = {\n  id: LocaleCode.Basque,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque',\n  native_name: 'Euskara',\n  rtl: false,\n};\n\nexport const BasqueSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.BasqueSpain,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque (Spain)',\n  native_name: 'Euskara (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Belarusian: Locale = {\n  id: LocaleCode.Belarusian,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian',\n  native_name: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  rtl: false,\n};\n\nexport const BelarusianBelarus: Locale = {\n  country: {\n    code: CountryCode.Belarus,\n    name: 'Belarus',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C',\n  },\n  id: LocaleCode.BelarusianBelarus,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian (Belarus)',\n  native_name: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)',\n  rtl: false,\n};\n\nexport const Bengali: Locale = {\n  id: LocaleCode.Bengali,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  rtl: false,\n};\n\nexport const BengaliBangladesh: Locale = {\n  country: {\n    code: CountryCode.Bangladesh,\n    name: 'Bangladesh',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6',\n  },\n  id: LocaleCode.BengaliBangladesh,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali (Bangladesh)',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)',\n  rtl: false,\n};\n\nexport const Bhutani: Locale = {\n  id: LocaleCode.Bhutani,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const BhutaniBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n  },\n  id: LocaleCode.BhutaniBhutan,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)',\n  rtl: false,\n};\n\nexport const Bulgarian: Locale = {\n  id: LocaleCode.Bulgarian,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian',\n  native_name: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const BulgarianBulgaria: Locale = {\n  country: {\n    code: CountryCode.Bulgaria,\n    name: 'Bulgaria',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F',\n  },\n  id: LocaleCode.BulgarianBulgaria,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian (Bulgaria)',\n  native_name: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)',\n  rtl: false,\n};\n\nexport const Burmese: Locale = {\n  id: LocaleCode.Burmese,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese',\n  native_name: '\u1017\u1019\u102C\u1005\u102C',\n  rtl: false,\n};\n\nexport const BurmeseMyanmar: Locale = {\n  country: {\n    code: CountryCode.Myanmar,\n    name: 'Myanmar',\n    native: '\u1019\u103C\u1014\u103A\u1019\u102C',\n  },\n  id: LocaleCode.BurmeseMyanmar,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese (Myanmar)',\n  native_name: '\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)',\n  rtl: false,\n};\n\nexport const Cantonese: Locale = {\n  id: LocaleCode.Cantonese,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese',\n  native_name: '\u5EE3\u6771\u8A71',\n  rtl: false,\n};\n\nexport const CantoneseHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.CantoneseHongKong,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese (Hong Kong)',\n  native_name: '\u5EE3\u6771\u8A71 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const Catalan: Locale = {\n  id: LocaleCode.Catalan,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan',\n  native_name: 'Catal\u00E0',\n  rtl: false,\n};\n\nexport const CatalanSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.CatalanSpain,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan (Spain)',\n  native_name: 'Catal\u00E0 (Espanya)',\n  rtl: false,\n};\n\nexport const ChineseSimplified: Locale = {\n  id: LocaleCode.ChineseSimplified,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.ChineseSimplifiedChina,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/China)',\n  native_name: '\u4E2D\u6587 (\u4E2D\u56FD)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseSimplifiedHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseSimplifiedMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseSimplifiedSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const ChineseTraditional: Locale = {\n  id: LocaleCode.ChineseTraditional,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Traditional)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseTraditionalHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseTraditionalHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Hong Kong)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseTraditionalMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Macau)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseTraditionalSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Singapore)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const Croatian: Locale = {\n  id: LocaleCode.Croatian,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian',\n  native_name: 'Hrvatski',\n  rtl: false,\n};\n\nexport const CroatianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.CroatianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Bosnia and Herzegovina)',\n  native_name: 'Hrvatski (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const CroatianCroatia: Locale = {\n  country: {\n    code: CountryCode.Croatia,\n    name: 'Croatia',\n    native: 'Hrvatska',\n  },\n  id: LocaleCode.CroatianCroatia,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Croatia)',\n  native_name: 'Hrvatski (Hrvatska)',\n  rtl: false,\n};\n\nexport const Czech: Locale = {\n  id: LocaleCode.Czech,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech',\n  native_name: '\u010Ce\u0161tina',\n  rtl: false,\n};\n\nexport const CzechCzechRepublic: Locale = {\n  country: {\n    code: CountryCode.CzechRepublic,\n    name: 'Czech Republic',\n    native: '\u010Cesk\u00E1 republika',\n  },\n  id: LocaleCode.CzechCzechRepublic,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech (Czech Republic)',\n  native_name: '\u010Ce\u0161tina (\u010Cesk\u00E1 republika)',\n  rtl: false,\n};\n\nexport const Danish: Locale = {\n  id: LocaleCode.Danish,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish',\n  native_name: 'Dansk',\n  rtl: false,\n};\n\nexport const DanishDenmark: Locale = {\n  country: {\n    code: CountryCode.Denmark,\n    name: 'Denmark',\n    native: 'Danmark',\n  },\n  id: LocaleCode.DanishDenmark,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish (Denmark)',\n  native_name: 'Dansk (Danmark)',\n  rtl: false,\n};\n\nexport const Divehi: Locale = {\n  id: LocaleCode.Divehi,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  rtl: true,\n};\n\nexport const DivehiMaldives: Locale = {\n  country: {\n    code: CountryCode.Maldives,\n    name: 'Maldives',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC',\n  },\n  id: LocaleCode.DivehiMaldives,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi (Maldives)',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)',\n  rtl: true,\n};\n\nexport const Dutch: Locale = {\n  id: LocaleCode.Dutch,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch',\n  native_name: 'Nederlands',\n  rtl: false,\n};\n\nexport const DutchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.DutchBelgium,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Belgium)',\n  native_name: 'Nederlands (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const DutchNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.DutchNetherlands,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Netherlands)',\n  native_name: 'Nederlands (Nederland)',\n  rtl: false,\n};\n\nexport const English: Locale = {\n  id: LocaleCode.English,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English',\n  native_name: 'English',\n  rtl: false,\n};\n\nexport const EnglishAustralia: Locale = {\n  country: {\n    code: CountryCode.Australia,\n    name: 'Australia',\n    native: 'Australia',\n  },\n  id: LocaleCode.EnglishAustralia,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Australia)',\n  native_name: 'English (Australia)',\n  rtl: false,\n};\n\nexport const EnglishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.EnglishBelgium,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Belgium)',\n  native_name: 'English (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const EnglishCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.EnglishCanada,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Canada)',\n  native_name: 'English (Canada)',\n  rtl: false,\n};\n\nexport const EnglishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.EnglishIreland,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Ireland)',\n  native_name: 'English (\u00C9ire)',\n  rtl: false,\n};\n\nexport const EnglishJamaica: Locale = {\n  country: {\n    code: CountryCode.Jamaica,\n    name: 'Jamaica',\n    native: 'Jamaica',\n  },\n  id: LocaleCode.EnglishJamaica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Jamaica)',\n  native_name: 'English (Jamaica)',\n  rtl: false,\n};\n\nexport const EnglishNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.EnglishNewZealand,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (New Zealand)',\n  native_name: 'English (New Zealand)',\n  rtl: false,\n};\n\nexport const EnglishPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Philippines',\n  },\n  id: LocaleCode.EnglishPhilippines,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Philippines)',\n  native_name: 'English (Philippines)',\n  rtl: false,\n};\n\nexport const EnglishSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.EnglishSingapore,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Singapore)',\n  native_name: 'English (Singapore)',\n  rtl: false,\n};\n\nexport const EnglishSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.EnglishSouthAfrica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (South Africa)',\n  native_name: 'English (South Africa)',\n  rtl: false,\n};\n\nexport const EnglishTrinidadAndTobago: Locale = {\n  country: {\n    code: CountryCode.TrinidadAndTobago,\n    name: 'Trinidad and Tobago',\n    native: 'Trinidad and Tobago',\n  },\n  id: LocaleCode.EnglishTrinidadAndTobago,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Trinidad and Tobago)',\n  native_name: 'English (Trinidad and Tobago)',\n  rtl: false,\n};\n\nexport const EnglishUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.EnglishUnitedKingdom,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United Kingdom)',\n  native_name: 'English (United Kingdom)',\n  rtl: false,\n};\n\nexport const EnglishUnitedStates: Locale = {\n  country: {\n    code: CountryCode.UnitedStates,\n    name: 'United States',\n    native: 'United States',\n  },\n  id: LocaleCode.EnglishUnitedStates,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United States)',\n  native_name: 'English (United States)',\n  rtl: false,\n};\n\nexport const EnglishZimbabwe: Locale = {\n  country: {\n    code: CountryCode.Zimbabwe,\n    name: 'Zimbabwe',\n    native: 'Zimbabwe',\n  },\n  id: LocaleCode.EnglishZimbabwe,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Zimbabwe)',\n  native_name: 'English (Zimbabwe)',\n  rtl: false,\n};\n\nexport const Esperanto: Locale = {\n  id: LocaleCode.Esperanto,\n  language: {\n    code: LanguageCode.Esperanto,\n    name: 'Esperanto',\n    native: 'Esperanto',\n  },\n  name: 'Esperanto',\n  native_name: 'Esperanto',\n  rtl: false,\n};\n\nexport const Estonian: Locale = {\n  id: LocaleCode.Estonian,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian',\n  native_name: 'Eesti',\n  rtl: false,\n};\n\nexport const EstonianEstonia: Locale = {\n  country: {\n    code: CountryCode.Estonia,\n    name: 'Estonia',\n    native: 'Eesti',\n  },\n  id: LocaleCode.EstonianEstonia,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian (Estonia)',\n  native_name: 'Eesti (Eesti)',\n  rtl: false,\n};\n\nexport const Faroese: Locale = {\n  id: LocaleCode.Faroese,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese',\n  native_name: 'F\u00F8royskt',\n  rtl: false,\n};\n\nexport const FaroeseFaroeIslands: Locale = {\n  country: {\n    code: CountryCode.FaroeIslands,\n    name: 'Faroe Islands',\n    native: 'F\u00F8royar',\n  },\n  id: LocaleCode.FaroeseFaroeIslands,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese (Faroe Islands)',\n  native_name: 'F\u00F8royskt (F\u00F8royar)',\n  rtl: false,\n};\n\nexport const Farsi: Locale = {\n  id: LocaleCode.Farsi,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const FarsiIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.FarsiIran,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Filipino: Locale = {\n  id: LocaleCode.Filipino,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino',\n  native_name: 'Filipino',\n  rtl: false,\n};\n\nexport const FilipinoPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.FilipinoPhilippines,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino (Philippines)',\n  native_name: 'Filipino (Pilipinas)',\n  rtl: false,\n};\n\nexport const Finnish: Locale = {\n  id: LocaleCode.Finnish,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish',\n  native_name: 'Suomi',\n  rtl: false,\n};\n\nexport const FinnishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.FinnishFinland,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish (Finland)',\n  native_name: 'Suomi (Suomi)',\n  rtl: false,\n};\n\nexport const French: Locale = {\n  id: LocaleCode.French,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French',\n  native_name: 'Fran\u00E7ais',\n  rtl: false,\n};\n\nexport const FrenchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgique',\n  },\n  id: LocaleCode.FrenchBelgium,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Belgium)',\n  native_name: 'Fran\u00E7ais (Belgique)',\n  rtl: false,\n};\n\nexport const FrenchCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.FrenchCanada,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Canada)',\n  native_name: 'Fran\u00E7ais (Canada)',\n  rtl: false,\n};\n\nexport const FrenchFrance: Locale = {\n  country: {\n    code: CountryCode.France,\n    name: 'France',\n    native: 'France',\n  },\n  id: LocaleCode.FrenchFrance,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (France)',\n  native_name: 'Fran\u00E7ais (France)',\n  rtl: false,\n};\n\nexport const FrenchLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.FrenchLuxembourg,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Luxembourg)',\n  native_name: 'Fran\u00E7ais (Luxembourg)',\n  rtl: false,\n};\n\nexport const FrenchMonaco: Locale = {\n  country: {\n    code: CountryCode.Monaco,\n    name: 'Monaco',\n    native: 'Monaco',\n  },\n  id: LocaleCode.FrenchMonaco,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Monaco)',\n  native_name: 'Fran\u00E7ais (Monaco)',\n  rtl: false,\n};\n\nexport const FrenchReunion: Locale = {\n  country: {\n    code: CountryCode.Reunion,\n    name: 'Reunion',\n    native: 'La R\u00E9union',\n  },\n  id: LocaleCode.FrenchReunion,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Reunion)',\n  native_name: 'Fran\u00E7ais (La R\u00E9union)',\n  rtl: false,\n};\n\nexport const FrenchSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.FrenchSwitzerland,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Switzerland)',\n  native_name: 'Fran\u00E7ais (Suisse)',\n  rtl: false,\n};\n\nexport const Frisian: Locale = {\n  id: LocaleCode.Frisian,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian',\n  native_name: 'Frysk',\n  rtl: false,\n};\n\nexport const FrisianNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.FrisianNetherlands,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian (Netherlands)',\n  native_name: 'Frysk (Nederland)',\n  rtl: false,\n};\n\nexport const Galician: Locale = {\n  id: LocaleCode.Galician,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician',\n  native_name: 'Galego',\n  rtl: false,\n};\n\nexport const GalicianSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.GalicianSpain,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician (Spain)',\n  native_name: 'Galego (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Georgian: Locale = {\n  id: LocaleCode.Georgian,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  rtl: false,\n};\n\nexport const GeorgianGeorgia: Locale = {\n  country: {\n    code: CountryCode.Georgia,\n    name: 'Georgia',\n    native: '\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD',\n  },\n  id: LocaleCode.GeorgianGeorgia,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian (Georgia)',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)',\n  rtl: false,\n};\n\nexport const German: Locale = {\n  id: LocaleCode.German,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German',\n  native_name: 'Deutsch',\n  rtl: false,\n};\n\nexport const GermanAustria: Locale = {\n  country: {\n    code: CountryCode.Austria,\n    name: 'Austria',\n    native: '\u00D6sterreich',\n  },\n  id: LocaleCode.GermanAustria,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Austria)',\n  native_name: 'Deutsch (\u00D6sterreich)',\n  rtl: false,\n};\n\nexport const GermanBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.GermanBelgium,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Belgium)',\n  native_name: 'Deutsch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const GermanSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.GermanSwitzerland,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Switzerland)',\n  native_name: 'Deutsch (Suisse)',\n  rtl: false,\n};\n\nexport const GermanLiechtenstein: Locale = {\n  country: {\n    code: CountryCode.Liechtenstein,\n    name: 'Liechtenstein',\n    native: 'Liechtenstein',\n  },\n  id: LocaleCode.GermanLiechtenstein,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Liechtenstein)',\n  native_name: 'Deutsch (Liechtenstein)',\n  rtl: false,\n};\n\nexport const GermanLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.GermanLuxembourg,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Luxembourg)',\n  native_name: 'Deutsch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Greek: Locale = {\n  id: LocaleCode.Greek,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  rtl: false,\n};\n\nexport const GreekGreece: Locale = {\n  country: {\n    code: CountryCode.Greece,\n    name: 'Greece',\n    native: '\u0395\u03BB\u03BB\u03AC\u03B4\u03B1',\n  },\n  id: LocaleCode.GreekGreece,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek (Greece)',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)',\n  rtl: false,\n};\n\nexport const Greenlandic: Locale = {\n  id: LocaleCode.Greenlandic,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic',\n  native_name: 'Kalaallisut',\n  rtl: false,\n};\n\nexport const GreenlandicGreenland: Locale = {\n  country: {\n    code: CountryCode.Greenland,\n    name: 'Greenland',\n    native: 'Kalaallit Nunaat',\n  },\n  id: LocaleCode.GreenlandicGreenland,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic (Greenland)',\n  native_name: 'Kalaallisut (Kalaallit Nunaat)',\n  rtl: false,\n};\n\nexport const Gujarati: Locale = {\n  id: LocaleCode.Gujarati,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  rtl: false,\n};\n\nexport const GujaratiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.GujaratiIndia,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati (India)',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Hausa: Locale = {\n  id: LocaleCode.Hausa,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  rtl: false,\n};\n\nexport const HausaGhana: Locale = {\n  country: {\n    code: CountryCode.Ghana,\n    name: 'Ghana',\n    native: 'Ghana',\n  },\n  id: LocaleCode.HausaGhana,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Ghana)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)',\n  rtl: false,\n};\n\nexport const HausaNiger: Locale = {\n  country: {\n    code: CountryCode.Niger,\n    name: 'Niger',\n    native: 'Niger',\n  },\n  id: LocaleCode.HausaNiger,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Niger)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Niger)',\n  rtl: false,\n};\n\nexport const HausaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.HausaNigeria,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Nigeria)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)',\n  rtl: false,\n};\n\nexport const Hebrew: Locale = {\n  id: LocaleCode.Hebrew,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  },\n  name: 'Hebrew',\n  native_name: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  rtl: true,\n};\n\n// TODO: Figure this out since Github is censoring it\nexport const HebrewIsrael: Locale = {\n  country: {\n    code: CountryCode.Israel,\n    name: 'Hebrew',\n    native: '',\n  },\n  id: LocaleCode.HebrewIsrael,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '',\n  },\n  name: 'Hebrew (Israel)',\n  native_name: '',\n  rtl: true,\n};\n\nexport const Hindi: Locale = {\n  id: LocaleCode.Hindi,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  },\n  name: 'Hindi',\n  native_name: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  rtl: false,\n};\n\nexport const HindiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.HindiIndia,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  },\n  name: 'Hindi (India)',\n  native_name: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  rtl: false,\n};\n\nexport const Hungarian: Locale = {\n  id: LocaleCode.Hungarian,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian',\n  native_name: 'Magyar',\n  rtl: false,\n};\n\nexport const HungarianHungary: Locale = {\n  country: {\n    code: CountryCode.Hungary,\n    name: 'Hungary',\n    native: 'Magyarorsz\u00E1g',\n  },\n  id: LocaleCode.HungarianHungary,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian (Hungary)',\n  native_name: 'Magyar (Magyarorsz\u00E1g)',\n  rtl: false,\n};\n\nexport const Icelandic: Locale = {\n  id: LocaleCode.Icelandic,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic',\n  native_name: '\u00CDslenska',\n  rtl: false,\n};\n\nexport const IcelandicIceland: Locale = {\n  country: {\n    code: CountryCode.Iceland,\n    name: 'Iceland',\n    native: '\u00CDsland',\n  },\n  id: LocaleCode.IcelandicIceland,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic (Iceland)',\n  native_name: '\u00CDslenska (\u00CDsland)',\n  rtl: false,\n};\n\nexport const Igbo: Locale = {\n  id: LocaleCode.Igbo,\n  language: {\n    code: LanguageCode.Igbo,\n    name: 'Igbo',\n    native: 'Igbo',\n  },\n  name: 'Igbo',\n  native_name: 'Igbo',\n  rtl: false,\n};\n\nexport const Indonesian: Locale = {\n  id: LocaleCode.Indonesian,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian',\n  native_name: 'Bahasa Indonesia',\n  rtl: false,\n};\n\nexport const IndonesianIndonesia: Locale = {\n  country: {\n    code: CountryCode.Indonesia,\n    name: 'Indonesia',\n    native: 'Indonesia',\n  },\n  id: LocaleCode.IndonesianIndonesia,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian (Indonesia)',\n  native_name: 'Bahasa Indonesia (Indonesia)',\n  rtl: false,\n};\n\nexport const Irish: Locale = {\n  id: LocaleCode.Irish,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish',\n  native_name: 'Gaeilge',\n  rtl: false,\n};\n\nexport const IrishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.IrishIreland,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish (Ireland)',\n  native_name: 'Gaeilge (\u00C9ire)',\n  rtl: false,\n};\n\nexport const Italian: Locale = {\n  id: LocaleCode.Italian,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian',\n  native_name: 'Italiano',\n  rtl: false,\n};\n\nexport const ItalianItaly: Locale = {\n  country: {\n    code: CountryCode.Italy,\n    name: 'Italy',\n    native: 'Italia',\n  },\n  id: LocaleCode.ItalianItaly,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Italy)',\n  native_name: 'Italiano (Italia)',\n  rtl: false,\n};\n\nexport const ItalianSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Schweiz',\n  },\n  id: LocaleCode.ItalianSwitzerland,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Switzerland)',\n  native_name: 'Italiano (Svizzera)',\n  rtl: false,\n};\n\nexport const Japanese: Locale = {\n  id: LocaleCode.Japanese,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese',\n  native_name: '\u65E5\u672C\u8A9E',\n  rtl: false,\n};\n\nexport const JapaneseJapan: Locale = {\n  country: {\n    code: CountryCode.Japan,\n    name: 'Japan',\n    native: '\u65E5\u672C',\n  },\n  id: LocaleCode.JapaneseJapan,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese (Japan)',\n  native_name: '\u65E5\u672C\u8A9E (\u65E5\u672C)',\n  rtl: false,\n};\n\nexport const Kannada: Locale = {\n  id: LocaleCode.Kannada,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  rtl: false,\n};\n\nexport const KannadaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0CAD\u0CBE\u0CB0\u0CA4',\n  },\n  id: LocaleCode.KannadaIndia,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada (India)',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)',\n  rtl: false,\n};\n\nexport const Kazakh: Locale = {\n  id: LocaleCode.Kazakh,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  rtl: false,\n};\n\nexport const KazakhKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KazakhKazakhstan,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh (Kazakhstan)',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Khmer: Locale = {\n  id: LocaleCode.Khmer,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  rtl: false,\n};\n\nexport const KhmerCambodia: Locale = {\n  country: {\n    code: CountryCode.Cambodia,\n    name: 'Cambodia',\n    native: '\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6',\n  },\n  id: LocaleCode.KhmerCambodia,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer (Cambodia)',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)',\n  rtl: false,\n};\n\nexport const Konkani: Locale = {\n  id: LocaleCode.Konkani,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  rtl: false,\n};\n\nexport const KonkaniIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.KonkaniIndia,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani (India)',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Korean: Locale = {\n  id: LocaleCode.Korean,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean',\n  native_name: '\uD55C\uAD6D\uC5B4',\n  rtl: false,\n};\n\nexport const KoreanSouthKorea: Locale = {\n  country: {\n    code: CountryCode.SouthKorea,\n    name: 'South Korea',\n    native: '\uB300\uD55C\uBBFC\uAD6D',\n  },\n  id: LocaleCode.KoreanSouthKorea,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean (South Korea)',\n  native_name: '\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)',\n  rtl: false,\n};\n\nexport const Kurdish: Locale = {\n  id: LocaleCode.Kurdish,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish',\n  native_name: 'Kurd\u00EE',\n  rtl: false,\n};\n\nexport const KurdishIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.KurdishIraq,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Iraq)',\n  native_name: 'Kurd\u00EE (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: false,\n};\n\nexport const KurdishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.KurdishTurkey,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Turkey)',\n  native_name: 'Kurd\u00EE (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Kyrgyz: Locale = {\n  id: LocaleCode.Kyrgyz,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  rtl: false,\n};\n\nexport const KyrgyzKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KyrgyzKyrgyzstan,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz (Kyrgyzstan)',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Lao: Locale = {\n  id: LocaleCode.Lao,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao',\n  native_name: '\u0EA5\u0EB2\u0EA7',\n  rtl: false,\n};\n\nexport const LaoLaos: Locale = {\n  country: {\n    code: CountryCode.Laos,\n    name: 'Laos',\n    native: '\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95',\n  },\n  id: LocaleCode.LaoLaos,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao (Laos)',\n  native_name: '\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)',\n  rtl: false,\n};\n\nexport const Latvian: Locale = {\n  id: LocaleCode.Latvian,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian',\n  native_name: 'Latvie\u0161u',\n  rtl: false,\n};\n\nexport const LatvianLatvia: Locale = {\n  country: {\n    code: CountryCode.Latvia,\n    name: 'Latvia',\n    native: 'Latvija',\n  },\n  id: LocaleCode.LatvianLatvia,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian (Latvia)',\n  native_name: 'Latvie\u0161u (Latvija)',\n  rtl: false,\n};\n\nexport const Lithuanian: Locale = {\n  id: LocaleCode.Lithuanian,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian',\n  native_name: 'Lietuvi\u0173',\n  rtl: false,\n};\n\nexport const LithuanianLithuania: Locale = {\n  country: {\n    code: CountryCode.Lithuania,\n    name: 'Lithuania',\n    native: 'Lietuva',\n  },\n  id: LocaleCode.LithuanianLithuania,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian (Lithuania)',\n  native_name: 'Lietuvi\u0173 (Lietuva)',\n  rtl: false,\n};\n\nexport const Luxembourgish: Locale = {\n  id: LocaleCode.Luxembourgish,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish',\n  native_name: 'L\u00EBtzebuergesch',\n  rtl: false,\n};\n\nexport const LuxembourgishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.LuxembourgishBelgium,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Belgium)',\n  native_name: 'L\u00EBtzebuergesch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const LuxembourgishLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.LuxembourgishLuxembourg,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Luxembourg)',\n  native_name: 'L\u00EBtzebuergesch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Macedonian: Locale = {\n  id: LocaleCode.Macedonian,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const MacedonianNorthMacedonia: Locale = {\n  country: {\n    code: CountryCode.NorthMacedonia,\n    name: 'Macedonia',\n    native: '\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430',\n  },\n  id: LocaleCode.MacedonianNorthMacedonia,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian (North Macedonia)',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)',\n  rtl: false,\n};\n\nexport const Malay: Locale = {\n  id: LocaleCode.Malay,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay',\n  native_name: 'Bahasa Melayu',\n  rtl: false,\n};\n\nexport const MalayBrunei: Locale = {\n  country: {\n    code: CountryCode.Brunei,\n    name: 'Brunei',\n    native: 'Negara Brunei Darussalam',\n  },\n  id: LocaleCode.MalayBrunei,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Brunei)',\n  native_name: 'Bahasa Melayu (Negara Brunei Darussalam)',\n  rtl: false,\n};\n\nexport const MalayMalaysia: Locale = {\n  country: {\n    code: CountryCode.Malaysia,\n    name: 'Malaysia',\n    native: 'Malaysia',\n  },\n  id: LocaleCode.MalayMalaysia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Malaysia)',\n  native_name: 'Bahasa Melayu (Malaysia)',\n  rtl: false,\n};\n\nexport const MalaySingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.MalaySingapore,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Singapore)',\n  native_name: 'Bahasa Melayu (Singapore)',\n  rtl: false,\n};\n\nexport const MalayIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MalayIndia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (India)',\n  native_name: 'Bahasa Melayu (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Maltese: Locale = {\n  id: LocaleCode.Maltese,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese',\n  native_name: 'Malti',\n  rtl: false,\n};\n\nexport const MalteseMalta: Locale = {\n  country: {\n    code: CountryCode.Malta,\n    name: 'Malta',\n    native: 'Malta',\n  },\n  id: LocaleCode.MalteseMalta,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese (Malta)',\n  native_name: 'Malti (Malta)',\n  rtl: false,\n};\n\nexport const Maori: Locale = {\n  id: LocaleCode.Maori,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori',\n  native_name: 'M\u0101ori',\n  rtl: false,\n};\n\nexport const MaoriNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.MaoriNewZealand,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori (New Zealand)',\n  native_name: 'M\u0101ori (New Zealand)',\n  rtl: false,\n};\n\nexport const Marathi: Locale = {\n  id: LocaleCode.Marathi,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi',\n  native_name: '\u092E\u0930\u093E\u0920\u0940',\n  rtl: false,\n};\n\nexport const MarathiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MarathiIndia,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi (India)',\n  native_name: '\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Mongolian: Locale = {\n  id: LocaleCode.Mongolian,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  rtl: false,\n};\n\nexport const MongolianMongolia: Locale = {\n  country: {\n    code: CountryCode.Mongolia,\n    name: 'Mongolia',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441',\n  },\n  id: LocaleCode.MongolianMongolia,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian (Mongolia)',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)',\n  rtl: false,\n};\n\nexport const Montenegrin: Locale = {\n  id: LocaleCode.Montenegrin,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  rtl: false,\n};\n\nexport const MontenegrinMontenegro: Locale = {\n  country: {\n    code: CountryCode.Montenegro,\n    name: 'Montenegro',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  id: LocaleCode.MontenegrinMontenegro,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin (Montenegro)',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)',\n  rtl: false,\n};\n\nexport const Nepali: Locale = {\n  id: LocaleCode.Nepali,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  rtl: false,\n};\n\nexport const NepaliNepal: Locale = {\n  country: {\n    code: CountryCode.Nepal,\n    name: 'Nepal',\n    native: '\u0928\u0947\u092A\u093E\u0932',\n  },\n  id: LocaleCode.NepaliNepal,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali (Nepal)',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)',\n  rtl: false,\n};\n\nexport const NorthernSotho: Locale = {\n  id: LocaleCode.NorthernSotho,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho',\n  native_name: 'Sesotho sa Leboa',\n  rtl: false,\n};\n\nexport const NorthernSothoSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.NorthernSothoSouthAfrica,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho (South Africa)',\n  native_name: 'Sesotho sa Leboa (South Africa)',\n  rtl: false,\n};\n\nexport const Norwegian: Locale = {\n  id: LocaleCode.Norwegian,\n  language: {\n    code: LanguageCode.Norwegian,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian',\n  native_name: 'Norsk',\n  rtl: false,\n};\n\nexport const NorwegianBokmalNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianBokmalNorway,\n  language: {\n    code: LanguageCode.NorwegianBokmal,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Bokmal)',\n  native_name: 'Norsk (Bokm\u00E5l)',\n  rtl: false,\n};\n\nexport const NorwegianNynorskNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianNynorskNorway,\n  language: {\n    code: LanguageCode.NorwegianNynorsk,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Nynorsk)',\n  native_name: 'Norsk (Nynorsk)',\n  rtl: false,\n};\n\nexport const Oriya: Locale = {\n  id: LocaleCode.Oriya,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  rtl: false,\n};\n\nexport const OriyaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.OriyaIndia,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya (India)',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)',\n  rtl: false,\n};\n\nexport const Pashto: Locale = {\n  id: LocaleCode.Pashto,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto',\n  native_name: '\u067E\u069A\u062A\u0648',\n  rtl: true,\n};\n\nexport const PashtoAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PashtoAfghanistan,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto (Afghanistan)',\n  native_name: '\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Persian: Locale = {\n  id: LocaleCode.Persian,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const PersianIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.PersianIran,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Polish: Locale = {\n  id: LocaleCode.Polish,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish',\n  native_name: 'Polski',\n  rtl: false,\n};\n\nexport const PolishPoland: Locale = {\n  country: {\n    code: CountryCode.Poland,\n    name: 'Poland',\n    native: 'Polska',\n  },\n  id: LocaleCode.PolishPoland,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish (Poland)',\n  native_name: 'Polski (Polska)',\n  rtl: false,\n};\n\nexport const Portuguese: Locale = {\n  id: LocaleCode.Portuguese,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese',\n  native_name: 'Portugu\u00EAs',\n  rtl: false,\n};\n\nexport const PortugueseBrazil: Locale = {\n  country: {\n    code: CountryCode.Brazil,\n    name: 'Brazil',\n    native: 'Brasil',\n  },\n  id: LocaleCode.PortugueseBrazil,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Brazil)',\n  native_name: 'Portugu\u00EAs (Brasil)',\n  rtl: false,\n};\n\nexport const PortuguesePortugal: Locale = {\n  country: {\n    code: CountryCode.Portugal,\n    name: 'Portugal',\n    native: 'Portugal',\n  },\n  id: LocaleCode.PortuguesePortugal,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Portugal)',\n  native_name: 'Portugu\u00EAs (Portugal)',\n  rtl: false,\n};\n\nexport const Punjabi: Locale = {\n  id: LocaleCode.Punjabi,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  rtl: true,\n};\n\nexport const PunjabiPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PunjabiPakistan,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (Pakistan)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const PunjabiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0A2D\u0A3E\u0A30\u0A24',\n  },\n  id: LocaleCode.PunjabiIndia,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (India)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)',\n  rtl: true,\n};\n\nexport const Quechua: Locale = {\n  id: LocaleCode.Quechua,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua',\n  native_name: 'Runa Simi',\n  rtl: false,\n};\n\nexport const QuechuaBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.QuechuaBolivia,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Bolivia)',\n  native_name: 'Runa Simi (Bolivia)',\n  rtl: false,\n};\n\nexport const QuechuaEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.QuechuaEcuador,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Ecuador)',\n  native_name: 'Runa Simi (Ecuador)',\n  rtl: false,\n};\n\nexport const QuechuaPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.QuechuaPeru,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Peru)',\n  native_name: 'Runa Simi (Per\u00FA)',\n  rtl: false,\n};\n\nexport const Romanian: Locale = {\n  id: LocaleCode.Romanian,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian',\n  native_name: 'Rom\u00E2n\u0103',\n  rtl: false,\n};\n\nexport const RomanianRomania: Locale = {\n  country: {\n    code: CountryCode.Romania,\n    name: 'Romania',\n    native: 'Rom\u00E2nia',\n  },\n  id: LocaleCode.RomanianRomania,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian (Romania)',\n  native_name: 'Rom\u00E2n\u0103 (Rom\u00E2nia)',\n  rtl: false,\n};\n\nexport const Russian: Locale = {\n  id: LocaleCode.Russian,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  rtl: false,\n};\n\nexport const RussianRussia: Locale = {\n  country: {\n    code: CountryCode.RussianFederation,\n    name: 'Russian Federation',\n    native: '\u0420\u043E\u0441\u0441\u0438\u044F',\n  },\n  id: LocaleCode.RussianRussia,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Russia)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)',\n  rtl: false,\n};\n\nexport const RussianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.RussianUkraine,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Ukraine)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const RussianKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.RussianKazakhstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kazakhstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const RussianKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  id: LocaleCode.RussianKyrgyzstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kyrgyzstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)',\n  rtl: false,\n};\n\nexport const Sanskrit: Locale = {\n  id: LocaleCode.Sanskrit,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  rtl: false,\n};\n\nexport const SanskritIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.SanskritIndia,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit (India)',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Sami: Locale = {\n  id: LocaleCode.Sami,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami',\n  native_name: 'S\u00E1megiella',\n  rtl: false,\n};\n\nexport const SamiFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SamiFinland,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Finland)',\n  native_name: 'S\u00E1megiella (Suomi)',\n  rtl: false,\n};\n\nexport const SamiNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.SamiNorway,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Norway)',\n  native_name: 'S\u00E1megiella (Norge)',\n  rtl: false,\n};\n\nexport const SamiSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SamiSweden,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Sweden)',\n  native_name: 'S\u00E1megiella (Sverige)',\n  rtl: false,\n};\n\nexport const Samoan: Locale = {\n  id: LocaleCode.Samoan,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan',\n  native_name: 'Gagana fa\u2019a S\u0101moa',\n  rtl: false,\n};\n\nexport const SamoanSamoa: Locale = {\n  country: {\n    code: CountryCode.Samoa,\n    name: 'Samoa',\n    native: 'Samoa',\n  },\n  id: LocaleCode.SamoanSamoa,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan (Samoa)',\n  native_name: 'Gagana fa\u2019a S\u0101moa (Samoa)',\n  rtl: false,\n};\n\nexport const Serbian: Locale = {\n  id: LocaleCode.Serbian,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin)',\n  native_name: 'Srpski (Latinica)',\n  rtl: false,\n};\n\nexport const SerbianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.SerbianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Bosnia and Herzegovina)',\n  native_name: 'Srpski (Latinica) (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const SerbianSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: 'Srbija i Crna Gora',\n  },\n  id: LocaleCode.SerbianSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Serbia and Montenegro)',\n  native_name: 'Srpski (Latinica) (Srbija i Crna Gora)',\n  rtl: false,\n};\n\nexport const SerbianCyrillic: Locale = {\n  id: LocaleCode.SerbianCyrillic,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: '\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Bosnia and Herzegovina)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: '\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Serbia and Montenegro)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)',\n  rtl: false,\n};\n\nexport const Slovak: Locale = {\n  id: LocaleCode.Slovak,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak',\n  native_name: 'Sloven\u010Dina',\n  rtl: false,\n};\n\nexport const SlovakSlovakia: Locale = {\n  country: {\n    code: CountryCode.Slovakia,\n    name: 'Slovakia',\n    native: 'Slovensko',\n  },\n  id: LocaleCode.SlovakSlovakia,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak (Slovakia)',\n  native_name: 'Sloven\u010Dina (Slovensko)',\n  rtl: false,\n};\n\nexport const Slovenian: Locale = {\n  id: LocaleCode.Slovenian,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian',\n  native_name: 'Sloven\u0161\u010Dina',\n  rtl: false,\n};\n\nexport const SlovenianSlovenia: Locale = {\n  country: {\n    code: CountryCode.Slovenia,\n    name: 'Slovenia',\n    native: 'Slovenija',\n  },\n  id: LocaleCode.SlovenianSlovenia,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian (Slovenia)',\n  native_name: 'Sloven\u0161\u010Dina (Slovenija)',\n  rtl: false,\n};\n\nexport const Somali: Locale = {\n  id: LocaleCode.Somali,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali',\n  native_name: 'Soomaaliga',\n  rtl: true,\n};\n\nexport const SomaliSomalia: Locale = {\n  country: {\n    code: CountryCode.Somalia,\n    name: 'Somalia',\n    native: 'Soomaaliya',\n  },\n  id: LocaleCode.SomaliSomalia,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali (Somalia)',\n  native_name: 'Soomaaliga (Soomaaliya)',\n  rtl: true,\n};\n\nexport const Spanish: Locale = {\n  id: LocaleCode.Spanish,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish',\n  native_name: 'Espa\u00F1ol',\n  rtl: false,\n};\n\nexport const SpanishArgentina: Locale = {\n  country: {\n    code: CountryCode.Argentina,\n    name: 'Argentina',\n    native: 'Argentina',\n  },\n  id: LocaleCode.SpanishArgentina,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Argentina)',\n  native_name: 'Espa\u00F1ol (Argentina)',\n  rtl: false,\n};\n\nexport const SpanishBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.SpanishBolivia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Bolivia)',\n  native_name: 'Espa\u00F1ol (Bolivia)',\n  rtl: false,\n};\n\nexport const SpanishChile: Locale = {\n  country: {\n    code: CountryCode.Chile,\n    name: 'Chile',\n    native: 'Chile',\n  },\n  id: LocaleCode.SpanishChile,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Chile)',\n  native_name: 'Espa\u00F1ol (Chile)',\n  rtl: false,\n};\n\nexport const SpanishColombia: Locale = {\n  country: {\n    code: CountryCode.Colombia,\n    name: 'Colombia',\n    native: 'Colombia',\n  },\n  id: LocaleCode.SpanishColombia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Colombia)',\n  native_name: 'Espa\u00F1ol (Colombia)',\n  rtl: false,\n};\n\nexport const SpanishCostaRica: Locale = {\n  country: {\n    code: CountryCode.CostaRica,\n    name: 'Costa Rica',\n    native: 'Costa Rica',\n  },\n  id: LocaleCode.SpanishCostaRica,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Costa Rica)',\n  native_name: 'Espa\u00F1ol (Costa Rica)',\n  rtl: false,\n};\n\nexport const SpanishCuba: Locale = {\n  country: {\n    code: CountryCode.Cuba,\n    name: 'Cuba',\n    native: 'Cuba',\n  },\n  id: LocaleCode.SpanishCuba,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Cuba)',\n  native_name: 'Espa\u00F1ol (Cuba)',\n  rtl: false,\n};\n\nexport const SpanishDominicanRepublic: Locale = {\n  country: {\n    code: CountryCode.DominicanRepublic,\n    name: 'Dominican Republic',\n    native: 'Rep\u00FAblica Dominicana',\n  },\n  id: LocaleCode.SpanishDominicanRepublic,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Dominican Republic)',\n  native_name: 'Espa\u00F1ol (Rep\u00FAblica Dominicana)',\n  rtl: false,\n};\n\nexport const SpanishEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.SpanishEcuador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Ecuador)',\n  native_name: 'Espa\u00F1ol (Ecuador)',\n  rtl: false,\n};\n\nexport const SpanishElSalvador: Locale = {\n  country: {\n    code: CountryCode.ElSalvador,\n    name: 'El Salvador',\n    native: 'El Salvador',\n  },\n  id: LocaleCode.SpanishElSalvador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (El Salvador)',\n  native_name: 'Espa\u00F1ol (El Salvador)',\n  rtl: false,\n};\n\nexport const SpanishEquatorialGuinea: Locale = {\n  country: {\n    code: CountryCode.EquatorialGuinea,\n    name: 'Equatorial Guinea',\n    native: 'Guinea Ecuatorial',\n  },\n  id: LocaleCode.SpanishEquatorialGuinea,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Equatorial Guinea)',\n  native_name: 'Espa\u00F1ol (Guinea Ecuatorial)',\n  rtl: false,\n};\n\nexport const SpanishGuatemala: Locale = {\n  country: {\n    code: CountryCode.Guatemala,\n    name: 'Guatemala',\n    native: 'Guatemala',\n  },\n  id: LocaleCode.SpanishGuatemala,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Guatemala)',\n  native_name: 'Espa\u00F1ol (Guatemala)',\n  rtl: false,\n};\n\nexport const SpanishHonduras: Locale = {\n  country: {\n    code: CountryCode.Honduras,\n    name: 'Honduras',\n    native: 'Honduras',\n  },\n  id: LocaleCode.SpanishHonduras,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Honduras)',\n  native_name: 'Espa\u00F1ol (Honduras)',\n  rtl: false,\n};\n\nexport const SpanishMexico: Locale = {\n  country: {\n    code: CountryCode.Mexico,\n    name: 'Mexico',\n    native: 'M\u00E9xico',\n  },\n  id: LocaleCode.SpanishMexico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Mexico)',\n  native_name: 'Espa\u00F1ol (M\u00E9xico)',\n  rtl: false,\n};\n\nexport const SpanishNicaragua: Locale = {\n  country: {\n    code: CountryCode.Nicaragua,\n    name: 'Nicaragua',\n    native: 'Nicaragua',\n  },\n  id: LocaleCode.SpanishNicaragua,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Nicaragua)',\n  native_name: 'Espa\u00F1ol (Nicaragua)',\n  rtl: false,\n};\n\nexport const SpanishPanama: Locale = {\n  country: {\n    code: CountryCode.Panama,\n    name: 'Panama',\n    native: 'Panam\u00E1',\n  },\n  id: LocaleCode.SpanishPanama,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Panama)',\n  native_name: 'Espa\u00F1ol (Panam\u00E1)',\n  rtl: false,\n};\n\nexport const SpanishParaguay: Locale = {\n  country: {\n    code: CountryCode.Paraguay,\n    name: 'Paraguay',\n    native: 'Paraguay',\n  },\n  id: LocaleCode.SpanishParaguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Paraguay)',\n  native_name: 'Espa\u00F1ol (Paraguay)',\n  rtl: false,\n};\n\nexport const SpanishPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.SpanishPeru,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Peru)',\n  native_name: 'Espa\u00F1ol (Per\u00FA)',\n  rtl: false,\n};\n\nexport const SpanishPuertoRico: Locale = {\n  country: {\n    code: CountryCode.PuertoRico,\n    name: 'Puerto Rico',\n    native: 'Puerto Rico',\n  },\n  id: LocaleCode.SpanishPuertoRico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Puerto Rico)',\n  native_name: 'Espa\u00F1ol (Puerto Rico)',\n  rtl: false,\n};\n\nexport const SpanishUruguay: Locale = {\n  country: {\n    code: CountryCode.Uruguay,\n    name: 'Uruguay',\n    native: 'Uruguay',\n  },\n  id: LocaleCode.SpanishUruguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Uruguay)',\n  native_name: 'Espa\u00F1ol (Uruguay)',\n  rtl: false,\n};\n\nexport const SpanishVenezuela: Locale = {\n  country: {\n    code: CountryCode.Venezuela,\n    name: 'Venezuela',\n    native: 'Venezuela',\n  },\n  id: LocaleCode.SpanishVenezuela,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Venezuela)',\n  native_name: 'Espa\u00F1ol (Venezuela)',\n  rtl: false,\n};\n\nexport const SutuSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.SutuSouthAfrica,\n  language: {\n    code: LanguageCode.Sutu,\n    name: 'Sutu',\n    native: 'Sesotho',\n  },\n  name: 'Sutu (South Africa)',\n  native_name: 'Sesotho (Afrika Borwa)',\n  rtl: false,\n};\n\nexport const Swahili: Locale = {\n  id: LocaleCode.Swahili,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili',\n  native_name: 'Kiswahili',\n  rtl: false,\n};\n\nexport const SwahiliKenya: Locale = {\n  country: {\n    code: CountryCode.Kenya,\n    name: 'Kenya',\n    native: 'Kenya',\n  },\n  id: LocaleCode.SwahiliKenya,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili (Kenya)',\n  native_name: 'Kiswahili (Kenya)',\n  rtl: false,\n};\n\nexport const Swedish: Locale = {\n  id: LocaleCode.Swedish,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish',\n  native_name: 'Svenska',\n  rtl: false,\n};\n\nexport const SwedishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SwedishFinland,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Finland)',\n  native_name: 'Svenska (Finland)',\n  rtl: false,\n};\n\nexport const SwedishSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SwedishSweden,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Sweden)',\n  native_name: 'Svenska (Sverige)',\n  rtl: false,\n};\n\nexport const Syriac: Locale = {\n  id: LocaleCode.Syriac,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  rtl: true,\n};\n\nexport const SyriacSyria: Locale = {\n  country: {\n    code: CountryCode.Syria,\n    name: 'Syria',\n    native: '\u0633\u0648\u0631\u064A\u0627',\n  },\n  id: LocaleCode.SyriacSyria,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac (Syria)',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)',\n  rtl: true,\n};\n\nexport const Tajik: Locale = {\n  id: LocaleCode.Tajik,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  rtl: false,\n};\n\nexport const TajikTajikistan: Locale = {\n  country: {\n    code: CountryCode.Tajikistan,\n    name: 'Tajikistan',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.TajikTajikistan,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik (Tajikistan)',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Tagalog: Locale = {\n  id: LocaleCode.Tagalog,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog',\n  native_name: 'Tagalog',\n  rtl: false,\n};\n\nexport const TagalogPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.TagalogPhilippines,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog (Philippines)',\n  native_name: 'Tagalog (Pilipinas)',\n  rtl: false,\n};\n\nexport const Tamil: Locale = {\n  id: LocaleCode.Tamil,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  rtl: false,\n};\n\nexport const TamilIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TamilIndia,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil (India)',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Telugu: Locale = {\n  id: LocaleCode.Telugu,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  rtl: false,\n};\n\nexport const TeluguIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02',\n  },\n  id: LocaleCode.TeluguIndia,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu (India)',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)',\n  rtl: false,\n};\n\nexport const Thai: Locale = {\n  id: LocaleCode.Thai,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai',\n  native_name: '\u0E44\u0E17\u0E22',\n  rtl: false,\n};\n\nexport const ThaiThailand: Locale = {\n  country: {\n    code: CountryCode.Thailand,\n    name: 'Thailand',\n    native: '\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22',\n  },\n  id: LocaleCode.ThaiThailand,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai (Thailand)',\n  native_name: '\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)',\n  rtl: false,\n};\n\nexport const Tibetan: Locale = {\n  id: LocaleCode.Tibetan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const TibetanChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.TibetanChina,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (China)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)',\n  rtl: false,\n};\n\nexport const TibetanBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D',\n  },\n  id: LocaleCode.TibetanBhutan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)',\n  rtl: false,\n};\n\nexport const TibetanIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TibetanIndia,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (India)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Tsonga: Locale = {\n  id: LocaleCode.Tsonga,\n  language: {\n    code: LanguageCode.Tsonga,\n    name: 'Tsonga',\n    native: 'Xitsonga',\n  },\n  name: 'Tsonga',\n  native_name: 'Xitsonga',\n  rtl: false,\n};\n\nexport const Tswana: Locale = {\n  id: LocaleCode.Tswana,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana',\n  native_name: 'Setswana',\n  rtl: false,\n};\n\nexport const TswanaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.TswanaSouthAfrica,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana (South Africa)',\n  native_name: 'Setswana (South Africa)',\n  rtl: false,\n};\n\nexport const Turkish: Locale = {\n  id: LocaleCode.Turkish,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish',\n  native_name: 'T\u00FCrk\u00E7e',\n  rtl: false,\n};\n\nexport const TurkishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.TurkishTurkey,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish (Turkey)',\n  native_name: 'T\u00FCrk\u00E7e (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Ukrainian: Locale = {\n  id: LocaleCode.Ukrainian,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  rtl: false,\n};\n\nexport const UkrainianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.UkrainianUkraine,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian (Ukraine)',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const Urdu: Locale = {\n  id: LocaleCode.Urdu,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu',\n  native_name: '\u0627\u0631\u062F\u0648',\n  rtl: true,\n};\n\nexport const UrduAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduAfghanistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Afghanistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UrduIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.UrduIndia,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (India)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)',\n  rtl: true,\n};\n\nexport const UrduPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduPakistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Pakistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UzbekLatin: Locale = {\n  id: LocaleCode.Uzbek,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek',\n  native_name: 'O\u02BBzbekcha',\n  rtl: false,\n};\n\nexport const UzbekUzbekistan: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: 'O\u02BBzbekiston',\n  },\n  id: LocaleCode.UzbekUzbekistan,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek (Latin, Uzbekistan)',\n  native_name: 'O\u02BBzbekcha (O\u02BBzbekiston)',\n  rtl: false,\n};\n\nexport const UzbekCyrillic: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.UzbekCyrillic,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  name: 'Uzbek (Cyrillic)',\n  native_name: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Vietnamese: Locale = {\n  id: LocaleCode.Vietnamese,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t',\n  rtl: false,\n};\n\nexport const VietnameseVietnam: Locale = {\n  country: {\n    code: CountryCode.Vietnam,\n    name: 'Vietnam',\n    native: 'Vi\u1EC7t Nam',\n  },\n  id: LocaleCode.VietnameseVietnam,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese (Vietnam)',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)',\n  rtl: false,\n};\n\nexport const Welsh: Locale = {\n  id: LocaleCode.Welsh,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh',\n  native_name: 'Cymraeg',\n  rtl: false,\n};\n\nexport const WelshUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.WelshUnitedKingdom,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh (United Kingdom)',\n  native_name: 'Cymraeg (United Kingdom)',\n  rtl: false,\n};\n\nexport const Xhosa: Locale = {\n  id: LocaleCode.Xhosa,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa',\n  native_name: 'isiXhosa',\n  rtl: false,\n};\n\nexport const XhosaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.XhosaSouthAfrica,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa (South Africa)',\n  native_name: 'isiXhosa (South Africa)',\n  rtl: false,\n};\n\nexport const Yiddish: Locale = {\n  id: LocaleCode.Yiddish,\n  language: {\n    code: LanguageCode.Yiddish,\n    name: 'Yiddish',\n    native: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  },\n  name: 'Yiddish',\n  native_name: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  rtl: false,\n};\n\nexport const Yoruba: Locale = {\n  id: LocaleCode.Yoruba,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba',\n  native_name: 'Yor\u00F9b\u00E1',\n  rtl: false,\n};\n\nexport const YorubaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.YorubaNigeria,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba (Nigeria)',\n  native_name: 'Yor\u00F9b\u00E1 (Nigeria)',\n  rtl: false,\n};\n\n// export const ZhuyinMandarin: Locale = {\n//   id: LocaleCode.ZhuyinMandarin,\n//   language: {\n//     code: LanguageCode.Mandarin,\n//     name: 'Mandarin',\n//     native: '\u666E\u901A\u8BDD',\n//   },\n//   name: 'Zhuyin (Mandarin)',\n//   native_name: '\u666E\u901A\u8BDD (\u666E\u901A\u8BDD)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinChina: Locale = {\n//   country: {\n//     code: CountryCode.China,\n//     name: 'China',\n//     native: '\u4E2D\u56FD',\n//   },\n//   id: LocaleCode.ZhuyinMandarinChina,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, China)',\n//   native_name: 'Zhuyin (Mandarin, China)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinTaiwan: Locale = {\n//   country: {\n//     code: CountryCode.Taiwan,\n//     name: 'Taiwan',\n//     native: '\u81FA\u7063',\n//   },\n//   id: LocaleCode.ZhuyinMandarinTaiwan,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Taiwan)',\n//   native_name: 'Zhuyin (Mandarin, Taiwan)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinHongKong: Locale = {\n//   country: {\n//     code: CountryCode.HongKong,\n//     name: 'Hong Kong',\n//     native: '\u9999\u6E2F',\n//   },\n//   id: LocaleCode.ZhuyinMandarinHongKong,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Hong Kong)',\n//   native_name: 'Zhuyin (Mandarin, Hong Kong)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinMacau: Locale = {\n//   country: {\n//     code: CountryCode.Macau,\n//     name: 'Macau',\n//     native: '\u6FB3\u9580',\n//   },\n//   id: LocaleCode.ZhuyinMandarinMacau,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Macau)',\n//   native_name: 'Zhuyin (Mandarin, Macau)',\n//   rtl: false,\n// };\n\nexport const Zulu: Locale = {\n  id: LocaleCode.Zulu,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu',\n  native_name: 'isiZulu',\n  rtl: false,\n};\n\nexport const ZuluSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.ZuluSouthAfrica,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu (South Africa)',\n  native_name: 'isiZulu (South Africa)',\n  rtl: false,\n};\n", "import { TimezoneRegions } from './region.js';\nimport { TimezoneRegion } from './region';\nimport { TimezoneOffset } from './timezone.js';\nimport { Timezones } from './timezones.js';\n\nexport const AfricaAbidjan: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAbidjan,\n  name: 'Africa/Abidjan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAccra: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAccra,\n  name: 'Africa/Accra',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAddisAbaba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAddisAbaba,\n  name: 'Africa/Addis_Ababa',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaAlgiers: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAlgiers,\n  name: 'Africa/Algiers',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaAsmara: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAsmara,\n  name: 'Africa/Asmara',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaBamako: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBamako,\n  name: 'Africa/Bamako',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBangui: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBangui,\n  name: 'Africa/Bangui',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBanjul: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBanjul,\n  name: 'Africa/Banjul',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBissau: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBissau,\n  name: 'Africa/Bissau',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBlantyre: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBlantyre,\n  name: 'Africa/Blantyre',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaBrazzaville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBrazzaville,\n  name: 'Africa/Brazzaville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBujumbura: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBujumbura,\n  name: 'Africa/Bujumbura',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaCairo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCairo,\n  name: 'Africa/Cairo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AfricaCasablanca: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCasablanca,\n  name: 'Africa/Casablanca',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AfricaCeuta: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCeuta,\n  name: 'Africa/Ceuta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaConakry: TimezoneRegion = {\n  id: TimezoneRegions.AfricaConakry,\n  name: 'Africa/Conakry',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDakar: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDakar,\n  name: 'Africa/Dakar',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDarEsSalaam: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDarEsSalaam,\n  name: 'Africa/Dar_es_Salaam',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDjibouti: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDjibouti,\n  name: 'Africa/Djibouti',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDouala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDouala,\n  name: 'Africa/Douala',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaElAaiun: TimezoneRegion = {\n  id: TimezoneRegions.AfricaElAaiun,\n  name: 'Africa/El_Aaiun',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaFreetown: TimezoneRegion = {\n  id: TimezoneRegions.AfricaFreetown,\n  name: 'Africa/Freetown',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaGaborone: TimezoneRegion = {\n  id: TimezoneRegions.AfricaGaborone,\n  name: 'Africa/Gaborone',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaHarare: TimezoneRegion = {\n  id: TimezoneRegions.AfricaHarare,\n  name: 'Africa/Harare',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaJohannesburg: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJohannesburg,\n  name: 'Africa/Johannesburg',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaJuba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJuba,\n  name: 'Africa/Juba',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKampala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKampala,\n  name: 'Africa/Kampala',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKhartoum: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKhartoum,\n  name: 'Africa/Khartoum',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKigali: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKigali,\n  name: 'Africa/Kigali',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaKinshasa: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKinshasa,\n  name: 'Africa/Kinshasa',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLagos: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLagos,\n  name: 'Africa/Lagos',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLibreville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLibreville,\n  name: 'Africa/Libreville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLome,\n  name: 'Africa/Lome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaLuanda: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLuanda,\n  name: 'Africa/Luanda',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLubumbashi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLubumbashi,\n  name: 'Africa/Lubumbashi',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaLusaka: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLusaka,\n  name: 'Africa/Lusaka',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMalabo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMalabo,\n  name: 'Africa/Malabo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaMaputo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaputo,\n  name: 'Africa/Maputo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMaseru: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaseru,\n  name: 'Africa/Maseru',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMbabane: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMbabane,\n  name: 'Africa/Mbabane',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMogadishu: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMogadishu,\n  name: 'Africa/Mogadishu',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaMonrovia: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMonrovia,\n  name: 'Africa/Monrovia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaNairobi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNairobi,\n  name: 'Africa/Nairobi',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaNdjamena: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNdjamena,\n  name: 'Africa/Ndjamena',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNiamey: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNiamey,\n  name: 'Africa/Niamey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNouakchott: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNouakchott,\n  name: 'Africa/Nouakchott',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AfricaOuagadougou: TimezoneRegion = {\n  id: TimezoneRegions.AfricaOuagadougou,\n  name: 'Africa/Ouagadougou',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaPortoNovo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaPortoNovo,\n  name: 'Africa/Porto-Novo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaSaoTome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaSaoTome,\n  name: 'Africa/SaoTome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTripoli: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTripoli,\n  name: 'Africa/Tripoli',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTunis: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTunis,\n  name: 'Africa/Tunis',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaWindhoek: TimezoneRegion = {\n  id: TimezoneRegions.AfricaWindhoek,\n  name: 'Africa/Windhoek',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AmericaAdak: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAdak,\n  name: 'America/Adak',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaAnchorage: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnchorage,\n  name: 'America/Anchorage',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaAnguilla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnguilla,\n  name: 'America/Anguilla',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAntigua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAntigua,\n  name: 'America/Antigua',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAraguaina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAraguaina,\n  name: 'America/Araguaina',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaArgentinaBuenosAires: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaBuenosAires,\n  name: 'America/Argentina/Buenos_Aires',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCatamarca: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCatamarca,\n  name: 'America/Argentina/Catamarca',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCordoba,\n  name: 'America/Argentina/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaJujuy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaJujuy,\n  name: 'America/Argentina/Jujuy',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaLaRioja: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaLaRioja,\n  name: 'America/Argentina/La_Rioja',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaMendoza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaMendoza,\n  name: 'America/Argentina/Mendoza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaRioGallegos: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaRioGallegos,\n  name: 'America/Argentina/Rio_Gallegos',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSalta: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSalta,\n  name: 'America/Argentina/Salta',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanJuan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanJuan,\n  name: 'America/Argentina/San_Juan',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanLuis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanLuis,\n  name: 'America/Argentina/San_Luis',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaTucuman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaTucuman,\n  name: 'America/Argentina/Tucuman',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaUshuaia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaUshuaia,\n  name: 'America/Argentina/Ushuaia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaAruba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAruba,\n  name: 'America/Aruba',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAsuncion: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAsuncion,\n  name: 'America/Asuncion',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ParaguayTime,\n};\n\nexport const AmericaAtikokan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtikokan,\n  name: 'America/Atikokan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaAtka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtka,\n  name: 'America/Atka',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaBahia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahia,\n  name: 'America/Bahia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBahiaBanderas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahiaBanderas,\n  name: 'America/Bahia_Banderas',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBarbados: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBarbados,\n  name: 'America/Barbados',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBelem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelem,\n  name: 'America/Belem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBelize: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelize,\n  name: 'America/Belize',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBlancSablon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBlancSablon,\n  name: 'America/Blanc-Sablon',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBoaVista: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoaVista,\n  name: 'America/Boa_Vista',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaBogota: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBogota,\n  name: 'America/Bogota',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.ColombiaTime,\n};\n\nexport const AmericaBoise: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoise,\n  name: 'America/Boise',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCambridgeBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCambridgeBay,\n  name: 'America/Cambridge_Bay',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCampoGrande: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCampoGrande,\n  name: 'America/Campo_Grande',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCancun: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCancun,\n  name: 'America/Cancun',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCaracas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCaracas,\n  name: 'America/Caracas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.VenezuelaStandardTime,\n};\n\nexport const AmericaCayenne: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayenne,\n  name: 'America/Cayenne',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.FrenchGuianaTime,\n};\n\nexport const AmericaCayman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayman,\n  name: 'America/Cayman',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaChicago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChicago,\n  name: 'America/Chicago',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaChihuahua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChihuahua,\n  name: 'America/Chihuahua',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCoralHarbour: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCoralHarbour,\n  name: 'America/Coral_Harbour',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCordoba,\n  name: 'America/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaCostaRica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCostaRica,\n  name: 'America/Costa_Rica',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaCreston: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCreston,\n  name: 'America/Creston',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCuiaba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuiaba,\n  name: 'America/Cuiaba',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCuracao: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuracao,\n  name: 'America/Curacao',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaDanmarkshavn: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDanmarkshavn,\n  name: 'America/Danmarkshavn',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AmericaDawson: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawson,\n  name: 'America/Dawson',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDawsonCreek: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawsonCreek,\n  name: 'America/Dawson_Creek',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDenver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDenver,\n  name: 'America/Denver',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaDetroit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDetroit,\n  name: 'America/Detroit',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaDominica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDominica,\n  name: 'America/Dominica',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaEdmonton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEdmonton,\n  name: 'America/Edmonton',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaEirunepe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEirunepe,\n  name: 'America/Eirunepe',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaElSalvador: TimezoneRegion = {\n  id: TimezoneRegions.AmericaElSalvador,\n  name: 'America/El_Salvador',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaFortaleza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaFortaleza,\n  name: 'America/Fortaleza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaGlaceBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGlaceBay,\n  name: 'America/Glace_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGodthab: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGodthab,\n  name: 'America/Godthab',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.WestGreenlandTime,\n};\n\nexport const AmericaGooseBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGooseBay,\n  name: 'America/Goose_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrandTurk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrandTurk,\n  name: 'America/Grand_Turk',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrenada: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrenada,\n  name: 'America/Grenada',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuadeloupe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuadeloupe,\n  name: 'America/Guadeloupe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuatemala: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuatemala,\n  name: 'America/Guatemala',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaGuayaquil: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuayaquil,\n  name: 'America/Guayaquil',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EcuadorTime,\n};\n\nexport const AmericaGuyana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuyana,\n  name: 'America/Guyana',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHalifax: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHalifax,\n  name: 'America/Halifax',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHavana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHavana,\n  name: 'America/Havana',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CubaStandardTime,\n};\n\nexport const AmericaHermosillo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHermosillo,\n  name: 'America/Hermosillo',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIndianaIndianapolis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaIndianapolis,\n  name: 'America/Indiana/Indianapolis',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaKnox: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaKnox,\n  name: 'America/Indiana/Knox',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaMarengo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaMarengo,\n  name: 'America/Indiana/Marengo',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaPetersburg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaPetersburg,\n  name: 'America/Indiana/Petersburg',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaTellCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaTellCity,\n  name: 'America/Indiana/Tell_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaVevay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVevay,\n  name: 'America/Indiana/Vevay',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaVincennes: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVincennes,\n  name: 'America/Indiana/Vincennes',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaWinamac: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaWinamac,\n  name: 'America/Indiana/Winamac',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaInuvik: TimezoneRegion = {\n  id: TimezoneRegions.AmericaInuvik,\n  name: 'America/Inuvik',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIqaluit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIqaluit,\n  name: 'America/Iqaluit',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaJamaica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJamaica,\n  name: 'America/Jamaica',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaJuneau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJuneau,\n  name: 'America/Juneau',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaKentuckyLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyLouisville,\n  name: 'America/Kentucky/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKentuckyMonticello: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyMonticello,\n  name: 'America/Kentucky/Monticello',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKralendijk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKralendijk,\n  name: 'America/Kralendijk',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaLaPaz: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLaPaz,\n  name: 'America/La_Paz',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.BoliviaTime,\n};\n\nexport const AmericaLima: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLima,\n  name: 'America/Lima',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.PeruTime,\n};\n\nexport const AmericaLosAngeles: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLosAngeles,\n  name: 'America/Los_Angeles',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLouisville,\n  name: 'America/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaLowerPrinces: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLowerPrinces,\n  name: 'America/Lower_Princes',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMaceio: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMaceio,\n  name: 'America/Maceio',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaManagua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManagua,\n  name: 'America/Managua',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaManaus: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManaus,\n  name: 'America/Manaus',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaMarigot: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMarigot,\n  name: 'America/Marigot',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMartinique: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMartinique,\n  name: 'America/Martinique',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMatamoros: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMatamoros,\n  name: 'America/Matamoros',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMazatlan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMazatlan,\n  name: 'America/Mazatlan',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaMenominee: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMenominee,\n  name: 'America/Menominee',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMerida: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMerida,\n  name: 'America/Merida',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMetlakatla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMetlakatla,\n  name: 'America/Metlakatla',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaMexicoCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMexicoCity,\n  name: 'America/Mexico_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMiquelon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMiquelon,\n  name: 'America/Miquelon',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SaintPierreAndMiquelonStandardTime,\n};\n\nexport const AmericaMoncton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMoncton,\n  name: 'America/Moncton',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMonterrey: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMonterrey,\n  name: 'America/Monterrey',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMontevideo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontevideo,\n  name: 'America/Montevideo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.UruguayStandardTime,\n};\n\nexport const AmericaMontreal: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontreal,\n  name: 'America/Montreal',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaMontserrat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontserrat,\n  name: 'America/Montserrat',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaNassau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNassau,\n  name: 'America/Nassau',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNewYork: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNewYork,\n  name: 'America/New_York',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNipigon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNipigon,\n  name: 'America/Nipigon',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNome: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNome,\n  name: 'America/Nome',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaNoronha: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNoronha,\n  name: 'America/Noronha',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.FernandoDeNoronhaTime,\n};\n\nexport const AmericaNorthDakotaBeulah: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaBeulah,\n  name: 'America/North_Dakota/Beulah',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaCenter: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaCenter,\n  name: 'America/North_Dakota/Center',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaNewSalem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaNewSalem,\n  name: 'America/North_Dakota/New_Salem',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaOjinaga: TimezoneRegion = {\n  id: TimezoneRegions.AmericaOjinaga,\n  name: 'America/Ojinaga',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPanama: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPanama,\n  name: 'America/Panama',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPangnirtung: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPangnirtung,\n  name: 'America/Pangnirtung',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaParamaribo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaParamaribo,\n  name: 'America/Paramaribo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SurinameTime,\n};\n\nexport const AmericaPhoenix: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPhoenix,\n  name: 'America/Phoenix',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPortAuPrince: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortAuPrince,\n  name: 'America/Port-au-Prince',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPortOfSpain: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortOfSpain,\n  name: 'America/Port_of_Spain',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaPortoVelho: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortoVelho,\n  name: 'America/Porto_Velho',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaPuertoRico: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPuertoRico,\n  name: 'America/Puerto_Rico',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaRainyRiver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRainyRiver,\n  name: 'America/Rainy_River',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRankinInlet: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRankinInlet,\n  name: 'America/Rankin_Inlet',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRecife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRecife,\n  name: 'America/Recife',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaRegina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRegina,\n  name: 'America/Regina',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaResolute: TimezoneRegion = {\n  id: TimezoneRegions.AmericaResolute,\n  name: 'America/Resolute',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRioBranco: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRioBranco,\n  name: 'America/Rio_Branco',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaSantaIsabel: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantaIsabel,\n  name: 'America/Santa_Isabel',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaSantarem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantarem,\n  name: 'America/Santarem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaSantiago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantiago,\n  name: 'America/Santiago',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChileStandardTime,\n};\n\nexport const AmericaSantoDomingo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantoDomingo,\n  name: 'America/Santo_Domingo',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSaoPaulo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSaoPaulo,\n  name: 'America/Sao_Paulo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaScoresbysund: TimezoneRegion = {\n  id: TimezoneRegions.AmericaScoresbysund,\n  name: 'America/Scoresbysund',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.EasternGreenlandTime,\n};\n\nexport const AmericaShiprock: TimezoneRegion = {\n  id: TimezoneRegions.AmericaShiprock,\n  name: 'America/Shiprock',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaSitka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSitka,\n  name: 'America/Sitka',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaStBarthelemy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStBarthelemy,\n  name: 'America/St_Barthelemy',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStJohns: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStJohns,\n  name: 'America/St_Johns',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AmericaStKitts: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStKitts,\n  name: 'America/St_Kitts',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStLucia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStLucia,\n  name: 'America/St_Lucia',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStThomas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStThomas,\n  name: 'America/St_Thomas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStVincent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStVincent,\n  name: 'America/St_Vincent',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSwiftCurrent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSwiftCurrent,\n  name: 'America/Swift_Current',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaTegucigalpa: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTegucigalpa,\n  name: 'America/Tegucigalpa',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaThule: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThule,\n  name: 'America/Thule',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaThunderBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThunderBay,\n  name: 'America/Thunder_Bay',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTijuana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTijuana,\n  name: 'America/Tijuana',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaToronto: TimezoneRegion = {\n  id: TimezoneRegions.AmericaToronto,\n  name: 'America/Toronto',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTortola: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTortola,\n  name: 'America/Tortola',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaVancouver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaVancouver,\n  name: 'America/Vancouver',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWhitehorse: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWhitehorse,\n  name: 'America/Whitehorse',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWinnipeg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWinnipeg,\n  name: 'America/Winnipeg',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaYakutat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYakutat,\n  name: 'America/Yakutat',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaYellowknife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYellowknife,\n  name: 'America/Yellowknife',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AntarcticaCasey: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaCasey,\n  name: 'Antarctica/Casey',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.WesternStandardTime,\n};\n\nexport const AntarcticaDavis: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDavis,\n  name: 'Antarctica/Davis',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AntarcticaDumontDUrville: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDumontDUrville,\n  name: 'Antarctica/DumontDUrville',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMacquarie: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMacquarie,\n  name: 'Antarctica/Macquarie',\n  offset: TimezoneOffset.UTC_MINUS_11,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMawson: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMawson,\n  name: 'Antarctica/Mawson',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMcMurdo: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMcMurdo,\n  name: 'Antarctica/McMurdo',\n  offset: TimezoneOffset.UTC_MINUS_12,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const AntarcticaPalmer: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaPalmer,\n  name: 'Antarctica/Palmer',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const AntarcticaRothera: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaRothera,\n  name: 'Antarctica/Rothera',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.RotheraResearchStationTime,\n};\n\nexport const AntarcticaSyowa: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaSyowa,\n  name: 'Antarctica/Syowa',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ShowaStationTime,\n};\n\nexport const AntarcticaTroll: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaTroll,\n  name: 'Antarctica/Troll',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaVostok: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaVostok,\n  name: 'Antarctica/Vostok',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const ArcticLongyearbyen: TimezoneRegion = {\n  id: TimezoneRegions.ArcticLongyearbyen,\n  name: 'Arctic/Longyearbyen',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AsiaAden: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAden,\n  name: 'Asia/Aden',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaAlmaty: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAlmaty,\n  name: 'Asia/Almaty',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.AlmaAtaTime,\n};\n\nexport const AsiaAmman: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAmman,\n  name: 'Asia/Amman',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaAnadyr: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAnadyr,\n  name: 'Asia/Anadyr',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const AsiaAqtau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtau,\n  name: 'Asia/Aqtau',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAqtobe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtobe,\n  name: 'Asia/Aqtobe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAshgabat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAshgabat,\n  name: 'Asia/Ashgabat',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TurkmenistanTime,\n};\n\nexport const AsiaBaghdad: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaghdad,\n  name: 'Asia/Baghdad',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBahrain: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBahrain,\n  name: 'Asia/Bahrain',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBaku: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaku,\n  name: 'Asia/Baku',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AzerbaijanTime,\n};\n\nexport const AsiaBangkok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBangkok,\n  name: 'Asia/Bangkok',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaBarnaul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBarnaul,\n  name: 'Asia/Barnaul',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaBeirut: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBeirut,\n  name: 'Asia/Beirut',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaBishkek: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBishkek,\n  name: 'Asia/Bishkek',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KyrgyzstanTime,\n};\n\nexport const AsiaBrunei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBrunei,\n  name: 'Asia/Brunei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.BruneiTime,\n};\n\nexport const AsiaChita: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChita,\n  name: 'Asia/Chita',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaChoibalsan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChoibalsan,\n  name: 'Asia/Choibalsan',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChoibalsanStandardTime,\n};\n\nexport const AsiaColombo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaColombo,\n  name: 'Asia/Colombo',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaDamascus: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDamascus,\n  name: 'Asia/Damascus',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaDhaka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDhaka,\n  name: 'Asia/Dhaka',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BangladeshStandardTime,\n};\n\nexport const AsiaDili: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDili,\n  name: 'Asia/Dili',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaDubai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDubai,\n  name: 'Asia/Dubai',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaDushanbe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDushanbe,\n  name: 'Asia/Dushanbe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TajikistanTime,\n};\n\nexport const AsiaFamagusta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaFamagusta,\n  name: 'Asia/Famagusta',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaGaza: TimezoneRegion = {\n  id: TimezoneRegions.AsiaGaza,\n  name: 'Asia/Gaza',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHebron: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHebron,\n  name: 'Asia/Hebron',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHoChiMinh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHoChiMinh,\n  name: 'Asia/Ho_Chi_Minh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaHongKong: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHongKong,\n  name: 'Asia/Hong_Kong',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.HongKongTime,\n};\n\nexport const AsiaHovd: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHovd,\n  name: 'Asia/Hovd',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.HovdTime,\n};\n\nexport const AsiaIrkutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaIrkutsk,\n  name: 'Asia/Irkutsk',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.IrkutskTime,\n};\n\nexport const AsiaJakarta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJakarta,\n  name: 'Asia/Jakarta',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaJayapura: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJayapura,\n  name: 'Asia/Jayapura',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaJerusalem: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJerusalem,\n  name: 'Asia/Jerusalem',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaKabul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKabul,\n  name: 'Asia/Kabul',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AfghanistanTime,\n};\n\nexport const AsiaKamchatka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKamchatka,\n  name: 'Asia/Kamchatka',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.KamchatkaTime,\n};\n\nexport const AsiaKarachi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKarachi,\n  name: 'Asia/Karachi',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.PakistanStandardTime,\n};\n\nexport const AsiaKathmandu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKathmandu,\n  name: 'Asia/Kathmandu',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.NepalTime,\n};\n\nexport const AsiaKhandyga: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKhandyga,\n  name: 'Asia/Khandyga',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaKolkata: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKolkata,\n  name: 'Asia/Kolkata',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaKrasnoyarsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKrasnoyarsk,\n  name: 'Asia/Krasnoyarsk',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\nexport const AsiaKualaLumpur: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKualaLumpur,\n  name: 'Asia/Kuala_Lumpur',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuching: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuching,\n  name: 'Asia/Kuching',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuwait: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuwait,\n  name: 'Asia/Kuwait',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaMacau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMacau,\n  name: 'Asia/Macau',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaMagadan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMagadan,\n  name: 'Asia/Magadan',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.MagadanTime,\n};\n\nexport const AsiaMakassar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMakassar,\n  name: 'Asia/Makassar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaTime,\n};\n\nexport const AsiaManila: TimezoneRegion = {\n  id: TimezoneRegions.AsiaManila,\n  name: 'Asia/Manila',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PhilippineTime,\n};\n\nexport const AsiaMuscat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMuscat,\n  name: 'Asia/Muscat',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaNovokuznetsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovokuznetsk,\n  name: 'Asia/Novokuznetsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaNovosibirsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovosibirsk,\n  name: 'Asia/Novosibirsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaOmsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOmsk,\n  name: 'Asia/Omsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.OmskTime,\n};\n\nexport const AsiaOral: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOral,\n  name: 'Asia/Oral',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.OralTime,\n};\n\nexport const AsiaPhnomPenh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPhnomPenh,\n  name: 'Asia/Phnom_Penh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaPontianak: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPontianak,\n  name: 'Asia/Pontianak',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaPyongyang: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPyongyang,\n  name: 'Asia/Pyongyang',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaQatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQatar,\n  name: 'Asia/Qatar',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaQyzylorda: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQyzylorda,\n  name: 'Asia/Qyzylorda',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.WestKazakhstanTime,\n};\n\nexport const AsiaRangoon: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRangoon,\n  name: 'Asia/Rangoon',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.MyanmarStandardTime,\n};\n\nexport const AsiaRiyadh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRiyadh,\n  name: 'Asia/Riyadh',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaSakhalin: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSakhalin,\n  name: 'Asia/Sakhalin',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SakhalinIslandTime,\n};\n\nexport const AsiaSamarkand: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSamarkand,\n  name: 'Asia/Samarkand',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaSeoul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSeoul,\n  name: 'Asia/Seoul',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaShanghai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaShanghai,\n  name: 'Asia/Shanghai',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaSingapore: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSingapore,\n  name: 'Asia/Singapore',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.SingaporeStandardTime,\n};\n\nexport const AsiaSrednekolymsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSrednekolymsk,\n  name: 'Asia/Srednekolymsk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SrednekolymskTime,\n};\n\nexport const AsiaTaipei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTaipei,\n  name: 'Asia/Taipei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaTashkent: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTashkent,\n  name: 'Asia/Tashkent',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaTbilisi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTbilisi,\n  name: 'Asia/Tbilisi',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GeorgiaStandardTime,\n};\n\nexport const AsiaTehran: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTehran,\n  name: 'Asia/Tehran',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.IranStandardTime,\n};\n\nexport const AsiaThimphu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaThimphu,\n  name: 'Asia/Thimphu',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BhutanTime,\n};\n\nexport const AsiaTokyo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTokyo,\n  name: 'Asia/Tokyo',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaTomsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTomsk,\n  name: 'Asia/Tomsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaUlaanbaatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUlaanbaatar,\n  name: 'Asia/Ulaanbaatar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.UlaanbaatarStandardTime,\n};\n\nexport const AsiaUrumqi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUrumqi,\n  name: 'Asia/Urumqi',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaUstNera: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUstNera,\n  name: 'Asia/Ust-Nera',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaVientiane: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVientiane,\n  name: 'Asia/Vientiane',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaVladivostok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVladivostok,\n  name: 'Asia/Vladivostok',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaYakutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYakutsk,\n  name: 'Asia/Yakutsk',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaYekaterinburg: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYekaterinburg,\n  name: 'Asia/Yekaterinburg',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.YekaterinburgTime,\n};\n\nexport const AsiaYerevan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYerevan,\n  name: 'Asia/Yerevan',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ArmeniaTime,\n};\n\nexport const AtlanticAzores: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticAzores,\n  name: 'Atlantic/Azores',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.AzoresStandardTime,\n};\n\nexport const AtlanticBermuda: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticBermuda,\n  name: 'Atlantic/Bermuda',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AtlanticCanary: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCanary,\n  name: 'Atlantic/Canary',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticCapeVerde: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCapeVerde,\n  name: 'Atlantic/Cape_Verde',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CapeVerdeTime,\n};\n\nexport const AtlanticFaroe: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticFaroe,\n  name: 'Atlantic/Faroe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticMadeira: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticMadeira,\n  name: 'Atlantic/Madeira',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticReykjavik: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticReykjavik,\n  name: 'Atlantic/Reykjavik',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticSouthGeorgia: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticSouthGeorgia,\n  name: 'Atlantic/South_Georgia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AtlanticStHelena: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStHelena,\n  name: 'Atlantic/St_Helena',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticStanley: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStanley,\n  name: 'Atlantic/Stanley',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.FalklandIslandsTime,\n};\n\nexport const AustraliaAdelaide: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaAdelaide,\n  name: 'Australia/Adelaide',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaBrisbane: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrisbane,\n  name: 'Australia/Brisbane',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaBrokenHill: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrokenHill,\n  name: 'Australia/Broken_Hill',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaCanberra: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCanberra,\n  name: 'Australia/Canberra',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaCurrie: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCurrie,\n  name: 'Australia/Currie',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaDarwin: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaDarwin,\n  name: 'Australia/Darwin',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaEucla: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaEucla,\n  name: 'Australia/Eucla',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n  timezone: Timezones.AustralianCentralWesternStandardTime,\n};\n\nexport const AustraliaHobart: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaHobart,\n  name: 'Australia/Hobart',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLindeman: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLindeman,\n  name: 'Australia/Lindeman',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLordHowe: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLordHowe,\n  name: 'Australia/Lord_Howe',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n  timezone: Timezones.LordHoweStandardTime,\n};\n\nexport const AustraliaMelbourne: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaMelbourne,\n  name: 'Australia/Melbourne',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaPerth: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaPerth,\n  name: 'Australia/Perth',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.AustralianWesternStandardTime,\n};\n\nexport const AustraliaSydney: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaSydney,\n  name: 'Australia/Sydney',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const EuropeAmsterdam: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAmsterdam,\n  name: 'Europe/Amsterdam',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAndorra: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAndorra,\n  name: 'Europe/Andorra',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAthens: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAthens,\n  name: 'Europe/Athens',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBelgrade: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBelgrade,\n  name: 'Europe/Belgrade',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBerlin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBerlin,\n  name: 'Europe/Berlin',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBratislava: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBratislava,\n  name: 'Europe/Bratislava',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBrussels: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBrussels,\n  name: 'Europe/Brussels',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBucharest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBucharest,\n  name: 'Europe/Bucharest',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBudapest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBudapest,\n  name: 'Europe/Budapest',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBusingen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBusingen,\n  name: 'Europe/Busingen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeChisinau: TimezoneRegion = {\n  id: TimezoneRegions.EuropeChisinau,\n  name: 'Europe/Chisinau',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeCopenhagen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeCopenhagen,\n  name: 'Europe/Copenhagen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeDublin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeDublin,\n  name: 'Europe/Dublin',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeGibraltar: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGibraltar,\n  name: 'Europe/Gibraltar',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeGuernsey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGuernsey,\n  name: 'Europe/Guernsey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeHelsinki: TimezoneRegion = {\n  id: TimezoneRegions.EuropeHelsinki,\n  name: 'Europe/Helsinki',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeIsleOfMan: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIsleOfMan,\n  name: 'Europe/Isle_of_Man',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeIstanbul: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIstanbul,\n  name: 'Europe/Istanbul',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeJersey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeJersey,\n  name: 'Europe/Jersey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeKaliningrad: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKaliningrad,\n  name: 'Europe/Kaliningrad',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeKiev: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKiev,\n  name: 'Europe/Kiev',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeLisbon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLisbon,\n  name: 'Europe/Lisbon',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLjubljana: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLjubljana,\n  name: 'Europe/Ljubljana',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeLondon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLondon,\n  name: 'Europe/London',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLuxembourg: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLuxembourg,\n  name: 'Europe/Luxembourg',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMadrid: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMadrid,\n  name: 'Europe/Madrid',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMalta: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMalta,\n  name: 'Europe/Malta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMariehamn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMariehamn,\n  name: 'Europe/Mariehamn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMinsk: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMinsk,\n  name: 'Europe/Minsk',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMonaco: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMonaco,\n  name: 'Europe/Monaco',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMoscow: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMoscow,\n  name: 'Europe/Moscow',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeOslo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeOslo,\n  name: 'Europe/Oslo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeParis: TimezoneRegion = {\n  id: TimezoneRegions.EuropeParis,\n  name: 'Europe/Paris',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePodgorica: TimezoneRegion = {\n  id: TimezoneRegions.EuropePodgorica,\n  name: 'Europe/Podgorica',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePrague: TimezoneRegion = {\n  id: TimezoneRegions.EuropePrague,\n  name: 'Europe/Prague',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeRiga: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRiga,\n  name: 'Europe/Riga',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeRome: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRome,\n  name: 'Europe/Rome',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSamara: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSamara,\n  name: 'Europe/Samara',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSanMarino: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSanMarino,\n  name: 'Europe/San_Marino',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSarajevo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSarajevo,\n  name: 'Europe/Sarajevo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSimferopol: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSimferopol,\n  name: 'Europe/Simferopol',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSkopje: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSkopje,\n  name: 'Europe/Skopje',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSofia: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSofia,\n  name: 'Europe/Sofia',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeStockholm: TimezoneRegion = {\n  id: TimezoneRegions.EuropeStockholm,\n  name: 'Europe/Stockholm',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeTallinn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTallinn,\n  name: 'Europe/Tallinn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeTirane: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTirane,\n  name: 'Europe/Tirane',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeUzhgorod: TimezoneRegion = {\n  id: TimezoneRegions.EuropeUzhgorod,\n  name: 'Europe/Uzhgorod',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVaduz: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVaduz,\n  name: 'Europe/Vaduz',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVatican: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVatican,\n  name: 'Europe/Vatican',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVienna: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVienna,\n  name: 'Europe/Vienna',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVilnius: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVilnius,\n  name: 'Europe/Vilnius',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVolgograd: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVolgograd,\n  name: 'Europe/Volgograd',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeWarsaw: TimezoneRegion = {\n  id: TimezoneRegions.EuropeWarsaw,\n  name: 'Europe/Warsaw',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZagreb: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZagreb,\n  name: 'Europe/Zagreb',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZaporozhye: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZaporozhye,\n  name: 'Europe/Zaporozhye',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeZurich: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZurich,\n  name: 'Europe/Zurich',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const IndianAntananarivo: TimezoneRegion = {\n  id: TimezoneRegions.IndianAntananarivo,\n  name: 'Indian/Antananarivo',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianChagos: TimezoneRegion = {\n  id: TimezoneRegions.IndianChagos,\n  name: 'Indian/Chagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.IndianOceanTime,\n};\n\nexport const IndianChristmas: TimezoneRegion = {\n  id: TimezoneRegions.IndianChristmas,\n  name: 'Indian/Christmas',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.ChristmasIslandTime,\n};\n\nexport const IndianCocos: TimezoneRegion = {\n  id: TimezoneRegions.IndianCocos,\n  name: 'Indian/Cocos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.CocosIslandsTime,\n};\n\nexport const IndianComoro: TimezoneRegion = {\n  id: TimezoneRegions.IndianComoro,\n  name: 'Indian/Comoro',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianKerguelen: TimezoneRegion = {\n  id: TimezoneRegions.IndianKerguelen,\n  name: 'Indian/Kerguelen',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.FrenchSouthernAndAntarcticTime,\n};\n\nexport const IndianMahe: TimezoneRegion = {\n  id: TimezoneRegions.IndianMahe,\n  name: 'Indian/Mahe',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.SeychellesTime,\n};\n\nexport const IndianMaldives: TimezoneRegion = {\n  id: TimezoneRegions.IndianMaldives,\n  name: 'Indian/Maldives',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.MaldivesTime,\n};\n\nexport const IndianMauritius: TimezoneRegion = {\n  id: TimezoneRegions.IndianMauritius,\n  name: 'Indian/Mauritius',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.MauritiusTime,\n};\n\nexport const IndianMayotte: TimezoneRegion = {\n  id: TimezoneRegions.IndianMayotte,\n  name: 'Indian/Mayotte',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianReunion: TimezoneRegion = {\n  id: TimezoneRegions.IndianReunion,\n  name: 'Indian/Reunion',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ReunionTime,\n};\n\nexport const PacificApia: TimezoneRegion = {\n  id: TimezoneRegions.PacificApia,\n  name: 'Pacific/Apia',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificAuckland: TimezoneRegion = {\n  id: TimezoneRegions.PacificAuckland,\n  name: 'Pacific/Auckland',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const PacificChatham: TimezoneRegion = {\n  id: TimezoneRegions.PacificChatham,\n  name: 'Pacific/Chatham',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const PacificEaster: TimezoneRegion = {\n  id: TimezoneRegions.PacificEaster,\n  name: 'Pacific/Easter',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.EasterIslandStandardTime,\n};\n\nexport const PacificEfate: TimezoneRegion = {\n  id: TimezoneRegions.PacificEfate,\n  name: 'Pacific/Efate',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.VanuatuTime,\n};\n\nexport const PacificEnderbury: TimezoneRegion = {\n  id: TimezoneRegions.PacificEnderbury,\n  name: 'Pacific/Enderbury',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFakaofo: TimezoneRegion = {\n  id: TimezoneRegions.PacificFakaofo,\n  name: 'Pacific/Fakaofo',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFiji: TimezoneRegion = {\n  id: TimezoneRegions.PacificFiji,\n  name: 'Pacific/Fiji',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.FijiTime,\n};\n\nexport const PacificFunafuti: TimezoneRegion = {\n  id: TimezoneRegions.PacificFunafuti,\n  name: 'Pacific/Funafuti',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.TuvaluTime,\n};\n\nexport const PacificGalapagos: TimezoneRegion = {\n  id: TimezoneRegions.PacificGalapagos,\n  name: 'Pacific/Galapagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.GalapagosTime,\n};\n\nexport const PacificGambier: TimezoneRegion = {\n  id: TimezoneRegions.PacificGambier,\n  name: 'Pacific/Gambier',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.GambierIslandTime,\n};\n\nexport const PacificGuadalcanal: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuadalcanal,\n  name: 'Pacific/Guadalcanal',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SolomonIslandsTime,\n};\n\nexport const PacificGuam: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuam,\n  name: 'Pacific/Guam',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificHonolulu: TimezoneRegion = {\n  id: TimezoneRegions.PacificHonolulu,\n  name: 'Pacific/Honolulu',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificJohnston: TimezoneRegion = {\n  id: TimezoneRegions.PacificJohnston,\n  name: 'Pacific/Johnston',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificKiritimati: TimezoneRegion = {\n  id: TimezoneRegions.PacificKiritimati,\n  name: 'Pacific/Kiritimati',\n  offset: TimezoneOffset.UTC_PLUS_14,\n  timezone: Timezones.LineIslandsTime,\n};\n\nexport const PacificKosrae: TimezoneRegion = {\n  id: TimezoneRegions.PacificKosrae,\n  name: 'Pacific/Kosrae',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.KosraeTime,\n};\n\nexport const PacificKwajalein: TimezoneRegion = {\n  id: TimezoneRegions.PacificKwajalein,\n  name: 'Pacific/Kwajalein',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMajuro: TimezoneRegion = {\n  id: TimezoneRegions.PacificMajuro,\n  name: 'Pacific/Majuro',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMarquesas: TimezoneRegion = {\n  id: TimezoneRegions.PacificMarquesas,\n  name: 'Pacific/Marquesas',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.MarquesasIslandsTime,\n};\n\nexport const PacificMidway: TimezoneRegion = {\n  id: TimezoneRegions.PacificMidway,\n  name: 'Pacific/Midway',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificNauru: TimezoneRegion = {\n  id: TimezoneRegions.PacificNauru,\n  name: 'Pacific/Nauru',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NauruTime,\n};\n\nexport const PacificNiue: TimezoneRegion = {\n  id: TimezoneRegions.PacificNiue,\n  name: 'Pacific/Niue',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NiueTime,\n};\n\nexport const PacificNorfolk: TimezoneRegion = {\n  id: TimezoneRegions.PacificNorfolk,\n  name: 'Pacific/Norfolk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NorfolkIslandTime,\n};\n\nexport const PacificNoumea: TimezoneRegion = {\n  id: TimezoneRegions.PacificNoumea,\n  name: 'Pacific/Noumea',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const PacificPagoPago: TimezoneRegion = {\n  id: TimezoneRegions.PacificPagoPago,\n  name: 'Pacific/Pago_Pago',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificPalau: TimezoneRegion = {\n  id: TimezoneRegions.PacificPalau,\n  name: 'Pacific/Palau',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.PalauTime,\n};\n\nexport const PacificPitcairn: TimezoneRegion = {\n  id: TimezoneRegions.PacificPitcairn,\n  name: 'Pacific/Pitcairn',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PitcairnTime,\n};\n\nexport const PacificPonape: TimezoneRegion = {\n  id: TimezoneRegions.PacificPonape,\n  name: 'Pacific/Ponape',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificPortMoresby: TimezoneRegion = {\n  id: TimezoneRegions.PacificPortMoresby,\n  name: 'Pacific/Port_Moresby',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.PapuaNewGuineaTime,\n};\n\nexport const PacificRarotonga: TimezoneRegion = {\n  id: TimezoneRegions.PacificRarotonga,\n  name: 'Pacific/Rarotonga',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.CookIslandTime,\n};\n\nexport const PacificSaipan: TimezoneRegion = {\n  id: TimezoneRegions.PacificSaipan,\n  name: 'Pacific/Saipan',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificTahiti: TimezoneRegion = {\n  id: TimezoneRegions.PacificTahiti,\n  name: 'Pacific/Tahiti',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.TahitiTime,\n};\n\nexport const PacificTarawa: TimezoneRegion = {\n  id: TimezoneRegions.PacificTarawa,\n  name: 'Pacific/Tarawa',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.GilbertIslandTime,\n};\n\nexport const PacificTongatapu: TimezoneRegion = {\n  id: TimezoneRegions.PacificTongatapu,\n  name: 'Pacific/Tongatapu',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificChuuk: TimezoneRegion = {\n  id: TimezoneRegions.PacificChuuk,\n  name: 'Pacific/Chuuk',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n\nexport const PacificPohnpei: TimezoneRegion = {\n  id: TimezoneRegions.PacificPohnpei,\n  name: 'Pacific/Pohnpei',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificYap: TimezoneRegion = {\n  id: TimezoneRegions.PacificYap,\n  name: 'Pacific/Yap',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n", "import { Model, Primitives } from '@srclaunch/types';\n\nexport function getTypescriptTypeFromPrimitive(type: Primitives) {\n  switch (type) {\n    case Primitives.Boolean:\n      return 'boolean';\n    case Primitives.DayOfMonth:\n      return 'number';\n    case Primitives.Weekday:\n      return 'string';\n    case Primitives.Float:\n      return 'number';\n    case Primitives.CurrencyCode:\n      return 'string';\n    case Primitives.DateTime:\n      return 'Date';\n    case Primitives.Image:\n        return 'Image[]';\n    case Primitives.JSON:\n      return 'Record<string, any>';\n    case Primitives.LongText:\n      return 'string';\n    case Primitives.Markdown:\n      return 'string';\n    case Primitives.Menu:\n      return 'Menu';\n    case Primitives.Month:\n      return 'number';\n    case Primitives.Number:\n      return 'number';\n    case Primitives.Tags:\n      return 'string[]';\n    case Primitives.String:\n      return 'string';\n    case Primitives.UUID:\n      return 'string';\n    // case Primitives.UnofficialCurrencyCode:\n    //   return 'string';\n    default:\n      return 'unknown';\n  }\n}\n\nfunction constructClassPropsWithTypes(fields: Model['fields']): string {\n  let fieldsStr = ` public readonly id!: string;\n  public readonly created_date!: Date;\n  public readonly updated_date!: Date;\n  `;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `public ${field[0]}!: ${getTypescriptTypeFromPrimitive(\n      field[1].type,\n    )} ${!field[1].required ? '| null' : ''};\\n`;\n  }\n\n  return fieldsStr;\n}\n\nexport function constructTypesStr(model: Model): string {\n  const typePropertiesStr = constructTypePropsFromFields(model.fields);\n  const classPropertiesStr = constructClassPropsWithTypes(model.fields);\n\n  return `import { Menu } from '@srclaunch/types';\n  \nexport type ${model.name}Attributes = {\n  ${typePropertiesStr}\n};\n\nexport default class ${model.name} implements ${model.name}Attributes {\n${classPropertiesStr}\n}\n`;\n}\n\nexport function constructTypePropsFromFields(fields: Model['fields']): string {\n  let fieldsStr = `  id: string;\n  created_date: DateTime;\n  updated_date: DateTime;\n`;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `  ${field[0]}${\n      !field[1].required ? '?' : ''\n    }: ${getTypescriptTypeFromPrimitive(field[1].type)} ${\n      !field[1].required ? '| null' : ''\n    };\\n`;\n  }\n\n  return fieldsStr;\n}\n", "import { Model, ModelField, Primitives } from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nimport { getTypescriptTypeFromPrimitive } from '../types.js';\n\nconst snakeToPascal = (str: string) => {\n  return str\n    .split('/')\n    .map(snake =>\n      snake\n        .split('_')\n        .map(substr => substr.charAt(0).toUpperCase() + substr.slice(1))\n        .join(''),\n    )\n    .join('/');\n};\n\nexport function getPrimitiveImports(\n  fields: Record<string, ModelField>,\n): string {\n  let imports = 'import { ';\n\n  for (const f of Object.values(fields)) {\n    switch (f.type) {\n      case Primitives.Image:\n        if (!imports.includes(' Image,')) {\n          imports += 'Image, ';\n        }\n\n        break;\n      case Primitives.Menu:\n        if (!imports.includes(' Menu,')) {\n          imports += 'Menu, ';\n        }\n\n        break;\n      default:\n        break;\n    }\n  }\n\n  imports += \"} from '@srclaunch/types';\";\n\n  return imports;\n}\n\nexport function constructModelTypeFromModel(model: Model): string {\n  const fieldStrs = Object.entries(model.fields)\n    .map(([fieldName, field]) => {\n      return `\\n${fieldName}${field.required ? '' : '?'}: ${\n        field.type === Primitives.Menu\n          ? model.name + pluralize(snakeToPascal(fieldName))\n          : getTypescriptTypeFromPrimitive(field.type)\n      }${field.required ? ';' : ' | null;'}`;\n    })\n    .join('');\n\n  // if (model.relationships) {\n  //   const belongsTo = model.relationships.belongsTo;\n\n  //   if (belongsTo) {\n  //     for (const belong of belongsTo) {\n  //       fieldStrs += `\\n${belong}Id: string;`;\n  //     }\n  //   }\n  // }\n\n  let str = `${getPrimitiveImports(model.fields)}\\n`;\n\n  for (const [fieldName, field] of Object.entries(model.fields)) {\n    let enumStr = '';\n\n    if (field.type === Primitives.Menu && field.menu) {\n      enumStr += `export enum ${\n        model.name + pluralize(snakeToPascal(fieldName))\n      } {`;\n      const regex = /[^\\dA-Za-z]/g;\n\n      for (const item of field.menu) {\n        if (item.label) {\n          enumStr += `\\n  ${snakeToPascal(item.label)\n            .replace(/ /g, '')\n            .replace(/0/g, 'Zero')\n            .replace(/1/g, 'One')\n            .replace(/2/g, 'Two')\n            .replace(/3/g, 'Three')\n            .replace(/4/g, 'Four')\n            .replace(/5/g, 'Five')\n            .replace(/6/g, 'Six')\n            .replace(/7/g, 'Seven')\n            .replace(/8/g, 'Eight')\n            .replace(/9/g, 'Nine')\n            .replace(regex, '')} = \"${item.value}\",`;\n        }\n      }\n\n      enumStr += '};\\n\\n';\n    }\n\n    str += `\\n${enumStr}`;\n  }\n\n  str += `export type ${model.name} = {\n    id?: string;${fieldStrs}\n  };`;\n\n  return str;\n}\n\nexport function getModelExports(model: Model): string {\n  let str = `export { ${model.name} } from './${model.name}';\\n`;\n\n  let enumStr = '';\n\n  for (const [fieldName, field] of Object.entries(model.fields)) {\n    if (field.type === Primitives.Menu && field.menu) {\n      enumStr += `${model.name + pluralize(snakeToPascal(fieldName))},`;\n    }\n  }\n\n  if (enumStr.length > 0) {\n    str += `export {${enumStr}} from './${model.name}';\\n`;\n  }\n\n  return str;\n}\n\nexport async function buildModelTypes(projectPath: string) {\n  try {\n    const MODELS_BUILD_PATH = path.join(\n      path.resolve(),\n      '.applab/dependencies/models/dist/index.js',\n    );\n    const BUILD_PATH = path.join(path.resolve(), projectPath, 'src');\n    const DIST_PATH = path.join(path.resolve(), projectPath, 'dist');\n    const TYPES_DIR_PATH = path.join(path.resolve(), 'types');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(TYPES_DIR_PATH);\n\n    for (const file of files) {\n      const fileContents = await fs.readFile(\n        path.join(TYPES_DIR_PATH, file),\n        'utf8',\n      );\n\n      await fs.writeFile(path.join(BUILD_PATH, file), fileContents, 'utf8');\n    }\n\n    const Models = await import(MODELS_BUILD_PATH);\n\n    let exportStr = '';\n\n    for (const model of Object.entries(Models as Record<string, Model>)) {\n      const modelName = model[1].name;\n      const types = constructModelTypeFromModel(model[1]);\n      const fileName = `${modelName}.ts`;\n      const filePath = path.join(BUILD_PATH, fileName);\n\n      // logger.info(`Writing model types to ${modelName}.ts`);\n\n      await fs.writeFile(filePath, types, 'utf8');\n\n      exportStr += getModelExports(model[1]);\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    await fs.writeFile(path.join(BUILD_PATH, 'index.ts'), exportStr, 'utf8');\n  } catch (error: any) {\n    console.error('err', error);\n    throw error;\n  }\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { constructAppLabModelExports } from '../exports.js';\nimport {\n  getDocumentModel,\n  getInvoiceModel,\n  getMessageModel,\n  getOrganizationModel,\n  getPaymentMethodModel,\n  getPaymentModel,\n  getPersonModel,\n  getSubscriptionModel,\n  getTeamModel,\n  getUserGroupModel,\n  getUserModel,\n  getUserRoleModel,\n} from './models.js';\n\nexport async function copyStubModels() {\n  try {\n    const BUILD_PATH = path.join(path.resolve(), '.applab/dependencies/models');\n\n    const applabModelPath = path.join(BUILD_PATH, 'src');\n\n    // await fs.writeFile(\n    //   path.join(applabModelPath, 'Message.ts'),\n    //   getMessageModel(),\n    //   'utf8',\n    // );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Organization.ts'),\n      getOrganizationModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Team.ts'),\n      getTeamModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Document.ts'),\n      getDocumentModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Payment.ts'),\n      getPaymentModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Invoice.ts'),\n      getInvoiceModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'PaymentMethod.ts'),\n      getPaymentMethodModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Person.ts'),\n      getPersonModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'Subscription.ts'),\n      getSubscriptionModel(),\n      'utf8',\n    );\n\n    await fs.writeFile(\n      path.join(applabModelPath, 'User.ts'),\n      getUserModel(),\n      'utf8',\n    );\n    await fs.writeFile(\n      path.join(applabModelPath, 'UserGroup.ts'),\n      getUserGroupModel(),\n      'utf8',\n    );\n    await fs.writeFile(\n      path.join(applabModelPath, 'UserRole.ts'),\n      getUserRoleModel(),\n      'utf8',\n    );\n\n    // const modelExportsIndexFile = await constructAppLabModelExports();\n    // await fs.writeFile(\n    //   path.join(BUILD_PATH, 'src', 'index.ts'),\n    //   modelExportsIndexFile,\n    //   'utf8',\n    // );\n  } catch (error: any) {\n    console.error(error);\n  }\n}\n", "export function getDocumentModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export const Document: ModelProps = {\n    fields: {\n      name: {\n        label: \"Name\",\n        type: Primitives.String,\n        required: true,\n      },\n      description: {\n        label: \"Description\",\n        type: Primitives.String,\n        required: true,\n      }\n    },\n    name: \"Document\",\n    relationships: {\n      belongsTo: [\"Organization\", \"Invoice\", \"User\"],\n    },\n  };\n  `;\n}\n\nexport function getMessageModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export const Message: ModelProps = {\n    fields: {\n      message: {\n        label: \"Message\",\n        type: Primitives.String,\n        required: true,\n      },\n      recipient: {\n        label: \"Recipient\",\n        type: Primitives.String,\n        required: false,\n      }\n    },\n    name: \"Message\",\n    relationships: {\n      belongsTo: [\"Organization\", \"User\"],\n    },\n  };`;\n}\n\nexport function getInvoiceModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export const Invoice: ModelProps = {\n    fields: {\n      amount: {\n        label: \"Amount\",\n        type: Primitives.Number,\n        required: true,\n      },\n      currency: {\n        label: \"Currency\",\n        type: Primitives.CurrencyCode,\n        required: true,\n      },\n      date: {\n        label: \"Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      due_date: {\n        label: \"Due Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      notes: {\n        label: \"Notes\",\n        type: Primitives.String,\n      },\n      status: {\n        label: \"Status\",\n        type: Primitives.String,\n        required: true,\n      },\n    },\n    name: \"Invoice\",\n    relationships: {\n      belongsTo: [\"Organization\", \"Payment\", \"User\"],\n    },\n  };`;\n}\n\nexport function getOrganizationModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const Organization: ModelProps = {\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"Organization\",\n  relationships: {},\n};`;\n}\n\nexport function getPaymentModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export const Payment: ModelProps = {\n    fields: {\n      amount: {\n        label: \"Amount\",\n        type: Primitives.Number,\n        required: true,\n      },\n      currency: {\n        label: \"Currency\",\n        type: Primitives.CurrencyCode,\n        required: true,\n      },\n      date: {\n        label: \"Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      failure_reason: {\n        label: \"Failure Reason\",\n        type: Primitives.Menu,\n        menu: [\n          {\n            label: 'Insufficient Funds',\n            value: 'insufficient-funds',\n          },\n          {\n            label: 'Invalid Amount',\n            value: 'invalid-amount',\n          },\n          {\n            label: 'Invalid Currency',\n            value: 'invalid-currency',\n          },\n          {\n            label: 'Invalid Card',\n            value: 'invalid-card',\n          },\n          {\n            label: 'Invalid Card Expiry',\n            value: 'invalid-card-expiry',\n          },\n          {\n            label: 'Invalid Card Number',\n            value: 'invalid-card-number',\n          },\n          {\n            label: 'Invalid Card Security Code',\n            value: 'invalid-card-security-code',\n          },\n          {\n            label: 'Invalid Card Holder',\n            value: 'invalid-card-holder',\n          },\n          {\n            label: 'Invalid Card Address',\n            value: 'invalid-card-address',\n          },\n        ]\n      },\n      notes: {\n        label: \"Notes\",\n        type: Primitives.String,\n        required: true,\n      },\n      status: {\n        label: \"Status\",\n        type: Primitives.Menu,\n        required: true,\n        menu: [\n          {\n            label: \"Paid\",\n            value: \"paid\",\n          },\n          {\n            label: \"Failure\",\n            value: \"failure\",\n          },\n          {\n            label: \"Pending\",\n            value: \"pending\",\n          },\n        ],\n      }\n    },\n    name: \"Payment\",\n    relationships: {\n      belongsTo: [\"Organization\", \"User\"],\n    },\n  };`;\n}\n\nexport function getPaymentMethodModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const PaymentMethod: ModelProps = {\n  fields: {\n    default: {\n      label: \"Default\",\n      type: Primitives.Boolean,\n    },\n    masked_number: {\n      label: \"Number\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n    type: {\n      label: \"Type\",\n      menu: [\n        {\n          label: \"Bank Transfer\",\n          value: \"bank-transfer\",\n        },\n        {\n          label: \"Credit Card\",\n          value: \"credit-card\",\n        },\n        {\n          label: \"Crypto\",\n          value: \"crypto\",\n        },\n      ],\n      type: Primitives.Menu,\n    },\n  },\n  name: \"PaymentMethod\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Payment\", \"Team\", \"User\"],\n  },\n};`;\n}\n\nexport function getPersonModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const Person: ModelProps = {\n  fields: {\n    analytics: {\n      label: \"Analytics\",\n      type: Primitives.JSON,\n    },\n    billing: {\n      label: \"Billing Details\",\n      type: Primitives.JSON,\n    },\n  },\n  name: \"Person\",\n  relationships: {\n    hasMany: [\"Event\"],\n    hasOne: [\"User\"],\n  },\n};`;\n}\n\nexport function getSubscriptionModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const Subscription: ModelProps = {\n  fields: {\n    status: {\n      label: \"Status\",\n      menu: [\n        {\n          label: \"Active\",\n          value: \"active\",\n        },\n        {\n          label: \"Expired\",\n          value: \"expired\",\n        },\n        {\n          label: \"Canceled\",\n          value: \"canceled\",\n        },\n      ],\n      type: Primitives.Menu,\n    },\n    cancel_date: {\n      label: \"Cancel date\",\n      type: Primitives.DateTime,\n    },\n    expiration_date: {\n      label: \"Expiration date\",\n      type: Primitives.DateTime,\n    },\n    renewal_date: {\n      label: \"Renewal date\",\n      type: Primitives.DateTime,\n    },\n    start_date: {\n      label: \"Start date\",\n      type: Primitives.DateTime,\n    },\n  },\n  name: \"Subscription\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Product\", \"Team\", \"User\"],\n  },\n};`;\n}\n\n\nexport function getTeamModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const Team: ModelProps = {\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"Team\",\n  relationships: {\n    belongsTo: [\"Organization\"],\n  },\n};`;\n}\n\nexport function getUserModel() {\n  return `import {\n  CurrencyCode,\n  LanguageCode,\n  LocaleCode,\n  ModelProps,\n  Primitives,\n} from \"@srclaunch/types\";\n\nexport const User: ModelProps = {\n  description: \"A user that signs into the application\",\n  fields: {\n    access: {\n      label: \"Access Details\",\n      type: Primitives.JSON,\n    },\n    cognito_id: {\n      label: \"Cognito ID\",\n      type: Primitives.String,\n    },\n    membership: {\n      label: \"Membership\",\n      type: Primitives.JSON,\n    },\n    onboarding: {\n      label: \"Onboarding\",\n      type: Primitives.JSON,\n    },\n    preferences: {\n      defaultValue: {\n        accessibility: {\n          outlines: false,\n        },\n        localization: {\n          currency: CurrencyCode.UnitedStatesDollar,\n          language: LanguageCode.English,\n          locale: LocaleCode.EnglishUnitedStates,\n        },\n        look_and_feel: {\n          theme: \"light\",\n        },\n      },\n      label: \"Preferences\",\n      type: Primitives.JSON,\n    },\n  },\n  name: \"User\",\n  relationships: {\n    belongsTo: [\"Person\", \"Team\"]\n  },\n};`;\n}\n\nexport function getUserGroupModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const UserGroup: ModelProps = {\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"UserGroup\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Team\"],\n  },\n};`;\n}\n\nexport function getUserRoleModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport const UserRole: ModelProps = {\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"UserRole\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Team\"],\n  },\n};`;\n}\n", "import fs from 'fs-extra';\nimport path from 'path';\n\nexport async function listModels() {\n  const modelsPath = path.join('models');\n\n  const files = fs.readdirSync(modelsPath).filter(file => {\n    return file.slice(-3) === '.ts' && file.split('.ts')[0] !== 'index';\n  });\n\n  console.info(files.map(file => file.split('.ts')[0]).toString());\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nexport async function cleanModels() {\n  try {\n    const MODEL_DEPS_PATH = path.join(path.resolve(), 'dependencies/models');\n\n    await fs.emptyDir(path.join(MODEL_DEPS_PATH, 'src'));\n\n    // const TYPES_DEPS_PATH = path.join(\n    //   path.resolve(),\n    //   APPLAB_DIRECTORY,\n    //   'dependencies/types',\n    // );\n    // const SEQUELIZE_DEPS_PATH = path.join(\n    //   path.resolve(),\n    //   APPLAB_DIRECTORY,\n    //   'dependencies/sequelize-models',\n    // );\n\n    // await fs.emptyDir(path.join(MODEL_DEPS_PATH, 'src', 'applab'));\n    // await fs.emptyDir(path.join(MODEL_DEPS_PATH, 'src', 'json'));\n    // await fs.emptyDir(path.join(TYPES_DEPS_PATH, 'src'));\n    // await fs.emptyDir(path.join(SEQUELIZE_DEPS_PATH, 'src'));\n  } catch (error: any) {\n    console.error(error);\n  }\n}\n"],
  "mappings": "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,CAAC,uBAAwB,QAAQ,EACjC,CAAC,sBAAuB,IAAI,EAC5B,CAAC,2FAA4F,IAAI,EACjG,CAAC,qEAAsE,OAAO,EAC9E,CAAC,iCAAkC,IAAI,EACvC,CAAC,oBAAqB,MAAM,EAC5B,CAAC,4FAA6F,MAAM,EACpG,CAAC,yGAA0G,MAAM,EACjH,CAAC,8FAA+F,MAAM,EACtG,CAAC,0BAA2B,KAAK,EACjC,CAAC,+BAAgC,MAAM,EACvC,CAAC,sBAAuB,MAAM,EAC9B,CAAC,oBAAqB,QAAQ,EAC9B,CAAC,eAAgB,IAAI,EACrB,CAAC,YAAa,IAAI,EAClB,CAAC,QAAS,KAAK,CACjB,EAAE,QAAQ,SAAU,EAAM,CACxB,MAAO,GAAU,gBAAgB,EAAK,GAAI,EAAK,EAAE,CACnD,CAAC,EAKD,CAEE,YACA,SACA,SACA,MACA,WACA,UACA,OACA,YACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,WACA,MACA,UACA,UACA,WACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,eAEA,gBACA,SACA,SACA,YACA,WACA,QACA,SACF,EAAE,QAAQ,EAAU,kBAAkB,EAE/B,CACT,CAAC,ICtfD,yBACA,gCCDA,6BAEA,0BCFA,6BACA,0BCDA,qCACA,2BACA,yBACA,oBAGA,kBAA4B,CAC1B,WAAW,OACX,YAAY,WACZ,YAAY,GACZ,aAAa,GACb,SAAS,GACT,YAAY,GACZ,gBAAgB,GAChB,QAAQ,GACR,SAAS,CAAC,EACV,cAAc,CAAC,EACf,SAAS,MACT,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",
  "names": []
}
